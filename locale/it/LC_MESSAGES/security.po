# SOME DESCRIPTIVE TITLE.
# Copyright (C) Plone community and other individual contributors
# This file is distributed under the same license as the Plone Developer Documentation package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: plone-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-08 13:29\n"
"PO-Revision-Date: 2014-02-08 12:46+0000\n"
"Last-Translator: Giacomo <giacomo.spettoli@gmail.com>\n"
"Language-Team: Italian (http://www.transifex.com/projects/p/plone-doc/language/it/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: it\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# d350f250097c4d86abe19ce1f83d4535
#: ../../source/security/csrf.rst:2
msgid "Cross-Site Request Forgery (CSRF)"
msgstr ""

# e942601d7eb040209e142489742b46ca
#: ../../source/security/csrf.rst:5
msgid "Plain usage"
msgstr ""

# 1cdc4e99b6584817aa49dc2472a0cf64
#: ../../source/security/csrf.rst:7
msgid "Documentation: https://github.com/plone/plone.protect/"
msgstr ""

# 8f8946bbc4d34721a60c29f2d04ac786
#: ../../source/security/csrf.rst:10
msgid "z3c.form"
msgstr ""

# 79f3410055c54d15914b29106d439263
#: ../../source/security/csrf.rst:12
msgid ""
"z3c.form does not incude csrf protection yet: "
"https://bugs.launchpad.net/z3c.form/+bug/805794"
msgstr ""

# d46f7063d8d2403fb6cea2e403db2cf1
#: ../../source/security/custom_permissions.rst:3
msgid "Custom permissions"
msgstr ""

# cfef8809b19b447a80dad26f063300c5
#: ../../source/security/custom_permissions.rst:5
msgid "Creating special permissions for your product"
msgstr ""

# fdc05708c1314955aad93b61dd01e141
#: ../../source/security/custom_permissions.rst:9
msgid "Define Zope 2 permissions in python code"
msgstr ""

# f06fee14f4ac404da804bf8b8e4328b9
#: ../../source/security/custom_permissions.rst:11
msgid ""
"If you want to protect certain actions in your product by a special "
"permission, you most likely will want to assign this permission to a role "
"when the product is installed.  You will want to use Generic Setup's "
"rolemap.xml to assign these permissions.  A new permission will be added to "
"the Zope instance by calling setDefaultRoles on it."
msgstr ""

# 4407f52f82c0494fbd8678bdccfaae28
#: ../../source/security/custom_permissions.rst:17
msgid ""
"However, at the time when Generic Setup is run, almost none of your code has"
" actually been run, so the permission doesn't exist yet.  That's why we "
"define the permissions in permissions.py, and call this from __init__.py:"
msgstr ""

# 4e2a2e9069904877b8b4e04539795e40
#: ../../source/security/custom_permissions.rst:40
msgid ""
"When working with permissions, always use the variable name instead of the "
"string value.  This ensures that you can't make typos with the string value,"
" which are hard to debug.  If you do make a typo in the variable name, "
"you'll get an ImportError or NameError."
msgstr ""

# 61ef3712289f4456894131b991a3d4cd
#: ../../source/security/custom_permissions.rst:47
msgid "Make the permissions available as a Zope 3 permissions"
msgstr ""

# 36d2bbf0c483432ebf1c6080147e8c33
#: ../../source/security/custom_permissions.rst:49
msgid ""
"To use your permissions with BrowserViews/formlib/z3c.form, you need to make"
" them available available as Zope 3 permissions. This is done in ZCML using "
"a the <permission> directive. Example configure.zcml:"
msgstr ""

# b450cf2719514e86b03dc9d1373161bb
#: ../../source/security/custom_permissions.rst:65
msgid ""
"It's convention to prefix the permission id with the name of the package "
"it's defined in and use lower case only. You have to take care that the "
"title matches exactly the permission string you used in permissions.py. "
"Otherwise a different, zope 3 only, permission is registered."
msgstr ""

# bb1e2e951e324cdfb950d96a47a3f4a9
#: ../../source/security/custom_permissions.rst:71
msgid ""
"You can use the permission to e.g. protect BrowserViews. Example "
"configure.zcml:"
msgstr ""

# 11999ebaca9244839cca54db6be1fdc2
#: ../../source/security/custom_permissions.rst:95
msgid "Define both Zope 2 and Zope3 permissions in one Step in ZCML"
msgstr ""

# b4f5292e51c64e55aa1538eeddbfe61b
#: ../../source/security/custom_permissions.rst:97
msgid ""
"You can use `collective.autopermission "
"<http://pypi.python.org/pypi/collective.autopermission/1.0b1>`_ (`svn "
"repository "
"<http://svn.plone.org/svn/collective/collective.autopermission>`_) and "
"define both the Zope 2 and Zope 3 permission at once with the <permission> "
"zcml-directive. To do that install collective.autopermission. Either add "
"\"collective.autopermission\" to \"install_requires\" in setup.py or to your"
" buildout. Then include collective.autopermission's configure.zcml *before* "
"you define the permissions *and* before you use them.  "
"(collective.autopermission is not required in Zope 2.12/Plone 4 anymore!)"
msgstr ""

# b7e2b8c8672e48e398bb386a55ff0ef0
#: ../../source/security/custom_permissions.rst:131
msgid ""
"Now you can use the permission both as a Zope 2 permission *('MyProduct: "
"MyPermission')* or a Zope 3 permission *('myproduct.mypermission')*. The "
"only disadvantage is that you can't import the permissionstring as a "
"variable from permissions.py."
msgstr ""

# dfac6ecbbc6f4e4588e57173c7a73437
#: ../../source/security/dynamic_roles.rst:3
msgid "Dynamic roles"
msgstr ""

# 78af259bdf524bf296ab97d25f071a4b
# 5a3b158d4d1347e183ae536b9263cd85
# 81d56fe259bd4895a18ce276ab9527da
# 2d08796718db44b5958fca7f44f35767
# 6660d3cc280f4dde9fe568a02f74a509
#: ../../source/security/dynamic_roles.rst:8
#: ../../source/security/local_roles.rst:12
#: ../../source/security/permissions.rst:12
#: ../../source/security/sandboxing.rst:14
#: ../../source/security/selinux.rst:12
msgid "Introduction"
msgstr ""

# c29235e4e2114939bec0857a60214322
#: ../../source/security/dynamic_roles.rst:10
msgid ""
"Plone core's borg.localrole package allows you to hook into role-resolving "
"code and add roles dynamically. I.e. the role on the user depends on HTTP "
"request / environment conditions and is not something set in the site "
"database."
msgstr ""

# 0fd540a6d7b74489b493104066adcf9c
#: ../../source/security/dynamic_roles.rst:15
msgid "Creating a dynamic role"
msgstr ""

# 8f5b475bdb6a4ce58d49e2c492477f50
#: ../../source/security/dynamic_roles.rst:17
msgid ""
"First :doc:`create an Ploneadd-on for your coding needs "
"</getstarted/paste>`."
msgstr ""

# a5dcdd0c7ef649dc8d0ef5d44e7688d6
#: ../../source/security/dynamic_roles.rst:19
msgid ""
"getRoles() function is called several times per request so you might want to"
" cache the result."
msgstr ""

# 10f7f61441ae4b72ac0198022fa1927d
#: ../../source/security/dynamic_roles.rst:22
msgid "There is a complex example below."
msgstr ""

# 2745cc0bd2d744e5ab7b64bdf4ce642b
#: ../../source/security/dynamic_roles.rst:24
msgid ""
"getAllRoles() is overridden to return a custom role which is not available "
"through normal security machinery. This is required because Plone/Zope "
"builds look-up tables based on the result of getAllRoles() and all possible "
"roles must appear there"
msgstr ""

# ad41deb4f96a4ce8b6db5bc9933d9b27
#: ../../source/security/dynamic_roles.rst:29
msgid ""
"getRoles() is overridden to call custom getDummyRolesOnContext() which has "
"the actual logic to resolve the roles"
msgstr ""

# 6dd1e4796bee421d9cd8d960519fa410
#: ../../source/security/dynamic_roles.rst:32
msgid ""
"An example code checks whether the context object implements a marker "
"interface and gives the user a role based on that"
msgstr ""

# 1806dd47c63b4531a162e14c4c3f3f62
#: ../../source/security/dynamic_roles.rst:35
msgid "Example ``localroles.py``::"
msgstr ""

# d6d7ddccb8ed4ba59ae31915da34f17e
#: ../../source/security/dynamic_roles.rst:90
msgid ""
"Custom local role implementation is made effective using ZCML adapter "
"directive in your add-ons ``configure.zcml``::"
msgstr ""

# e5765b76d63444afbdc8e7f3deb1980f
#: ../../source/security/dynamic_roles.rst:105
msgid ""
"If your dynamic role is not any of Plone's existing roles you need to "
":doc:`declare it with rolemap.xml </security/local_roles>`."
msgstr ""

# 337ad8caacb149c28afadd33bc654bc3
#: ../../source/security/index.rst:3
msgid "Security"
msgstr ""

# d9adc059d1fe4f6ba70dfdf403df055f
#: ../../source/security/index.rst:5
msgid "Zope provides various built-in security facilities"
msgstr ""

# f549ba8a021945258ca204894c714fbb
#: ../../source/security/index.rst:7
msgid "User - role - permission three layer security model"
msgstr ""

# f4f70c476e0c47a2a18d8de59c4f1c55
#: ../../source/security/index.rst:9
msgid "Security declarations in ZCML for views, adapters, etc."
msgstr ""

# d88bb473186d4691a09b7b8a0aa3cacd
#: ../../source/security/index.rst:11
msgid "RestrictedPython to evaluate sandboxed code"
msgstr ""

# 565eaeee16524e4a90854bd3d763d967
#: ../../source/security/local_roles.rst:3
msgid "Local roles"
msgstr ""

# d40bfb63888c432286de52b1444d72e6
#: ../../source/security/local_roles.rst:7
msgid "Creating and setting local roles of Plone members programmatically."
msgstr ""

# f4ec1ca53b6847f7a497ad126667083d
#: ../../source/security/local_roles.rst:14
msgid ""
"Local roles allows user accounts to have special privileges for a folder and"
" its children."
msgstr ""

# 4377c4a3508544059ade617f432449b0
#: ../../source/security/local_roles.rst:17
msgid ""
"By default Plone has roles like ``Contributor``, ``Reader``, ``Editor``, "
"etc. and you can view these on the :guilabel:`Sharing` tab and in "
":term:`ZMI` :guilabel:`Security` tab."
msgstr ""

# 46584b1342ef46e3b2587c39387afac9
#: ../../source/security/local_roles.rst:21
msgid ""
"Good introduction to roles: `Basic Roles and Permissions in Plone "
"<http://www.sixfeetup.com/blog/basic-roles-and-permissions-in-plone>`_"
msgstr ""

# 51d9295a373a4c06a021603f61b5cc78
#: ../../source/security/local_roles.rst:26
msgid "Creating a new role"
msgstr ""

# ade8397e700e4b6c95b61ab140e92c89
#: ../../source/security/local_roles.rst:28
msgid ""
"New Plone roles can be created through the :doc:`GenericSetup rolemap.xml "
"</components/genericsetup>` file."
msgstr ""

# 64bd7562c8c04cb682e7a5cd49c5cf5f
#: ../../source/security/local_roles.rst:31
msgid "Example ``profiles/default/rolemap.xml``"
msgstr ""

# cf479268a5bd4d8d9454cdeb58298f73
#: ../../source/security/local_roles.rst:47
msgid "Adding a role to the Sharing Tab"
msgstr ""

# 5b36512b48f040ff8e798efbb0ab4db0
#: ../../source/security/local_roles.rst:49
msgid ""
"To let the newly created role appear in the @@sharing tab, create a "
":doc:`GenericSetup sharing.xml </components/genericsetup>` file."
msgstr ""

# 719e8a8db6ef41108aa0759ddcf8ce98
#: ../../source/security/local_roles.rst:52
msgid "Example ``profiles/default/sharing.xml``"
msgstr ""

# a5a2dfabddf84bcd93fb9436a78a3b9d
#: ../../source/security/local_roles.rst:66
msgid ""
"The title is the name to be shown on the sharing page. The "
"required_permission is optional. If given, the user must have this "
"permission to be allowed to manage the particular role."
msgstr ""

# 20d0b5b8f68245e9939e95d5320d3d09
#: ../../source/security/local_roles.rst:72
msgid ""
"For Plone 3, there is the `collective.sharingroles "
"<https://pypi.python.org/pypi/collective.sharingroles>`_ addon. Since Plone "
"4, this is `merged into plone.app.workflow "
"<https://github.com/plone/plone.app.workflow/commit/f9991ca0cc3dd2b8a2c392c145f44c21996eac67>`_."
msgstr ""

# 7f4b3efc4e42425b9328fca9f3fb5d65
#: ../../source/security/local_roles.rst:77
msgid "Setting local role"
msgstr ""

# 27e432c2a82849b39d0dfae7cf9a2a28
#: ../../source/security/local_roles.rst:79
msgid ""
"``manage_setLocalRoles`` is defined in `AccessControl.Role.RoleManager "
"<http://svn.zope.org/Zope/trunk/src/AccessControl/Role.py?rev=96262&view=markup>`_."
msgstr ""

# 7ebe9862a1fb461c8c22fc0bb20c0eb2
# 7c20033047e04681a698a6122a9e88de
# b486060e946840f0813f5b9174b4e599
#: ../../source/security/local_roles.rst:81
#: ../../source/security/local_roles.rst:94
#: ../../source/security/permissions.rst:167
msgid "Example::"
msgstr ""

# dcff9d56a47e4a849caa2037219e92a3
#: ../../source/security/local_roles.rst:87
msgid "Getting local roles"
msgstr ""

# 8fe33d50316c475c800962396d681d33
#: ../../source/security/local_roles.rst:89
msgid ""
"The ``get_local_roles()`` method returns currently-set local roles. This "
"does not return all the *effective* roles (which may include roles acquired "
"from the parent hierarchy). ``get_local_roles_for_userid()`` returns roles "
"for a particular user as a tuple."
msgstr ""

# d51984964eee461cbd48b9acedde9068
#: ../../source/security/local_roles.rst:101
msgid "Deleting local roles"
msgstr ""

# cff77bb2761c4d3aa6f576a5dacb0153
#: ../../source/security/local_roles.rst:103
msgid ""
"``manage_delLocalRoles(userids)`` takes a *list of usernames* as argument. "
"All local roles for these users will be cleared."
msgstr ""

# 43bc590f50e64d2094b0b60998bf0640
#: ../../source/security/local_roles.rst:106
msgid ""
"The following example (``membrane``-specific) will reset local roles based "
"on external input ::"
msgstr ""

# aa2ee63862c543a0b3f178bb0ab2a3bc
#: ../../source/security/local_roles.rst:145
msgid "Local role caching"
msgstr ""

# 127d52a74b0b423099978c566c116bcb
#: ../../source/security/local_roles.rst:147
msgid ""
"Resolving effective local roles is a cumbersome operation, so the result is "
"cached."
msgstr ""

# 9b53eb10ddd84f6d8c83ac1b110f0623
#: ../../source/security/local_roles.rst:150
msgid ""
"**Unit testers**: Local roles are cached per request. You need to clear this"
" cache after modifying an object's local roles or switching user if you want"
" to get proper readings."
msgstr ""

# 55004758ff854b78b1b024d42cb6f95d
#: ../../source/security/local_roles.rst:154
msgid "Unit test example method::"
msgstr ""

# 6e68632c14964dfba796f580ce0b4df8
#: ../../source/security/local_roles.rst:169
msgid "Debugging"
msgstr ""

# 3b8b9b94e5a142539f5bab67a0e11101
#: ../../source/security/local_roles.rst:171
msgid ""
"Set your breakpoint in "
"``Products.PlonePAS.plugins.local_role.LocalRolesManager.getRolesInContext()``"
" and "
"``Products.PlonePAS.plugins.role.GroupAwareRoleManager.getRolesForPrincipal()``."
" There you see how roles for a given context are being resolved."
msgstr ""

# 6d9b091c73fc4bea935a0e804edbbfb1
#: ../../source/security/local_roles.rst:175
msgid "Check the ``acl_users.portal_role_manager`` tool via the :term:`ZMI`."
msgstr ""

# e8e2d4add23941cdb66a762865a0aa7b
#: ../../source/security/local_roles.rst:177
msgid ""
"Please see the `zopyx.plone.cassandra "
"<http://pypi.python.org/pypi/zopyx.plone.cassandra>`_ add-on product."
msgstr ""

# ca10f6f2e0774ba9a1d52477327fefbb
#: ../../source/security/local_roles.rst:180
msgid "Other"
msgstr ""

# cc3ffe7965a24238b95babafd5d62dab
#: ../../source/security/local_roles.rst:182
msgid ""
"http://toutpt.wordpress.com/2009/03/14/plone-and-local-roles-too-quiet/"
msgstr ""

# 393de4ba240d4aaab84c1bacbe23de6b
#: ../../source/security/permission_lists.rst:3
msgid "Available permissions in Plone"
msgstr ""

# 3bdc85dfa8434225a55b95dc8c86253b
#: ../../source/security/permission_lists.rst:7
msgid ""
"What Zope security permissions you have available for your Plone coding"
msgstr ""

# a2ed9dca9e204ec38980c8eea2cd32b9
#: ../../source/security/permission_lists.rst:12
msgid "Listing different available permissions"
msgstr ""

# 166bd699bde949ecba3ef02f3eb3dff7
#: ../../source/security/permission_lists.rst:14
msgid "Each permission name is a string."
msgstr ""

# aaf6b5c227894f53bc062cffa13dfe59
#: ../../source/security/permission_lists.rst:16
msgid ""
"To see available permissions, click Security tab at your site root in Zope "
"Management Interface."
msgstr ""

# 2a4518f737094ae1a0b5854190a53a06
#: ../../source/security/permission_lists.rst:18
msgid ""
"In programming, use pseudoconstants instead of permission string values:"
msgstr ""

# ebf92a194c744b93b80a96bc4984143e
#: ../../source/security/permission_lists.rst:20
msgid ""
"See `CMFCore.permissions "
"<http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/permissions.py?rev=94487&view=markup>`_"
msgstr ""

# acf169759fb54fe99240f1bcbe22c7cb
#: ../../source/security/permission_lists.rst:22
msgid ""
"See `AccessControl.Permissions "
"<http://svn.zope.org/Zope/trunk/src/AccessControl/Permissions.py?rev=96262&view=markup>`_"
msgstr ""

# c29e63e45e884863b178e900a780b0f0
#: ../../source/security/permission_lists.rst:24
msgid "For available ZCML permission mappings see:"
msgstr ""

# 331bb49a6cad41f9b38ad9b5f36d0cf4
#: ../../source/security/permission_lists.rst:26
msgid ""
"`Products/Five/permissions.zcml "
"<http://svn.zope.org/Zope/trunk/src/Products/Five/permissions.zcml?rev=99146&view=markup>`_"
msgstr ""

# 3c27af126f0a4cc4a978aa14787fbd60
#: ../../source/security/permission_lists.rst:28
msgid "Permissions such as ``cmf.ModifyPortalContent``, ``zope2.View``"
msgstr ""

# 8f623bc36f18470cae2d1f66138a929a
#: ../../source/security/permission_lists.rst:30
msgid ""
"`zope/security/permissions.zcml "
"<http://svn.zope.org/zope.security/trunk/src/zope/security/permissions.zcml?rev=97988&view=markup>`_"
msgstr ""

# 0986c30fde1844c48b7c8fe30567f25c
#: ../../source/security/permission_lists.rst:32
msgid "``zope.Public``"
msgstr ""

# 22f9ba1bccb34eefbe596fb3314d56a9
#: ../../source/security/permission_lists.rst:34
msgid ""
"or search for the string ``<permission`` in ``*.zcml`` files in the *eggs* "
"folder of your Plone development deployment."
msgstr ""

# 7b71daa50e47473ea16d7e9fa48a7cad
#: ../../source/security/permission_lists.rst:37
msgid "Example using UNIX grep tool:"
msgstr ""

# 6f601b0804164381b847acb319ea3f0d
#: ../../source/security/permission_lists.rst:44
msgid "Useful permissions"
msgstr ""

# fe971ba8086a4dbea4e0993fff6fdeb8
#: ../../source/security/permission_lists.rst:46
msgid "Permissions are shown by their verbose name in the :term:`ZMI`."
msgstr ""

# f6081e17099e4548bc80e5b58e3e38d2
#: ../../source/security/permission_lists.rst:49
msgid "This governs whether you are allowed to view some content."
msgstr ""

# 2389849afcd342d780d79224396abe9f
#: ../../source/security/permission_lists.rst:51
msgid ""
"This permission allows access to an object, without necessarily viewing the "
"object. For example, a user may want to see the object's title in a list of "
"results, even though the user can't view the contents of that file."
msgstr ""

# 03c5d68b0a7a49acaff4587bb26d2ff5
#: ../../source/security/permission_lists.rst:56
msgid ""
"This governs whether you can get a listing of the contents of a folder; it "
"doesn't check whether you have the right to view the objects listed."
msgstr ""

# d87c41045b26440aaedabfb6d56fd94f
#: ../../source/security/permission_lists.rst:59
msgid "This governs whether you are allowed to modify some content."
msgstr ""

# 6658af0ff418438b9f10483365f3f6a9
#: ../../source/security/permission_lists.rst:61
msgid ""
"This permission allows you to manage the portal. A number of views in the "
"plone control panel are protected with this view. If you plan to write a "
"reusable product, be very hesitant to use this permission, check whether a "
"custom permission might make more sense."
msgstr ""

# ae2600c234ed4246998b85852f341b5a
#: ../../source/security/permission_lists.rst:65
msgid ""
"There is no single permission for adding content. Every content type has its"
" own permission. If you create your own content type, create a custom add "
"permission for it."
msgstr ""

# 206df0f48b7d4fbd81725b10e5fa0688
#: ../../source/security/permission_lists.rst:71
msgid "Permission name"
msgstr ""

# 565bf9d6684847f3b73cb87e6da3cbb1
#: ../../source/security/permission_lists.rst:71
msgid "Permission name for ZCML"
msgstr ""

# 7b1bb76d751248c2a3333593dece78f6
#: ../../source/security/permission_lists.rst:73
msgid "View"
msgstr ""

# b181278e71e343cbb478184bb170ac8d
#: ../../source/security/permission_lists.rst:73
msgid "zope2.View"
msgstr ""

# 54c93dd0e17b416b93a2f16034876b5d
#: ../../source/security/permission_lists.rst:74
msgid "Access contents information"
msgstr ""

# b9c7a43cf7384ba2aa41564fa9971179
#: ../../source/security/permission_lists.rst:74
msgid "zope2.AccessContentsInformation"
msgstr ""

# a64fa61b7e5846cd9597728aeb4b6145
#: ../../source/security/permission_lists.rst:75
msgid "List folder contents"
msgstr ""

# 14be2c44952e477f92baae8fc1e13631
#: ../../source/security/permission_lists.rst:75
msgid "cmf.ListFolderContents"
msgstr ""

# 2996da70c62b4a2e887fa6f46368f164
#: ../../source/security/permission_lists.rst:76
msgid "Modify portal content"
msgstr ""

# 971ca78d68ba4c2886a8d5f0ec736ba4
#: ../../source/security/permission_lists.rst:76
msgid "cmf.ModifyPortalContent"
msgstr ""

# 23b4093ca66f41af877ab4bcb9172949
#: ../../source/security/permission_lists.rst:77
msgid "Manage portal"
msgstr ""

# 2ba5bdc6d8a440718f8911a5816833f9
#: ../../source/security/permission_lists.rst:77
msgid "cmf.ManagePortal"
msgstr ""

# 42cb7e8fa2fe4983b3596e6234787c0c
#: ../../source/security/permission_lists.rst:80
msgid ""
"To reference a permission in code, you need the name as a string. Using "
"strings is a bad convention, all common permissions have a constant in "
"Products.CMFCore.permissions. So to perform a permission check propery, you "
"do something like this::"
msgstr ""

# 1e13b341838d4452885b229cef025cfa
#: ../../source/security/permission_lists.rst:91
msgid ""
"All standard permissions from above can be referenced by their Permission "
"name without spaces."
msgstr ""

# a5bc42f48d4343818cb816450bb472b0
#: ../../source/security/permission_lists.rst:93
msgid "More info:"
msgstr ""

# e4fe1d9300fd43df948a2948310e675b
#: ../../source/security/permission_lists.rst:95
msgid "http://markmail.org/thread/3izsoh2ligthfcou"
msgstr ""

# bc45a8bdfb8f4bbc8030ab9420b24dac
#: ../../source/security/permissions.rst:3
msgid "Permissions"
msgstr ""

# 1d6e48602f1244cca5248a187c7828ce
#: ../../source/security/permissions.rst:7
msgid ""
"How to deal with permissions making your code permission-aware in Plone"
msgstr ""

# d6e4fcf0ceaf4dd4af207184d838a80b
#: ../../source/security/permissions.rst:14
msgid ""
"Permissions control whether logged-in or anonymous users can execute code "
"and access content."
msgstr ""

# a848a1f33f6f430c9ea423c1655d17dc
#: ../../source/security/permissions.rst:17
msgid ""
"Permissions in Plone are managed by `Zope's AccessControl module "
"<http://svn.zope.org/AccessControl/trunk/src/AccessControl/>`_. Persistent "
"permission setting and getting by role heavy lifting is done by "
"`AccessControl.rolemanager.RoleManager "
"<http://svn.zope.org/AccessControl/trunk/src/AccessControl/rolemanager.py?view=auto>`_."
msgstr ""

# fcf2bf1d57cc4c49b1192d7da9c5818f
#: ../../source/security/permissions.rst:22
msgid "Permission checks are done for:"
msgstr ""

# 988e40dfb2244e8a881fcb4ba2b07909
#: ../../source/security/permissions.rst:24
msgid ""
"every view/method which is hit by incoming HTTP request (Plone automatically"
" publishes traversable methods over HTTP);"
msgstr ""

# 9a87e7f882784441bf40b4b40ede5567
#: ../../source/security/permissions.rst:27
msgid ""
"every called method for :doc:`RestrictedPython scripts "
"</security/sandboxing>`."
msgstr ""

# 0c1785aff85c494ba070265a4d23db56
#: ../../source/security/permissions.rst:30
msgid ""
"The basic way of dealing with permissions is setting the ``permission`` "
"attribute of view declaration. For more information see :doc:`views "
"</views/browserviews>`."
msgstr ""

# 13a471bd9f344261b0cd2a22f3332bec
#: ../../source/security/permissions.rst:35
msgid "Debugging permission errors: Verbose Security"
msgstr ""

# cca0e0b00421447e9178a1e4dec7fc52
#: ../../source/security/permissions.rst:37
msgid ""
"You can turn on ``verbose-security`` option in buildout to get better "
"traceback info when you encounter a permission problem on the site (you are "
"presented a login dialog)."
msgstr ""

# 7f4a7e202d844a369ba14bbeefa8957b
#: ../../source/security/permissions.rst:40
msgid "For the security reasons, this option is disabled by default."
msgstr ""

# aae2b706537c4aa2acc5233443e304f1
#: ../../source/security/permissions.rst:42
msgid ""
"Set ``verbose-security = on`` in your buildout.cfg ``instance`` or related "
"section."
msgstr ""

# 3cbe5d3d8b584089a73b8007d0b2fb7e
#: ../../source/security/permissions.rst:44
msgid "Rerun buildout"
msgstr ""

# 9d4215c2fb1d4a6e97ecf8afd855863c
#: ../../source/security/permissions.rst:46
msgid ""
"Restart Plone properly after buildout ``bin/plonectl stop && bin/plonectl "
"start``"
msgstr ""

# 9818a55861194e688c9f6589692cafca
#: ../../source/security/permissions.rst:48
msgid "More info"
msgstr ""

# e021f1891928445ea571955d8551238e
#: ../../source/security/permissions.rst:50
msgid "http://pypi.python.org/pypi/plone.recipe.zope2instance"
msgstr ""

# 7fa41ebdaf5d45d6bd54ce0ee0834599
#: ../../source/security/permissions.rst:53
msgid "Checking if the logged-in user has a permission"
msgstr ""

# bdf970db70de47e3aea70f90dd862056
#: ../../source/security/permissions.rst:55
msgid ""
"The following code checks whether the logged in user has a certain "
"permission for some object."
msgstr ""

# d87421847685440985049d1735694045
#: ../../source/security/permissions.rst:78
msgid "Checking whether a specific role has a permission"
msgstr ""

# f483d6f687e6468aae7a222bb65e3a52
#: ../../source/security/permissions.rst:80
msgid ""
"The following example uses the ``rolesOfPermission()`` method to check "
"whether the *Authenticated* role has a permission on a certain folder on the"
" site. The weirdness of the method interface is explained by the fact that "
"it was written for use in a :term:`ZMI` template::"
msgstr ""

# cecc6dff01e242ef8fa498fa5a09e3af
#: ../../source/security/permissions.rst:105
msgid "Permission Access"
msgstr ""

# 242e99929ec349b480e55c49a294e5de
#: ../../source/security/permissions.rst:107
msgid ""
"Objects that are manageable :term:`TTW` inherit from `RoleManager  "
"<http://api.plone.org/CMF/1.5.4/private/AccessControl.Role.RoleManager-"
"class.html>`_. The API provided by this class permits you to manage "
"permissions."
msgstr ""

# 213f0defacd64257b04eb7693b1455ca
#: ../../source/security/permissions.rst:111
msgid "Example: see all possible permissions::"
msgstr ""

# fba0f8a08701427db8c6ecb2c6844250
#: ../../source/security/permissions.rst:119
msgid "Show the security matrix of permission::"
msgstr ""

# 2a8ed3e9fbd547f19ce9cfad03c586bc
#: ../../source/security/permissions.rst:142
msgid "Bypassing permission checks"
msgstr ""

# a279a54421f84916be7e8dcec8c71fec
#: ../../source/security/permissions.rst:144
msgid ""
"The current user is defined by active security manager. During both "
"restricted and unrestricted execution certain functions may do their own "
"security checks (``invokeFactory``, workflow, search) to filter out results."
msgstr ""

# 56da277732e54fa3885eef4cbc1402db
#: ../../source/security/permissions.rst:150
msgid ""
"If a function does its own security checks, there is usually a code path "
"that will execute without security check. For example the methods below have"
" security-aware and raw versions:"
msgstr ""

# 85eed01f3a594afba63751c009ed9352
#: ../../source/security/permissions.rst:154
msgid ""
"``context.restrictedTraverse()`` vs. ``context.unrestrictedTraverse()``"
msgstr ""

# 3cbcb762fb444a05a31587428bdd212a
#: ../../source/security/permissions.rst:156
msgid ""
"``portal_catalog.searchResults()`` vs. "
"``portal_catalog.unrestrictedSearchResults()``"
msgstr ""

# 916924f39f754ff89ca336b57fcdb972
#: ../../source/security/permissions.rst:158
msgid ""
"However, in certain situations you have only a security-aware code path "
"which is blocked for the current user. You still want to execute this code "
"path and you are sure that it does not violate your site security "
"principles."
msgstr ""

# 003839a1e73441b6bfe2c3f6afe51b79
#: ../../source/security/permissions.rst:163
msgid ""
"Below is an example how you can call any Python function and work around the"
" security checks by establishing a temporary "
"``AccessControl.SecurityManager`` with a special role."
msgstr ""

# 5859ffa6f2bd42b0b1889aa693ed7ee9
#: ../../source/security/permissions.rst:229
msgid "For a more complete implementation of this technique, see:"
msgstr ""

# bdbc8c7e648644d186ebba1397d41472
#: ../../source/security/permissions.rst:231
msgid ""
"http://github.com/ned14/Easyshop/blob/master/src/easyshop.order/easyshop/order/adapters/order_management.py"
msgstr ""

# fc1a108532cd4d4f99707ba6c27d5ea2
#: ../../source/security/permissions.rst:234
msgid "Catching ``Unauthorized``"
msgstr ""

# 3d2a96a8a1f54843bda8a3b9f3d5698c
#: ../../source/security/permissions.rst:236
msgid "Gracefully failing when the user does not have a permission. Example::"
msgstr ""

# 4ce0cdffcc424ae5a6279d255994348d
#: ../../source/security/permissions.rst:248
msgid "Creating permissions"
msgstr ""

# c66362429bdb4dad92606c1cc5125121
#: ../../source/security/permissions.rst:250
msgid ""
"Permissions are created declaratively in :term:`ZCML`. Before Zope 2.12 "
"(that is, before Plone 4), the `collective.autopermission`_ package was "
"required to enable this, but now it is standard behaviour."
msgstr ""

# c4deade3a29d42499fc4feb7743aa0db
#: ../../source/security/permissions.rst:257
msgid ""
"http://n2.nabble.com/creating-and-using-your-own-permissions-in-"
"Plone-3-tp339972p1498626.html"
msgstr ""

# dfcb1d392f454f66a53f909adc515bb6
#: ../../source/security/permissions.rst:259
msgid ""
"http://blog.fourdigits.nl/adding-zope-2-permissions-using-just-zcml-and-a"
"-generic-setup-profile"
msgstr ""

# c95b4024e24848cb8b990940b36da22f
#: ../../source/security/permissions.rst:261
msgid "Example:"
msgstr ""

# 6a94d00fdefd4e38bdbda4fcfe21b84b
#: ../../source/security/permissions.rst:285
msgid ""
"Now you can use the permission both as a Zope 2-style permission "
"(``MyProduct: MyPermission``) or a Zope 3-style permission "
"(``myproduct.mypermission``). The only disadvantage is that you can't import"
" the permission string as a variable from a ``permissions.py`` file, as you "
"can with permissions defined programmatically."
msgstr ""

# 329f5d913d434e26bb741a7df248afd9
#: ../../source/security/permissions.rst:292
msgid ""
"By convention, the permission id is prefixed with the name of the package "
"it's defined in, and uses lowercase only. You have to take care that the "
"title matches the permission string you used in ``permissions.py`` exactly "
"--- otherwise a different, Zope 3 only, permission is registered."
msgstr ""

# c4f809abf6fb40b19c7ea34a3035cdf6
#: ../../source/security/permissions.rst:298
msgid ""
"Zope 3 style permissions are necessary when using Zope 3 technologies such "
"as ``BrowserViews/formlib/z3c.form``. For example, from ``configure.zcml``:"
msgstr ""

# 236f477fa974486ebcd6d2931d93b7dc
#: ../../source/security/permissions.rst:322
msgid "Define Zope 2 permissions in Python code (old style)"
msgstr ""

# b7be0f6f8a374b4aae4cb5be44575142
#: ../../source/security/permissions.rst:324
msgid ""
"If you want to protect certain actions in your product by a special "
"permission, you most likely will want to assign this permission to a role "
"when the product is installed. You will want to use Generic Setup's "
"``rolemap.xml`` to assign these permissions.  A new permission will be added"
" to the Zope instance by calling ``setDefaultRoles`` on it."
msgstr ""

# a82955112dc045978a5f8624f5a5c4cb
#: ../../source/security/permissions.rst:331
msgid ""
"However, at the time when Generic Setup is run, almost none of your code has"
" actually been run, so the permission doesn't exist yet.  That's why we "
"define the permissions in ``permissions.py``, and call this from "
"``__init__.py``:"
msgstr ""

# f62e6616f2d046b78954713e20f11867
#: ../../source/security/permissions.rst:335
msgid "``__init__.py``::"
msgstr ""

# 48313118ea004126a9363bd81f0a81f6
#: ../../source/security/permissions.rst:339
msgid "``permissions.py``::"
msgstr ""

# c42f6c431aaa4df6b66836db97b45cd7
#: ../../source/security/permissions.rst:350
msgid ""
"When working with permissions, always use the variable name instead of the "
"string value.  This ensures that you can't make typos with the string value,"
" which are hard to debug.  If you do make a typo in the variable name, "
"you'll get an ``ImportError`` or ``NameError``."
msgstr ""

# 8c2054e3176a466aa5fafdc4e3732c95
#: ../../source/security/permissions.rst:357
msgid "Assigning permissions to users (roles)"
msgstr ""

# fc706fa1fade4e9bae77b384909a3440
#: ../../source/security/permissions.rst:359
msgid ""
"Permissions are usually assigned to roles, which are assigned to users "
"through the web."
msgstr ""

# 851e9b30564240039f722813bf324e81
#: ../../source/security/permissions.rst:362
msgid ""
"To assign a permission to a role, use ``profiles/default/rolemap.xml``:"
msgstr ""

# e7501627ccfd4aaeb11583422706cd21
#: ../../source/security/permissions.rst:377
msgid "Manually fix permission problems"
msgstr ""

# 274dc5a6b519406bbb3b7c5c36d97568
#: ../../source/security/permissions.rst:379
msgid ""
"In the case you fiddle with permission and manage to lock out even the admin"
" user you can still fix the problem from the :doc:`debug prompt "
"</misc/commandline>`."
msgstr ""

# 1e38cce8ee8f42279a49d8ac2a99c604
#: ../../source/security/permissions.rst:383
msgid ""
"Example debug session, restoring ``Access Contents Information`` for all "
"users::"
msgstr ""

# 19dd7be4198b45b5b8ca97aa3f288815
#: ../../source/security/sandboxing.rst:3
msgid "Sandboxing and RestrictedPython"
msgstr ""

# c02a91a07a1747a889dac6f1b9dacbd6
#: ../../source/security/sandboxing.rst:7
msgid ""
"Legacy Plone code uses RestrictedPython sandboxing to secure each module and"
" class functions. This documentation tells how it happens."
msgstr ""

# 48b21f1dcf424f68a8a7a5e574490969
#: ../../source/security/sandboxing.rst:16
msgid "Plone has two sandboxing modes"
msgstr ""

# beb412839055447fa805e8224be54fd3
#: ../../source/security/sandboxing.rst:18
msgid ""
"Unrestricted: Python code is executed normally and the code can access the "
"full Zope application server environment. This includes other site instances"
" too. This is generally what happens when you write your own add-on and add "
"views for it."
msgstr ""

# eca2453b8b394f90bb48ae904ab8a027
#: ../../source/security/sandboxing.rst:23
msgid ""
"Restricted (RestrictedPython): scripts and evalutions are specially "
"compiled, have limited Python language functionality and every function call"
" is checked against the security manager. This is what happens when you try "
"to add Python code or customize page templates through Zope Management "
"Interface."
msgstr ""

# 4dffb9c510424a90838516b2547f2ea2
#: ../../source/security/sandboxing.rst:28
msgid ""
"Restricted execution is enabled only for **through-the-web** scripts and "
"**legacy code**:"
msgstr ""

# 2fa28887b80543eda980c40b8e4be4ba
#: ../../source/security/sandboxing.rst:30
msgid ""
"Old style TAL page templates: everything you put inside page template "
"tal:content, tal:condition, etc. These templates are .pt templates "
"**without** accomppaning BrowserView"
msgstr ""

# e0b9f68f065e4b39a15342d26312dff4
#: ../../source/security/sandboxing.rst:34
msgid ""
"Script (Python) code is executed (plone_skins layer Python scripts and old "
"style form management)"
msgstr ""

# 7368abe80bdf4b25b22bf6d672499432
#: ../../source/security/sandboxing.rst:38
msgid ""
"RestrictedPython was bad idea and mostly causes headache. Avoid through-the-"
"web Zope scripts if possible."
msgstr ""

# 6644bc7ae88a49a6930c614ad270d9ae
#: ../../source/security/sandboxing.rst:41
msgid "For further information, read"
msgstr ""

# 172fd19668da4cd69437e706e990cc0f
#: ../../source/security/sandboxing.rst:43
msgid ""
"http://plone.293351.n2.nabble.com/Update-was-Plone-4-Chameleon-"
"compatibility-tp5612838p5614466.html"
msgstr ""

# 0b1e446ed33d460f835b7cc6f4051dd1
#: ../../source/security/sandboxing.rst:46
msgid "Whitelisting modules for RestrictedPython import"
msgstr ""

# 2fde28b221fe4988b763d32a25907f05
#: ../../source/security/sandboxing.rst:48
msgid ""
"http://plone.org/documentation/kb/using-unauthorized-modules-in-scripts"
msgstr ""

# 06672f54ff63475a9b31a2ad5028b349
#: ../../source/security/sandboxing.rst:51
msgid "Traversing special cases"
msgstr ""

# b8d043a95bc442c686a1374b058bbade
#: ../../source/security/sandboxing.rst:53
msgid "Old style Zope object traversing mechanism does not expose"
msgstr ""

# e338ea5f25a04464ab2f31a0bee1ef34
#: ../../source/security/sandboxing.rst:55
msgid ""
"Functions without docstring (the \"\"\" comment at the beginning of the "
"function)"
msgstr ""

# df0f76690c5247488ca57099c123b378
#: ../../source/security/sandboxing.rst:57
msgid "Functions whose name begins with underscore (\"_\"-character)"
msgstr ""

# 5f9d8602565e46e1a5977f128abe8d27
#: ../../source/security/sandboxing.rst:60
msgid "Unit testing RestrictedPython code"
msgstr ""

# d9c922629c324bae8d942e3b11b8934f
#: ../../source/security/sandboxing.rst:62
msgid ""
"RestrictedPython_ code is problematic, because RestrictedPython hardening is"
" done on Abstract Syntax Tree level and effectively means all evaluated code"
" must be available in the source code form. This makes testing "
"RestrictedPython code little difficult."
msgstr ""

# 31c73d05591649e483e165f2adfc8f4d
#: ../../source/security/sandboxing.rst:66
msgid "Below are few useful unit test functions::"
msgstr ""

# c237671fdf2144038d2afd4af91509a8
#: ../../source/security/sandboxing.rst:153
msgid "Other references"
msgstr ""

# 45fa3de7c24d4669b10d7c00150109d8
#: ../../source/security/sandboxing.rst:155
msgid "`zope.security <http://pypi.python.org/pypi/zope.security>`_"
msgstr ""

# 1bc22ecbafb2413a92dd8f0d3243ece3
#: ../../source/security/selinux.rst:3
msgid "Using SELinux with Plone"
msgstr ""

# 4be0dcdeda2b4c4ea2e76302393933b9
#: ../../source/security/selinux.rst:7
msgid ""
"Tutorial on using SELinux with Plone, using Plone 4.3 and RedHat Linux 6.3."
msgstr ""

# d48abae81f1f47b49dee2b1e3f914d43
#: ../../source/security/selinux.rst:14
msgid ""
"This document is a tutorial on using SELinux with Plone, using RedHat Linux "
"6.3 and Plone 4.3. It is applicable to any Linux distribution with small "
"changes."
msgstr ""

# fb5c42ea22504577a4e745d0794779a5
#: ../../source/security/selinux.rst:17
msgid "About SELinux"
msgstr ""

# 1189f3eb6073440597cac8864d56bc8f
#: ../../source/security/selinux.rst:19
msgid ""
"SELinux is a mandatory access control system, meaning that SELinux assigns "
"security *contexts* (presented by *labels*) to system resources, and allows "
"access only to the processes that have defined required levels of "
"authorization to the contexts. In other words, SELinux maintains that "
"certain *target* executables (having security contexts) can access (level of"
" access being defined explicitly) only certain files (having again security "
"context labels). In essence the contexts are roles, which makes SELinux a "
"Role Based Access Control system. It should be noted that even root is "
"usually just an ordinary user for RBAC systems, and will be contained like "
"any other user."
msgstr ""

# 08247229e61a43a8b0b2f4eb32cc5f29
#: ../../source/security/selinux.rst:21
msgid ""
"The concept of contexts and labels can be slightly confusing at first. It "
"stems from the idea of chain of trust. A system that upholds that proper "
"authorization checks are being done is worthless if the system allows moving"
" the protected data to a place that does not have similar authorization "
"checks. Context labels are file system attributes, and when the file is "
"moved around the label (representing context) moves with the file. The "
"system is supposed to limit where the information can be moved, and the "
"contexts can be extended beyond file system (ie. labels on rows in database "
"systems), building complete information systems that will never hand over "
"data to a party that is unable (or unwilling) to take care of it."
msgstr ""

# de6bf73bd5ad4ca0a6c777d1b2315c86
#: ../../source/security/selinux.rst:23
msgid ""
"Most SELinux policies *target* an executable, and define the contexts "
"(usually applied with labels to files) it can access by using *type "
"enforcement rules*. However there are also *capabilities* that control more "
"advanced features such as the ability to execute heap or stack, setuid, fork"
" process, bind into ports, or open TCP sockets. Most of the capabilities and"
" macros come from reference policy, which offers policy developers ready "
"solutions to most common problems. The reference policy shipped by Linux "
"distributions contains ready rules for some 350 targets, including "
"applications like most common daemons (sshd), and system services "
"(init/systemd)."
msgstr ""

# a14e3be3cf5b45d9badc3dd3ce3999e7
#: ../../source/security/selinux.rst:25
msgid ""
"The value of SELinux is in giving administrators fine granularity of access "
"control far beyond the usual capabilities of \\*NIX systems. This is useful "
"especially in mitigating the impact of security vulnerabilities. The most "
"apparent downside to SELinux is the high skill requirements. To understand "
"most of SELinux - and to be able to maintain it effectively with 3rd party "
"applications - requires good abstraction skills, and especially the official"
" documentation is somewhat hard to digest. SELinux was never engineered to "
"be easy for administrators. It was engineered to be able to implement "
"complex security models like Bell-LaPadula and MLS."
msgstr ""

# 6993439c77fd4c6da9dc890e444666ed
#: ../../source/security/selinux.rst:27
msgid ""
"There have been several myths about SELinux being heavy (in reality it comes"
" with ~3% overhead), or that it breaks all applications. There used to be "
"time (years ago) when SELinux applied itself by default on everything, and "
"if the application was not included in the shipped policies it probably "
"failed miserably. Most of the application developers and companies got "
"frustrated to the situation, and started recommending that SELinux should "
"always be disabled. Things have luckily changed drastically since then. "
"Today most SELinux implementations use what is called *targeted policy*, "
"which means that SELinux affects only applications that have explicit "
"policies. As a result SELinux does generally nothing to your 3rd party "
"applications - good or bad - until you enable it. This tutorial is meant to "
"give readers pointers on how to accomplish exactly that."
msgstr ""

# f3a9eaff3d884cb7ba06833987ab5f89
#: ../../source/security/selinux.rst:30
msgid "Creating new SELinux policy"
msgstr ""

# 7e757067c4d94118af006944a1ada28a
#: ../../source/security/selinux.rst:33
msgid "Prerequisities"
msgstr ""

# 1d549854424b4fa6b7061a85e6d7bc8b
#: ../../source/security/selinux.rst:35
msgid "root access"
msgstr ""

# a305952e3b17456ea3d88a7d4f48a3a9
#: ../../source/security/selinux.rst:36
msgid ""
"Working SELinux (*sudo sestatus* reports **ENABLED**, and **enforcing**)"
msgstr ""

# 066c0ddac36745249d990b932865702d
#: ../../source/security/selinux.rst:37
msgid ""
"Preferably a system that uses *targeted policy* (see the output of previous "
"command)"
msgstr ""

# c4ad3b37eab243df9716dabb17624ed2
#: ../../source/security/selinux.rst:38
msgid ""
"SELinux policy utilities installed (policycoreutils-python policycoreutils-"
"gui)"
msgstr ""

# a783eeecbab84b68b3bac6d365ec2681
#: ../../source/security/selinux.rst:39
msgid "The application (in this case Plone) already installed"
msgstr ""

# 42a758b085094e5db4eed5a73330ec04
#: ../../source/security/selinux.rst:42
msgid "Creating new policy"
msgstr ""

# 41362adb7438499aa58cafe3c5c31f86
#: ../../source/security/selinux.rst:44
msgid ""
"Development starts usually by generating a policy skeleton with the "
"*sepolgen* (or sepolicy-generate) utility. It can generate several types of "
"templates, which come with a set of basic access rights. There are several "
"sepolgen versions out there, depending on the Linux distribution. The most "
"important differences between them are in the included templates. Creating "
"new policy is done with the following command: ::"
msgstr ""

# d7c437c0d6b84707b01074cef0c62f0e
#: ../../source/security/selinux.rst:48
msgid "Where the parameters are:"
msgstr ""

# 60e71a0d5c754499af443f9e26f35978
#: ../../source/security/selinux.rst:50
msgid ""
"**-n plone** gives the new policy name. Default is to use the name of the "
"executable, but we want to give a more generic name in this case."
msgstr ""

# 9034c86014a2467bb17245cfc21652f9
#: ../../source/security/selinux.rst:51
msgid ""
"**-t 3** elects a template (\"*normal application*\") that gives some "
"commonly required access rights as a starting point"
msgstr ""

# c405aa5fd0c74d8aa2de0504a0dee446
#: ../../source/security/selinux.rst:52
msgid ""
"**/usr/local/Plone/zinstance/bin/plonectl** is the application that will get"
" a new context (*plonectl_exec_t*), which will get most of the type "
"enforcement rules."
msgstr ""

# abed46e077344ae18b27fd291e204afe
#: ../../source/security/selinux.rst:54
msgid "The outcoming result will be four files:"
msgstr ""

# 2698e6174e5c4ac1b7deb718afd90c0b
#: ../../source/security/selinux.rst:56
msgid ""
"**plone.te** Type enforcement file defining the access rules. **This file "
"contains most of the policy, and most of the rules go there.**"
msgstr ""

# a86dd99c59b24c329c3d3afb05817a8b
#: ../../source/security/selinux.rst:57
msgid ""
"**plone.if** Interface file defining what *other* policies can import from "
"your policy."
msgstr ""

# 441d564b4ee247e3ab4da9a45b236862
#: ../../source/security/selinux.rst:58
msgid ""
"**plone.fc** File contexts file defining what context labels will be applied"
" to files and directories."
msgstr ""

# a85a1366ec264573bdb91aae89ff0ed2
#: ../../source/security/selinux.rst:59
msgid ""
"**plone.sh** Setup script that will compile and install the policy to the "
"system configuration (both running and persistent)."
msgstr ""

# 19b775f9473447ac9cfaef5cc015c568
#: ../../source/security/selinux.rst:62
msgid "Labeling files"
msgstr ""

# 533e61a7354644a0b932158d7f5d4136
#: ../../source/security/selinux.rst:64
msgid ""
"Before the actual development will start file context labeling rules should "
"be defined in **plone.fc**. You probably need some context (*plone_t*) for "
"all files related to Plone, context (*plone_rw_t*) with write rights to "
"*var* and the plonectl will need a context (*plonectl_exec_t*) that comes "
"with special rights. ::"
msgstr ""

# 2b9fbfb65d1b499ea52fcea5fdb5cba4
#: ../../source/security/selinux.rst:70
msgid ""
"The generated **plone.te** already tells SELinux what *plone_t* and "
"*plone_exec_t* are - valid file context types. The tools labeling files will"
" know what to do about them. However the *plone_rw_t* is must be introduced "
"before continuing, and the plone_t should be renamed to *plonectl_t* (to "
"describe the target better - important for managing more complex rules): ::"
msgstr ""

# c4302bb8f99e44acb022bbd2dbfeeddf
#: ../../source/security/selinux.rst:77
msgid ""
"It is also a good idea to edit the restorecon commands at the end of "
"**plone.sh** to point to /usr/local/Plone and relabel all the files when the"
" policy is recompiled and installed: ::"
msgstr ""

# 8c615c4bbf21415caba40bc187d119fc
#: ../../source/security/selinux.rst:82
msgid "Development process"
msgstr ""

# e6f15612f1cf4822ac62b446e24bb7bf
#: ../../source/security/selinux.rst:84
msgid ""
"The basic policy development process for SELinux policies follows the "
"following pattern:"
msgstr ""

# 00fe63452ddd4ff886fd7b7c1578ff7d
#: ../../source/security/selinux.rst:86
msgid "Add permissive rules"
msgstr ""

# edd9a0ac958b4f839ee7e5ecb9b9b3ec
#: ../../source/security/selinux.rst:87
msgid "Compile & install your policy"
msgstr ""

# a8849fb33ad04f12bd328f63775075e9
#: ../../source/security/selinux.rst:88
msgid "Clear the audit logs"
msgstr ""

# 78700f8de6b34a19ae53db3d0fe240cb
#: ../../source/security/selinux.rst:89
msgid "Run the application until it fails"
msgstr ""

# 769e4304d5a345b4913d9bf78e70b6ba
#: ../../source/security/selinux.rst:90
msgid "Run audit2allow"
msgstr ""

# 77380b603ad44b84910c8cbab259fe61
#: ../../source/security/selinux.rst:91
msgid ""
"Study the output of audit2allow, and add more access rules to satisfy the "
"application"
msgstr ""

# a371ae242b8c44719907e7752e427cb7
#: ../../source/security/selinux.rst:92
msgid "Repeat from step 2 until everything works"
msgstr ""

# 617303c6121348edb92eb846bb1ea6c6
#: ../../source/security/selinux.rst:93
msgid "Remove permissive rules"
msgstr ""

# d5902ee21cc8433abfb9e582055b890e
#: ../../source/security/selinux.rst:96
msgid "Permissive rules"
msgstr ""

# b64eaac62cb348efb96d5d0e4a2c5cc3
#: ../../source/security/selinux.rst:98
msgid ""
"Most applications require largish amount of rules just to start properly. To"
" reach a working set of rules faster you can switch your contexts to "
"permissive mode by editing the *PlonePython.te*: ::"
msgstr ""

# 1175bfba0d9047c599af63f15b5e7a87
#: ../../source/security/selinux.rst:108
msgid ""
"Permissive in SELinux means that all actions by mentioned contexts will be "
"allowed to process, and the incidents (*access vector denials*) will be only"
" logged. This will allows to gather rules faster than going through the "
"complete development cycle."
msgstr ""

# c2088abae977456088d4657dd55da8da
#: ../../source/security/selinux.rst:111
msgid ""
"Please note that permissive rules have to be removed at some point, or the "
"policy will **not** protect the application as expected."
msgstr ""

# dced3e3d14fc4818a5823ff7242edf7a
#: ../../source/security/selinux.rst:114
msgid "Using audit2allow"
msgstr ""

# a4c9a379d050419e96328eb5c6ecbaf5
#: ../../source/security/selinux.rst:116
msgid ""
"Audit2allow can search both dmesg and the system audit logs for access "
"vector cache denials, and build suggestions based on them. Because the "
"output will be more understandable without extra noise, it is recommendable "
"to clear audit log between development cycles. Since it is probably not a "
"good idea to clear dmesg, it is suggested that you clear the system audit "
"logs, and instruct audit2allow to use them as source, for example: ::"
msgstr ""

# 3ef85e2a1af04a51b7983e1347e9f105
#: ../../source/security/selinux.rst:122
msgid "There are couple useful parameters for running audit2allow:"
msgstr ""

# e9ed7b4c73aa446eb5e8a285b5e3b272
#: ../../source/security/selinux.rst:124
msgid "*-r* adds requires (\"imports\" from other policies) to the output"
msgstr ""

# 6a79bab69f404b05bf828696ab87c8c2
#: ../../source/security/selinux.rst:125
msgid ""
"*-R* makes audit2allow suggest compatible macros from other available "
"policies. Macros contain often more lenient access rules, but they also "
"reduce the amount of required rules. Using them will make the policy "
"slightly more platform dependent, but easier to maintain."
msgstr ""

# 6a6d86e8cf444b4eb4abea373d9feb0d
#: ../../source/security/selinux.rst:126
msgid ""
"*-i /var/log/audit/audit.log* makes only to audit logs to be evaluated for "
"rules"
msgstr ""

# 2776a42fb435419594429579b0a27507
#: ../../source/security/selinux.rst:129
msgid ""
"Always when in trouble, and you suspect access vector cache denial, use "
"audit2allow. If you can't figure out what is going on, also check out the "
"output of *audit2why*, similar tool that produces more human readable "
"reasons why access was denied. Beware though, audit2why is somewhat heavy."
msgstr ""

# a6d52e27a3014e83b2fc1f6ef24f3e15
#: ../../source/security/selinux.rst:132
msgid "Example type enforcement rules"
msgstr ""

# c83d02e0645048d0a4731d5714858242
#: ../../source/security/selinux.rst:134
msgid ""
"SELinux rules are actually quite simple. For instance the following rule "
"tells to *allow* the process that has context *plonectl_exec_t* access to "
"most common temporary files (*tmp_t*, defined in the reference policy), and "
"the level of access will allow it most of the things that are usually done "
"to files (but not all, for instance *setattr* is missing): ::"
msgstr ""

# a66c87ae43c5487faf0a726a40d966dd
#: ../../source/security/selinux.rst:138
msgid ""
"For the previous to be usable the *tmp_t* and *file* have to be introduced "
"to the compiler, that will search for them from the other available "
"policies. Type is a grouping item that will usually point to a security "
"context (labeled files), while classes define what access types (ie. "
"getattr) can are available for the type. The term *type enforcement rule* "
"comes from the fact that SELinux rules define who can do what to the objects"
" that are linked to types. ::"
msgstr ""

# 8d8fcc32ae5c48bba657682c381d2d08
#: ../../source/security/selinux.rst:145
msgid ""
"There are also macros that will help in accomplishing more complex tasks. "
"The following macro will give the executable right to bind to 8080/TCP: ::"
msgstr ""

# 324251b2e71e47a19856a1ffcde52792
#: ../../source/security/selinux.rst:149
msgid ""
"To get an idea about what items are available the `Reference policy API "
"documentation <http://oss.tresys.com/docs/refpolicy/api/>`_ is the place go "
"to."
msgstr ""

# d492f3cbf2f143b093fac81f5ae3b105
#: ../../source/security/selinux.rst:152
msgid "Caveats"
msgstr ""

# 371bcfa8033b44b9a3aa1e1269ab5c50
#: ../../source/security/selinux.rst:154
msgid ""
"First of all, audit2allow is not a silver bullet. There are cases where your"
" application accesses something that it does not really require for "
"operation, for instance to scan your system for automatic configuration of "
"services. There are also cases where it prints nothing yet the application "
"clearly is denied access to something. That can be caused by *dontaudit* "
"rules, which silence logging of events that could generate too much noise. "
"In any case a healthy amount of criticism should be applied to everything "
"audit2allow output, especially when the suggested rules would give access "
"rights to outside application directories."
msgstr ""

# 34141636e0d14e128efbf73b0765b0af
#: ../../source/security/selinux.rst:156
msgid ""
"Misconfiguration can cause either file labeling to fail, or the application "
"process not to get transitioned to proper executing context. If it seems "
"that the policy is doing nothing, check that the files are labeled correctly"
" (`ls -lFZ`), and the process is running in the correct context (`ps -efZ`)."
msgstr ""

# ec125ea32a2542ae916fbd9a0ed6bccd
#: ../../source/security/selinux.rst:158
msgid ""
"Evaluating the file context rules (fules and their labels) is managed by a "
"heurestic algorithm, which gives precedence to more specific rules by "
"evaluating the length and precision of the path patterns. The patterns are "
"easy for beginner to misconfigure. When suspecting that the file context "
"rules are not getting applied correctly, always investigate `semanage "
"fcontext -l` to see what rules match your files."
msgstr ""

# e1cf45ec05c34d888d7b265c6dfad874
#: ../../source/security/selinux.rst:161
msgid "Policies for Plone"
msgstr ""

# d1d5b3b4b60c4948b4e5756b14fc4b12
#: ../../source/security/selinux.rst:163
msgid ""
"The following contains results of ordinary \"install, test & break, add "
"rules, repeat from beginning\" development cycle for a basic Plone SELinux "
"policy."
msgstr ""

# bd1d0512a26b472ab7c94c567e17b721
#: ../../source/security/selinux.rst:166
msgid "Relabeling rights"
msgstr ""

# f05db4cbeeed4a67821c8e6fb9b72e02
#: ../../source/security/selinux.rst:168
msgid ""
"By default you might not have the right to give any of new security labels "
"to files, and *restorecon* may throw permission denied errors. To give the "
"SELinux utilities (using the context *setfiles_t*) the right to change the "
"security context based on the new types add the following rules: ::"
msgstr ""

# e13c7a01e0954de8853468cddffd9da0
#: ../../source/security/selinux.rst:191
msgid ""
"If the transition is not done, the application will keep running in the "
"starting user's original context. Most likely that will be unconfined_t, "
"which means no SELinux restrictions will be applied to the process."
msgstr ""

# c3b362a84283407a899d1eb216be40dc
#: ../../source/security/selinux.rst:194
msgid "Transition to context"
msgstr ""

# c6a02806983b47b7b5763f9a5e881974
#: ../../source/security/selinux.rst:196
msgid ""
"When you first run Plone (ie. \"plonectl fg\"), you will notice that it "
"doesn't run, complaining about bad interpreter. Audit2allow will instruct to"
" give rights to your uncontained_t context to run the python interpreter. "
"This is however wrong. You wish to first instruct SELinux to change the "
"process always to the new context (*plonectl_exec_t*) when the application "
"is run. You also wish to have the necessary rights to execute the "
"application so that the context transition can start: ::"
msgstr ""

# b1f2ba51924e4e4ba1e178269036b058
#: ../../source/security/selinux.rst:214
msgid ""
"Later when enough rules are in place for the application to run take a look "
"at the process context to see that the transitioning to *plonectl_exec_t* "
"works: ::"
msgstr ""

# e1220dc2d93644479730325f2b295de7
#: ../../source/security/selinux.rst:221
msgid "Common process requirements"
msgstr ""

# 69d0e4fde76542dc81ad9f4e99e39316
#: ../../source/security/selinux.rst:223
msgid ""
"In order for any \\*NIX process to work some basic requirements must be met."
" Applications require for instance access to /dev/null, and PTYs: ::"
msgstr ""

# 0f340b830c5443cdafdf1d9c0e56b934
#: ../../source/security/selinux.rst:234
msgid "Zope/PLONE"
msgstr ""

# ee22a496eeca455faafaad6b597d8579
#: ../../source/security/selinux.rst:236
msgid ""
"After running the plonectl commands (fg, start, stop) several times, and "
"adding the required rules you should end up with something like following. "
"First you will have a large amount of require stanzas for the rule compiler,"
" and then an intermediate amount of rules: ::"
msgstr ""

# d63f1f4c19654f1381300f3d34dc2a58
#: ../../source/security/selinux.rst:278
msgid ""
"Gathering the previous audit2allow failed completely to report tcp_socket "
"read and write. Some system policy had probably introduced a *dontaudit* "
"rule, which quiesced the logging for that access vector denial. Luckily "
"Plone threw out very distinct Exception, which made resolving the issue "
"easy."
msgstr ""

# 363c81e197bc41a69e34f26d80dac3d6
#: ../../source/security/selinux.rst:281
msgid "ZEO"
msgstr ""

# 5586812fdc334a55b9698df795cd7a6f
#: ../../source/security/selinux.rst:283
msgid ""
"There are couple differences between standalone and ZEO installations. To "
"support both a boolean is probably good way to go. Booleans can be managed "
"like: ::"
msgstr ""

# ea4eb72b14024682ba61499f1c8ef154
#: ../../source/security/selinux.rst:290
msgid ""
"Installing Plone in ZEO mode will change the directory *zinstance* to "
"*zeocluster*. It is alright to either have both defined in **plone.fc**, or "
"to use regexp: ::"
msgstr ""

# 45df0de5fe8a4b1d90b38dbe3e1b9011
#: ../../source/security/selinux.rst:296
msgid ""
"The differences to type enforcement policy consist mostly of more networking"
" abilities (which one probably should not allow unless really required), and"
" the ability to run shells (ie. bash): ::"
msgstr ""

# 53d9d0ebecdb4494a3afe80d1ec0db27
#: ../../source/security/selinux.rst:316
msgid "Maintenance utilities"
msgstr ""

# 26a999a6f4624691b3a61bac1aa1991d
#: ../../source/security/selinux.rst:318
msgid ""
"The procedure for allowing maintenance utilities like *buildout* to work is "
"quite straight forward. First introduce a new context: ::"
msgstr ""

# 57c26231ef8745368320a04dee4a4753
#: ../../source/security/selinux.rst:323
msgid "Then label the maintenance utilities using the context: ::"
msgstr ""

# 9075e27a1900414eaca6b111a9fcc148
#: ../../source/security/selinux.rst:327
msgid ""
"Last, provide the necessary rules for relabeling, context transition, and "
"for the process to run without any restrictions: ::"
msgstr ""

# 54f65db7b7604716afea3e5e20d89c06
#: ../../source/security/selinux.rst:338
msgid ""
"After running maintenance tasks you should make sure the files have still "
"correct labels by running something like: ::"
msgstr ""

# bf0106ae174243b9be4324e2c28f48d9
#: ../../source/security/selinux.rst:343
msgid ""
"See also \"setenforce Permissive\", which will disable enforcing SELinux "
"rules temporarily system wide."
msgstr ""

# 04d4de6b0e3d4708bc675bd534a7a0e3
#: ../../source/security/selinux.rst:346
msgid "Testing the policy"
msgstr ""

# efc22a546be041feafb7e4d7b3a1888d
#: ../../source/security/selinux.rst:348
msgid ""
"Easiest way to test the policy is to label for instance the Python "
"executable as plone_exec_t by using *chcon*, and to test the policy using "
"Python scripts. For example: ::"
msgstr ""

# b9af0e80af054e0ca904a831a2363246
#: ../../source/security/selinux.rst:369
msgid ""
"This can easily be refined into automated testing. Other forms such as "
"Portlet inside running Plone process can also be used for testing."
msgstr ""

# a669b1dc1c3343a9b40b8cffbcb63c23
#: ../../source/security/selinux.rst:372
msgid "Deploying the policy"
msgstr ""

# 990be92196764cebba6590436d1abb83
#: ../../source/security/selinux.rst:374
msgid ""
"SELinux policies can be installed simply by running *semodule -n -i "
"<compiled_policy.pp>*. In case packaging is required (for rolling out Plone "
"instances automatically, or for use with centralized management tools like "
"Satellite) it is easy to accomplish with rpm. In order to do that first "
"install the rpm building tools: ::"
msgstr ""

# 8aae9792bf5a41b5852e7c7c86afeadf
#: ../../source/security/selinux.rst:378
msgid "Then modify the following RPM spec file to suit your needs: ::"
msgstr ""

# d3948d1755354c66908bd7e300583d2e
#: ../../source/security/selinux.rst:438
msgid "The rpm packages will be built by running the rpmbuild: ::"
msgstr ""

# 52587844724c491da971a9cc0986da45
#: ../../source/security/selinux.rst:445
msgid "External resources"
msgstr ""

# 6639b2d50684466e9a2bfda31de5523a
#: ../../source/security/selinux.rst:447
msgid ""
"The following external resources are sorted by probable usefulness to "
"someone who is beginning working with SELinux:"
msgstr ""

# c72bd63e2c254737852c866e4d289c74
#: ../../source/security/selinux.rst:449
msgid ""
"`Fedora SELinux FAQ <https://docs.fedoraproject.org/en-"
"US/Fedora/13/html/SELinux_FAQ/index.html>`_"
msgstr ""

# b89f8eb205964274a983a8aa420612b6
#: ../../source/security/selinux.rst:450
msgid "`Reference policy API <http://oss.tresys.com/docs/refpolicy/api/>`_"
msgstr ""

# 9607a9bb871647a2836d746c40054e90
#: ../../source/security/selinux.rst:451
msgid "`NSA - SELinux FAQ <http://www.nsa.gov/research/selinux/faqs.shtml>`_"
msgstr ""

# 2376aa5b3f844c8a855505afa4b9d3b0
#: ../../source/security/selinux.rst:452
msgid ""
"`NSA - SELinux main website "
"<http://www.nsa.gov/research/selinux/index.shtml>`_"
msgstr ""

# 3131f75d51ad44a0bc028fced3fccf85
#: ../../source/security/selinux.rst:453
msgid "`Official SELinux project wiki <http://selinuxproject.org/>`_"
msgstr ""

# 31c71c9b65514e26859aea8243eb5497
#: ../../source/security/selinux.rst:454
msgid ""
"`Red Hat Enterprise SELinux Policy Administration (RHS429) classroom course "
"<https://www.redhat.com/training/courses/rhs429/>`_"
msgstr ""

# 569f1b3557e347ed939201c5608951f0
#: ../../source/security/selinux.rst:455
msgid ""
"`Tresys Open Source projects <http://www.tresys.com/open-source.php>`_ (IDE,"
" documentation about the reference policy, and several management tools)"
msgstr ""
