# SOME DESCRIPTIVE TITLE.
# Copyright (C) Plone community and other individual contributors
# This file is distributed under the same license as the Plone Developer Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Developer Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-08 16:49\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/components/adapters.rst:3
# a6e4129e87fb4f3e8b366dc1fc01c683
msgid "Adapters"
msgstr ""

#: ../../source/components/adapters.rst:8
#: ../../source/components/customizing_plone.rst:8
#: ../../source/components/events.rst:13
#: ../../source/components/genericsetup.rst:14
#: ../../source/components/grok.rst:14
#: ../../source/components/index.rst:6
#: ../../source/components/interfaces.rst:8
#: ../../source/components/utilities.rst:13
#: ../../source/components/zcml.rst:12
# 127c722d982742479527b582c0dd4ce7
# ce3d65f4bbc540fe919939b3ff810a11
# a0bbce8246d24f1f930a26330bb5ad9a
# 0100c40e9c4f475b812659c276a1c743
# 5ade8bcb3d3c49c09eed21d233c467fe
# 6e0d105350f04a3991ebc60d20f3ee71
# afb9120ed197471b8abada32cf8ac45f
# 65d7c802967b4833b7d201878865b825
# bd1267bf91cf464891bdd0d762cdf6cf
msgid "Introduction"
msgstr ""

#: ../../source/components/adapters.rst:10
# 710b76558f44442e8443fb268973dce4
msgid "Adapters make it possible to extend the behavior of a class without modifying the class itself. This allows more modular, readable code in complex systems where there might be hundreds of methods per class. Some more advantages of this concept are:"
msgstr ""

#: ../../source/components/adapters.rst:15
# 0f00417ed5ab429981719689e1c638c9
msgid "The class interface itself is more readable (less visible clutter);"
msgstr ""

#: ../../source/components/adapters.rst:16
# dd10061765ee45608febd6c1ece2fb7f
msgid "class functionality can be extended outside the class source code;"
msgstr ""

#: ../../source/components/adapters.rst:17
# 0086bf8ee9db46bea23bdd9b3bca45f6
msgid "add-on products may extend or override parts of the class functionality. Frameworks use adapters extensively, because adapters provide easy integration points.  External code can override adapters to retrofit/modify functionality. For example: a theme product might want to override a searchbox viewlet to have a search box with slightly different functionality and theme-specific goodies."
msgstr ""

#: ../../source/components/adapters.rst:25
# 144d05eeec6c4b598896b8d5660e269b
msgid "The downside is that adapters cannot be found by \"exploring\" classes or source code. They must be well documented in order to be discoverable."
msgstr ""

#: ../../source/components/adapters.rst:28
# 043d2a1ff0bb4936ab336228eb06c8c6
msgid "Read more about adapters in the `zope.component README <http://docs.zope.org/zope.component/narr.html#adapters>`_."
msgstr ""

#: ../../source/components/adapters.rst:31
# ad813e25613743f4a15402ee2911d879
msgid "`Adapter ZCML <http://docs.zope.org/zope.component/zcml.html#adapter>`_."
msgstr ""

#: ../../source/components/adapters.rst:33
# 6174e6aebdf9457696a98ca273b5d182
msgid "Adapters are matched by:"
msgstr ""

#: ../../source/components/adapters.rst:35
# b23e0a1f7a474fd4bc55b90c0edc979d
msgid "Provider interface (what functionality adapter provides)."
msgstr ""

#: ../../source/components/adapters.rst:36
# df6d0c5def1b4f89ac9fee353a131df2
msgid "Parameter interfaces."
msgstr ""

#: ../../source/components/adapters.rst:38
# cd2b103c987c4be4a9eed7f9898c1dd2
msgid "There are two kinds of adapters:"
msgstr ""

#: ../../source/components/adapters.rst:40
# 8e7511bec5ec4c419b543814eb8c6782
msgid "Normal adapters that take only one parameter."
msgstr ""

#: ../../source/components/adapters.rst:41
# a0561430ee8d48b08edf61b18bd8ea0c
msgid "Multi-adapters take many parameters in the form of a tuple."
msgstr ""

#: ../../source/components/adapters.rst:44
# 1ebfd0507d9849eba329447f2ced86a3
msgid "Example adapters users"
msgstr ""

#: ../../source/components/adapters.rst:46
# 26d7d22fe77140b7ab8a94b3fc484f12
msgid "http://plone.org/documentation/manual/theme-reference/buildingblocks/components/themespecific"
msgstr ""

#: ../../source/components/adapters.rst:49
# acf40041fa5b4e119f193fcb1218219c
msgid "Registering an adapter"
msgstr ""

#: ../../source/components/adapters.rst:52
# 0651a36e078e4b9da432a5effe0b1e02
msgid "Registering using ZCML"
msgstr ""

#: ../../source/components/adapters.rst:54
# 5a865e9c009d49a6babd8d40468e694b
msgid "An adapter provides functionality to a class. This functionality becomes available when the interface is queried from the instance of class."
msgstr ""

#: ../../source/components/adapters.rst:57
# 171c7d2421e64e069fa008e329290f04
msgid "Below is an example how to make a custom \"image provider\". The image provider provides a list of images for arbitrary content."
msgstr ""

#: ../../source/components/adapters.rst:60
# a6af73458bde4b508092b75c1760303e
msgid "This is the image provider interface::"
msgstr ""

#: ../../source/components/adapters.rst:72
# 806d985758db45bf8e5d1c71039087c6
msgid "This is our content class::"
msgstr ""

#: ../../source/components/adapters.rst:82
# 7def2040178a4487a51abfada855233f
msgid "This is the adapter for the content class::"
msgstr ""

#: ../../source/components/adapters.rst:113
# e471f94fb3864347bdc1e769a13c8b44
msgid "Register the adapter for your custom content type ``MyShoppableItemType`` in the ``configure.zcml`` file of your product:"
msgstr ""

#: ../../source/components/adapters.rst:124
# c82f171a85644f7d8700f6c6a2b8724e
msgid "Then we can query the adapter and use it. Unit testing example::"
msgstr ""

#: ../../source/components/adapters.rst:138
# 2552d948ea194341bfd14c162d651b02
msgid "Registering using Python"
msgstr ""

#: ../../source/components/adapters.rst:140
# ebd2794d98b5410381569ee5b441d3ce
msgid "Register to *Global Site Manager* using ``registerAdapter()``."
msgstr ""

#: ../../source/components/adapters.rst:142
#: ../../source/components/events.rst:176
#: ../../source/components/genericsetup.rst:137
#: ../../source/components/interfaces.rst:61
#: ../../source/components/interfaces.rst:80
#: ../../source/components/interfaces.rst:162
#: ../../source/components/interfaces.rst:262
#: ../../source/components/interfaces.rst:286
#: ../../source/components/utilities.rst:150
#: ../../source/components/utilities.rst:188
# 6782731fdeb24e18ae9f205a8b65faf8
# ddf2b8a1f5544169886709bd17533bb6
# cfe4a868e34044d9b8935b14ee586e37
# 266d98a5b1b7450cbc63fe1b6129db36
# 8e76df141ecb470d82dfc6d5797403f2
# a0cb44ca2dc54c3084479e771c1288dc
# c5cf4eec675347088ea4aae0d8968b58
# 5d16f19d6af748b3b6bcd41114982631
# f97e4d98e764411eb52b82bd9c880307
# b7cf611244d94f7196f116e7088efd81
msgid "Example::"
msgstr ""

#: ../../source/components/adapters.rst:153
#: ../../source/components/grok.rst:32
#: ../../source/components/grok.rst:231
#: ../../source/components/index.rst:33
# fdfb516c76f54fb4addd7113fc4d2a15
# 3d5d69f0863544a79960c88e6ac310ee
# 85c7d759401c4f3cb1c4eaceb8b9cdc7
# 639b31561a154bc1a980a99001398407
msgid "More info"
msgstr ""

#: ../../source/components/adapters.rst:155
# 59fb1b5ddfd34ae08072a5c110014560
msgid "http://www.muthukadan.net/docs/zca.html#registration"
msgstr ""

#: ../../source/components/adapters.rst:158
# 5ee2a4406509493e92c40cdf676fe536
msgid "Generic adapter contexts"
msgstr ""

#: ../../source/components/adapters.rst:160
# 9397845572af4b4888b76f617815b96f
msgid "The following interfaces are useful when registering adapters:"
msgstr ""

#: ../../source/components/adapters.rst:163
# 1db70c74b34a427d8eed9410a18ae1ed
msgid "Adapts to any object"
msgstr ""

#: ../../source/components/adapters.rst:166
# 170c396c5a424ecb8a3c64da59be5e3f
msgid "Adapts to any Plone content object"
msgstr ""

#: ../../source/components/adapters.rst:169
# b08257af78904690a45a56d30623a0d9
msgid "Adapts to any ``BrowserView(context, request)`` object"
msgstr ""

#: ../../source/components/adapters.rst:172
# 2b742d97d7c2410e87172d0a14f87299
msgid "Multi-adapter registration"
msgstr ""

#: ../../source/components/adapters.rst:174
# c7fee127936548aa9b9768cda8d05a0f
msgid "You can specify any number of interfaces in the ``<adapter for=\"\" />`` attribute. Separate them with spaces or newlines."
msgstr ""

#: ../../source/components/adapters.rst:177
# 54a24ad140a24badace7d3eb40475006
msgid "Below is a view-like example which registers against:"
msgstr ""

#: ../../source/components/adapters.rst:179
# 16f94179d2eb4bda9a495d9bddf51ed2
msgid "any context (``zope.interface.Interace``);"
msgstr ""

#: ../../source/components/adapters.rst:180
# dcf61ba2eb564dc3a74f28b5c8422b1d
msgid "HTTP request objects (``zope.publisher.interfaces.browser.IBrowserRequest``)."
msgstr ""

#: ../../source/components/adapters.rst:182
# 88943247e259447c85bcc90f27fc8ac8
msgid "Emulate view registration (context, request):"
msgstr ""

#: ../../source/components/adapters.rst:194
# 399f6fd6c77b4fc8b19f8bcfc697a44f
msgid "Getting the adapter"
msgstr ""

#: ../../source/components/adapters.rst:196
# 6da5bbaac7284946807c325baf73b30a
msgid "There are two functions that may be used to get an adapter:"
msgstr ""

#: ../../source/components/adapters.rst:198
# 2c9d08c94fea4227ad9e0ce87bc03ad1
msgid "``zope.component.getAdapter`` will raise an exception if the adapter is not found."
msgstr ""

#: ../../source/components/adapters.rst:201
# 7ad73be341744e96877bd3c4875de4c2
msgid "``zope.component.queryAdapter`` will return ``None`` if the adapter is not found."
msgstr ""

#: ../../source/components/adapters.rst:204
# 932d817957cd4aac8eb5222fe045efdf
msgid "``getAdapter``/``queryAdapter`` arguments:"
msgstr ""

#: ../../source/components/adapters.rst:207
# c4b8bc06ca0148c4a00cacb202ec7765
msgid "*object implementing the second interface*, ...) The interfaces are in the order in which they were declared in the ``<adapter for=\"\">`` attribute."
msgstr ""

#: ../../source/components/adapters.rst:211
# 6b6f786ae99f4d6cb470584fd96b5b37
msgid "# Adapter marker interface."
msgstr ""

#: ../../source/components/adapters.rst:213
# bbfeec5ca6ec4418b0f9520e46b6751c
msgid "Example registration:"
msgstr ""

#: ../../source/components/adapters.rst:227
# 6339922f95334a7ab5e91fb331d52db3
msgid "Corresponding query code, to look up an adapter implementing the interfaces::"
msgstr ""

#: ../../source/components/adapters.rst:247
# a0587b17d22b42a8aadc3e3bb14c661c
msgid "You cannot get adapters on module-level code during import, as the Zope Component Architecture is not yet initialized."
msgstr ""

#: ../../source/components/adapters.rst:252
# bb0eecf5b4894cb5bcfa8de8d4f11935
msgid "Listing adapter registers"
msgstr ""

#: ../../source/components/adapters.rst:254
# 16a48f73207a4c31b87bf65fa0759721
msgid "The following code checks whether the ``IHeaderBehavior`` adapter is registered correctly::"
msgstr ""

#: ../../source/components/adapters.rst:265
# bc9077747d6e49229149ae641dfbab28
msgid "Alternative listing adapters"
msgstr ""

#: ../../source/components/adapters.rst:267
# de286c93e6ca4754b98b40bd3b04f4b7
msgid "Getting all multi-adapters (context, request)::"
msgstr ""

#: ../../source/components/adapters.rst:274
# d6670bbdf6cb420688b70d771ac8e5eb
msgid "This does not list locally-registered adapters such as Zope views."
msgstr ""

#: ../../source/components/adapters.rst:278
# c127f75d149449afaa9bdd5915250ef1
msgid "Local adapters"
msgstr ""

#: ../../source/components/adapters.rst:280
# 44fc4a18abd2493db1369fc830665ec2
msgid "Local adapters are effective only inside a certain container, such as a folder.  They use ``five.localsitemanager`` to register themselves."
msgstr ""

#: ../../source/components/adapters.rst:283
# 1be90557961941b9a277eb7e29a76da3
msgid "http://opkode.net/media/blog/schema-extending-an-object-only-inside-a-specific-folder"
msgstr ""

#: ../../source/components/customizing_plone.rst:3
# f76cdf6d7e6442f493097800f3a9d060
msgid "Customizing Plone"
msgstr ""

#: ../../source/components/customizing_plone.rst:10
# f911f21e2bae43d68e69ffd7ee9bf207
msgid "Plone can be customized in two different ways, depending on which kind of component you are trying to change:"
msgstr ""

#: ../../source/components/customizing_plone.rst:13
# ab1756e78d6f49b1b4a13e4be8c01046
msgid "Through-the-web."
msgstr ""

#: ../../source/components/customizing_plone.rst:15
# 7eec8a4ca1ad4a8f8e71833d1e6ad244
msgid "By add-on products."
msgstr ""

#: ../../source/components/customizing_plone.rst:17
# 6ac61e1e91f04a8ea7d4fef69b1cb5ad
msgid "You should never edit files directly in an egg folder. Instead you usually create a customized version of the item you wish to modify and then configure Plone to use your customized version instead of the stock one."
msgstr ""

#: ../../source/components/customizing_plone.rst:23
# 09a239f314ca458e8a3c3c92943e239f
msgid "Through-the-web changes"
msgstr ""

#: ../../source/components/customizing_plone.rst:25
# 48dcf1ada28742949e32edfe79ea1fb2
msgid "Minor configuration changes can be done through the web. These changes are effective immediately and don't require you to write any code or restart Zope application server. The downside is that since through-the-web changes don't have a source code \"recipe\" for what you did, the changes are not automatically repeatable. If you need to do the same changes for another site again, or you need heavily modify your site, you need go through manual steps to achieve the same customization."
msgstr ""

#: ../../source/components/customizing_plone.rst:35
# 7d34ecc358354ac8b676a12a5b769183
msgid "Possible through-the-web changes are:"
msgstr ""

#: ../../source/components/customizing_plone.rst:37
# 167285c3b1b348ee8db42fc3f94c5086
msgid "Site settings: E.g. adding/removing `content rules <http://plone.org/documentation/how-to/content-rules>`_"
msgstr ""

#: ../../source/components/customizing_plone.rst:39
# f80a5102be814837a5de03625ba4ab0d
msgid "Showing and hiding viewlets (parts of the page) using ``@@manage-viewlets``"
msgstr ""

#: ../../source/components/customizing_plone.rst:41
# 8341412bee824217ade03a6ec1848358
msgid "Exporting and importing parts of the site configuration in ``portal_setup``"
msgstr ""

#: ../../source/components/customizing_plone.rst:43
# a53e5ef981cb4b1a9643c2558f24b2c0
msgid "Customizing viewlet templates in ``portal_view_customization``"
msgstr ""

#: ../../source/components/customizing_plone.rst:45
# 371b4370e36144b99dedcf3dcd0f7038
msgid "Customize ``portal_skins`` layer theme files in portal_skins"
msgstr ""

#: ../../source/components/customizing_plone.rst:47
# 997393785b0543ca93e1fd031c264438
msgid "Uploading Javascript files, CSS files and images through Zope management interface and registering using ``portal_css`` and ``portal_javascripts``"
msgstr ""

#: ../../source/components/customizing_plone.rst:51
# 8f02e94f5e104e9390ad30a747433fc2
msgid "Through the code changes"
msgstr ""

#: ../../source/components/customizing_plone.rst:53
# 51552896dc2c46f5a18bcd5cc1d833a7
msgid "To expand Plone using Python, you have to create your own add-on product. Add-on products are distributed as packaged Python modules called eggs_. The recommended way is to use the paster_ command to generate an add-on product skeleton which you can use as a starting point for your development. Paster also contains useful subcommands, like ``addcontent``, which automate various Plone add-on development tasks."
msgstr ""

#: ../../source/components/customizing_plone.rst:61
# e9f459aa47ed4d2398ef509a0f55101b
msgid "Another `paster tutorial <http://www.unc.edu/~jj/plone/>`_"
msgstr ""

#: ../../source/components/events.rst:3
# dd5ab21140a046adb51f4cfd4aae7433
msgid "Events"
msgstr ""

#: ../../source/components/events.rst:7
# 90c22380889541eeab2ffe0949221d44
msgid "How to add event hooks to your Plone code to perform actions when something happens on a Plone site."
msgstr ""

#: ../../source/components/events.rst:15
# ed7d4e3892214b058afe7c1a19271e71
msgid "This document briefly discusses event handling using the ``zope.event`` module. The Zope Component Architecture's `zope.event package <http://pypi.python.org/pypi/zope.event>`_ is used to manage subscribeable events in Plone."
msgstr ""

#: ../../source/components/events.rst:20
# 76a898d437174cfc89436016b3ae71e1
msgid "Some of the notable characteristics of the Plone event system are:"
msgstr ""

#: ../../source/components/events.rst:22
# 0b75f674775b491ca6f4245a51ec66d9
msgid "it is simple;"
msgstr ""

#: ../../source/components/events.rst:23
# 165e0aa0f7df4348b11bf5b689cc194e
msgid "subscriber calling order is not modifiable |---| you cannot set the order in which event handlers are called;"
msgstr ""

#: ../../source/components/events.rst:25
# 220626d39ac84093b2862fb4bb56843c
msgid "events cannot be cancelled |---| all handlers will always get the event;"
msgstr ""

#: ../../source/components/events.rst:26
# 01a82668112b48fc9bf51fa47da5c478
msgid "event handlers cannot have return values;"
msgstr ""

#: ../../source/components/events.rst:27
# 58408d2133ec421e926b8fc84478e0a4
msgid "exceptions raised in an event handler will interrupt the request processing."
msgstr ""

#: ../../source/components/events.rst:30
#: ../../source/components/events.rst:123
# 53d5d4a5c1314a948ffcea750d12e994
# 22d7a41af74d4d6a883d2acdcbf2ed86
msgid "For more information, see:"
msgstr ""

#: ../../source/components/events.rst:32
#: ../../source/components/events.rst:127
# 72dffa34a5cb49318748b3de3b3be896
# 68a0c00cb87d4fc387ee89b0d489fa15
msgid "http://plone.org/products/dexterity/documentation/manual/five.grok/core-components/events"
msgstr ""

#: ../../source/components/events.rst:35
# 4b7c8ccc464142168e9132d87497298c
msgid "Registering an event handler"
msgstr ""

#: ../../source/components/events.rst:37
# d15941e558ee42a99d5a9d50df7e5503
msgid "Plone events can be scoped:"
msgstr ""

#: ../../source/components/events.rst:39
# 39deca164cdf4e3dbc014e4d90955a90
msgid "*globally* (no scope)"
msgstr ""

#: ../../source/components/events.rst:40
# 047d4684c137406299a34428b72f6ded
msgid "per *content type*"
msgstr ""

#: ../../source/components/events.rst:44
# d1d74329ccd840b0884f55e3852727b4
msgid "Example: Register an event-handler on your contenttype's creation"
msgstr ""

#: ../../source/components/events.rst:47
# f926e627af5c42588f73527de54b3b8a
msgid "In your.product/your/product/configure.zcml insert::"
msgstr ""

#: ../../source/components/events.rst:56
# f2377414f10f447bb8d5218bea0eb874
msgid "The first line defines to which interface you want to bind the execution of your code, which means here, that the code will only be executed if the object is one of your contenttype's. If you want this to be interface-agnostic, insert an asterix as a wildcard instead."
msgstr ""

#: ../../source/components/events.rst:60
# ddab370c98dc4e2e90b5bf6f4a1da2b5
msgid "The second line defines the event on which this should happen, which is here 'IObjectInitializedEvent'. For more available possible events to be used as a trigger, see:: http://developer.plone.org/reference_manuals/external/plone.app.dexterity/advanced/event-handlers.html"
msgstr ""

#: ../../source/components/events.rst:64
# 88578350d275490fa89546d5abbe1136
msgid "The third line gives the path to the script that is supposed to be executed."
msgstr ""

#: ../../source/components/events.rst:66
# 1c53441a9538403eab2bfe088299a3f6
msgid "Create your.product/your/product/your_python_file.py and insert::"
msgstr ""

#: ../../source/components/events.rst:72
# 176a8c58775d4e44a4b243bda3457187
msgid "For Dexterity-contenttype's and additional ZOPE-Illumination see also: http://developer.plone.org/reference_manuals/external/plone.app.dexterity/advanced/event-handlers.html"
msgstr ""

#: ../../source/components/events.rst:78
# 19dc85965ac24c3cac84b88251e63935
msgid "Subscribing using the ``grok`` API"
msgstr ""

#: ../../source/components/events.rst:82
# 1650c1158fa34243a3c7dce39b995eee
msgid "Since the release of Plone 4, this (grok) method is simpler."
msgstr ""

#: ../../source/components/events.rst:84
# 9a4726fc0bef48d4b45ff84b7a0fc6d6
msgid "Example subscription which subscribes a content type to add and edit events::"
msgstr ""

#: ../../source/components/events.rst:108
# 990ff33257d845dc93310f0fb3bd1f99
msgid "Example subscription which subscribes events without context::"
msgstr ""

#: ../../source/components/events.rst:125
# 2c80527fc7c041ea8797cada15d65d3f
msgid ":doc:`Using Grok </components/grok>`"
msgstr ""

#: ../../source/components/events.rst:130
# 04f84592331440e7a19a703f2df987ab
msgid "Subscribing using ZCML"
msgstr ""

#: ../../source/components/events.rst:132
# 8cd6710455ee411a932d193941cd872e
msgid "Subscribing to a global event using :term:`ZCML`."
msgstr ""

#: ../../source/components/events.rst:141
# b1059e2b3180435f9fe43210abac4a2a
msgid "For this event, the Python code in ``smartcard.py`` would be::"
msgstr ""

#: ../../source/components/events.rst:149
# 719b1bfddf3b4e42be411b719d01120c
msgid "Custom event example subscribing to all ``IMyEvents`` when fired by ``IMyObject``::"
msgstr ""

#: ../../source/components/events.rst:158
# 593638984a0248d5af4a20386c26033a
msgid "Life cycle events example::"
msgstr ""

#: ../../source/components/events.rst:169
# 4c41d00afc914c48b9851f0246cc5cda
msgid "Subscribing using Python"
msgstr ""

#: ../../source/components/events.rst:171
# 15ca3e756c714c39b5b4713af9a73116
msgid "The following subscription is valid through the process life cycle. In unit tests, it is important to clear test event handlers between the test steps."
msgstr ""

#: ../../source/components/events.rst:193
# 4d1d0c67bc8141e9b2a8d99887f781cf
msgid "Firing an event"
msgstr ""

#: ../../source/components/events.rst:195
# 8aee9d0fdfb4455c9258f4a6bd6c1cba
msgid "Use ``zope.event.notify()`` to fire event objects to their subscribers."
msgstr ""

#: ../../source/components/events.rst:197
# b5aa20c48da94b1b93d921d2c92a41ba
msgid "Example of how to fire an event in unit tests::"
msgstr ""

#: ../../source/components/events.rst:207
# 24ca21c414d74af3b7db3c1da041bdb5
msgid "Event types"
msgstr ""

#: ../../source/components/events.rst:210
# 26be26d6e82d4335b664a82b98e21f22
msgid "*Creation* events"
msgstr ""

#: ../../source/components/events.rst:213
# 59d35e2548274d039adb4db0640b8b38
msgid "is fired for an Archetypes-based object when it's being initialised; i.e.  when it's being populated for the first time."
msgstr ""

#: ../../source/components/events.rst:217
# 2754429d850f40ec840ede8fc58008eb
msgid "is fired for an Archetypes-based object when it's being initialised via WebDAV."
msgstr ""

#: ../../source/components/events.rst:221
# a17c5a44501645e8b3aa93cbdbd7418c
msgid "is fired for all Zopeish objects when they are being created (they don't necessarily need to be content objects)."
msgstr ""

#: ../../source/components/events.rst:226
# 37d1dd7b25ef42b1bd7553d2fc55a92c
msgid "Archetypes and Zope 3 events might not be compatible with each other. Please see links below."
msgstr ""

#: ../../source/components/events.rst:229
# 43245f32803349d7b980e3f3cc8755b4
msgid "Other resources:"
msgstr ""

#: ../../source/components/events.rst:231
# fa22894b72354c599c2bafaff7b26798
msgid "http://plone.org/documentation/manual/developer-manual/archetypes/other-useful-archetypes-features/how-to-use-events-to-hook-the-archetypes-creation-process"
msgstr ""

#: ../../source/components/events.rst:233
# 94d3c6c92c514a01a6ddf9dd84e86d13
msgid "http://n2.nabble.com/IObjectInitializedEvent-tp4784897p4784897.html"
msgstr ""

#: ../../source/components/events.rst:237
# 51e4bcd8af4a478ab76df5b37d8d2cbb
msgid "*Modified* events"
msgstr ""

#: ../../source/components/events.rst:239
# b43ce46a33ff4f4497a71402ab51ea84
msgid "Two different content event types are available and might work differently depending on your scenario:"
msgstr ""

#: ../../source/components/events.rst:243
# 69f0d21a828a4b129050f1a144951422
msgid "called for Archetypes-based objects that are not in the creation stage any more."
msgstr ""

#: ../../source/components/events.rst:248
# 5146a678a5be4e1e8e5bfcbf29139a0e
msgid "``Products.Archetypes.interfaces.IObjectEditedEvent`` is fired after ``reindexObject()`` is called. If you manipulate your content object in a handler for this event, you need to manually reindex new values, or the changes will not be reflected in the ``portal_catalog``."
msgstr ""

#: ../../source/components/events.rst:254
# 4f6bd97630f5497ab7d28e5f1a888fdf
msgid "called for creation-stage events as well, unlike the previous event type."
msgstr ""

#: ../../source/components/events.rst:257
# 8d73e2588593417e8f964c50edc981e6
msgid "called for Archetypes-based objects when they are being edited via WebDAV."
msgstr ""

#: ../../source/components/events.rst:260
# dd1518e1320d4691b1b8d8a746402995
msgid "called for Archetypes-based objects when an edit operation is begun."
msgstr ""

#: ../../source/components/events.rst:263
# ceacc7df992143f58520757015324d30
msgid "called for Archetypes-based objects when an edit operation is canceled."
msgstr ""

#: ../../source/components/events.rst:267
# fb91f58d9af24584afc2f1a05bcff1ec
msgid "*Delete* events"
msgstr ""

#: ../../source/components/events.rst:269
# f07f30fec4a740c58e324578a49c9dbc
msgid "Delete events can be fired several times for the same object. Some delete event transactions are rolled back."
msgstr ""

#: ../../source/components/events.rst:272
# ae91bcc4b3cb480f8b159133f8c247c1
msgid "Read more about Delete events in `this discussion <http://plone.293351.n2.nabble.com/Event-on-object-deletion-td3670562.html>`_."
msgstr ""

#: ../../source/components/events.rst:275
# a2e1f331e88a47209b9c5fae268887b4
msgid "*Copy* events"
msgstr ""

#: ../../source/components/events.rst:278
# 2a3b5d5541474129855208fd58f7b718
msgid "is triggered when an object is copied."
msgstr ""

#: ../../source/components/events.rst:281
# e1fdbb202c4347f3822c4d5133d37fc6
msgid "*Workflow* events"
msgstr ""

#: ../../source/components/events.rst:284
# c1e3762a774141018bb4d022c8c7ed96
msgid "is triggered before a workflow transition is executed."
msgstr ""

#: ../../source/components/events.rst:287
# 7d500d495f604b1a8f9360f231176f0a
msgid "is triggered after a workflow transition has been executed."
msgstr ""

#: ../../source/components/events.rst:289
# 9e81799e3f3d4326b667792c8851c2e2
msgid "The DCWorkflow events are low-level events that can tell you a lot about the previous and current states."
msgstr ""

#: ../../source/components/events.rst:293
# 882384047f4c45b69a078c1e4035f179
msgid "this is a higher level event that is more commonly used to react after a workflow action has completed."
msgstr ""

#: ../../source/components/events.rst:298
# 8bd9787001cd4555ae6c983bc7120baa
msgid "*Zope startup* events"
msgstr ""

#: ../../source/components/events.rst:301
# 7d8c35c321924036806a26c7aac24f6e
msgid "is triggered after component registry has been loaded and Zope is starting up."
msgstr ""

#: ../../source/components/events.rst:305
# 0031da3a6920484780c126722c627cc3
msgid "is triggered after the main ZODB database has been opened."
msgstr ""

#: ../../source/components/events.rst:309
# f1cd1833fd2c473f8bd2effd20c45c10
msgid "Asynchronous event handling"
msgstr ""

#: ../../source/components/events.rst:311
# 16b735e878c74af9a55f63dd100495a8
msgid "http://stackoverflow.com/questions/15875088/running-plone-subscriber-events-asynchronously"
msgstr ""

#: ../../source/components/events.rst:314
#: ../../source/components/interfaces.rst:110
# d452d2fa51c642ad92bc62b4dcad6892
# 226f8ab0b333430aa698eacd4db0b2a8
msgid "See also"
msgstr ""

#: ../../source/components/events.rst:316
# 422351009cda45d5830b6d9e009296af
msgid "http://pypi.python.org/pypi/zope.event/3.4.1"
msgstr ""

#: ../../source/components/events.rst:318
# a8b840ced7064ed78b78c25b22feef64
msgid "http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_zope/subscriber/index.html"
msgstr ""

#: ../../source/components/events.rst:320
# f9d4b63fa58e45cdaa2eaf7ec484dc25
msgid "``zope.component.registry``"
msgstr ""

#: ../../source/components/genericsetup.rst:3
# b238ae9f67914764be640dd70a04d505
msgid "Add-on installation and export framework: GenericSetup"
msgstr ""

#: ../../source/components/genericsetup.rst:7
# 17e9200f89fd4445af3d3023d5151374
msgid "GenericSetup is a framework to modify the Plone site during add-on product installation and uninstallation. It provides XML-based rules to change the site settings easily."
msgstr ""

#: ../../source/components/genericsetup.rst:16
# 45208881ed9d485688069aefe2d4c3d6
msgid "GenericSetup is an XML-based way to import and export Plone site configurations."
msgstr ""

#: ../../source/components/genericsetup.rst:18
# 6b2a86c95fdd437f87dd9316c2548e92
msgid "It is mainly used to prepare the Plone site for add-on products, by:"
msgstr ""

#: ../../source/components/genericsetup.rst:20
# cf2fba9d25e04012a5d7721ae0202d87
msgid "registering CSS files,"
msgstr ""

#: ../../source/components/genericsetup.rst:21
# 4ffc8b8a75f8445191c566a9b0767c67
msgid "registering Javascript files,"
msgstr ""

#: ../../source/components/genericsetup.rst:22
# 3f56302af74847698a438870a65cca8a
msgid "setting various properties,"
msgstr ""

#: ../../source/components/genericsetup.rst:23
# 4ef098844de84fbdb29f3773e888d0a1
msgid "registering portlets,"
msgstr ""

#: ../../source/components/genericsetup.rst:24
# 41118c1d53294d22913c2b2620440774
msgid "registering portal_catalog search query indexes,"
msgstr ""

#: ../../source/components/genericsetup.rst:25
# 94ecdced3fb74c9a896c9042c6acf1e0
msgid "...and so on..."
msgstr ""

#: ../../source/components/genericsetup.rst:27
# edec51615d7743cf9580af4512a0da1a
msgid "GenericSetup is mostly used to apply add-on-specific changes to the site configuration, and to enable add-on-specific behavior when the add-on installer is run."
msgstr ""

#: ../../source/components/genericsetup.rst:31
# fd45e1cfcf3b443baca89f69ff63ab6e
msgid "GenericSetup XML files are usually in a ``profiles/default`` folder inside the add-on product."
msgstr ""

#: ../../source/components/genericsetup.rst:34
# 2e12d828d70549d0bfd912e79cf8f3a5
msgid "All run-time configurable items, like viewlets order through ``/@@manage-viewlets`` page, are made repeatable using GenericSetup profile files."
msgstr ""

#: ../../source/components/genericsetup.rst:38
# 6a3a16bbfc44433d81e50eb047904af3
msgid "You do not need to hand-edit GenericSetup profile files. You can always change the configuration options through Plone or using the Zope Management Interface. Then you can export the resulting profile as an XML file, using the *Export* tab in the ``portal_setup`` ZMI tool."
msgstr ""

#: ../../source/components/genericsetup.rst:44
# 1892edc04ceb46a0b0e75865e58beaaa
msgid "Directly editing XML profile files does not change anything on the site, even after Zope restart. This is because run-time configurable items are stored in the database. If you edit profile files, you need reimport edited files using the ``portal_setup`` tool or rerun the add-on product installer in Plone control panel. This import will read XML files and change Plone database accordingly."
msgstr ""

#: ../../source/components/genericsetup.rst:55
# fd4ec00a88f44a82966833843cf6273b
msgid "Difference between ZCML and GenericSetup"
msgstr ""

#: ../../source/components/genericsetup.rst:57
# 7c1bc0c7edf54645ae601690315da196
msgid "ZCML changes affect loaded Python code in **all** sites inside Zope whereas GenericSetup XML files affect only one Plone site and its database. GenericSetup XML files are always database changes."
msgstr ""

#: ../../source/components/genericsetup.rst:62
# 58540700ad4f4654a322572cc77a2d61
msgid "Relationship between ZCML and site-specific behavior is usually done using :doc:`layers </views/layers>`. ZCML directives, like viewlets and views, are registered to be active on a certain layer only using ``layer`` attribute. When GenericSetup XML is imported through ``portal_setup``, or the product add-on installer is run for a Plone site, the layer is activated for the particular site only, enabling all views registered for this layer."
msgstr ""

#: ../../source/components/genericsetup.rst:74
# 5b9fc8d65d6d415180e3804fe5e20a4c
msgid "The ``metadata.xml`` file (add-on dependency and version information) is read during Plone start-up. If this file has problems your add-on might not appear in the installer control panel."
msgstr ""

#: ../../source/components/genericsetup.rst:78
# 054ebbaa64af449581ba3e49b1be2b5e
msgid "`GenericSetup tutorial <http://plone.org/documentation/tutorial/genericsetup>`_"
msgstr ""

#: ../../source/components/genericsetup.rst:80
# c4c944c281134e0099629e1998b46c52
msgid "`GenericSetup product page <http://pypi.python.org/pypi/Products.GenericSetup/1.4.5>`_."
msgstr ""

#: ../../source/components/genericsetup.rst:82
# 8ec33ea6dafb4952bda7e27b56a46615
msgid "`Source code <http://svn.zope.org/Products.GenericSetup/trunk/Products/GenericSetup/README.txt?rev=87436&view=auto>`_."
msgstr ""

#: ../../source/components/genericsetup.rst:84
# 18a8cd0bffe94318a0edc18aef2297c2
msgid "should the link be specifically to rev=87436?"
msgstr ""

#: ../../source/components/genericsetup.rst:88
# 82941396aa50424fa57518445520b5ff
msgid "Creating a profile"
msgstr ""

#: ../../source/components/genericsetup.rst:90
# 90e00ef88276405eb50be697eb6c5381
msgid "You use ``<genericsetup>`` directive in your add-on product's ``configure.zcml``. The name for the default profile executed by the Plone add-on installer is \"default\". If you need different profiles for e.g. unit testing you can declare them here."
msgstr ""

#: ../../source/components/genericsetup.rst:95
# 9c711fa5087c43ce83a112b7c1b404e6
msgid "Profile XML files go in the ``profiles/default`` folder inside your add-on product."
msgstr ""

#: ../../source/components/genericsetup.rst:118
# c6935b67f6d941f491d05d373f7c06aa
msgid "Add-on-specific issues"
msgstr ""

#: ../../source/components/genericsetup.rst:120
# 14f8a645d6ec4a7daa4bb40f4bc9ac81
msgid "Add-on products may contain:"
msgstr ""

#: ../../source/components/genericsetup.rst:122
# a681c05dfbdc4d999c6d91ce2610fb83
msgid "A default GenericSetup XML profile which is automatically run when the product is installed using the quick-installer. The profile name is \"default\"."
msgstr ""

#: ../../source/components/genericsetup.rst:126
# 03ae781a51554d34aedfb79835bd152e
msgid "Other profiles which the user may install using the ``portal_setup`` *Import* tab, or which can be manually enabled for unit tests."
msgstr ""

#: ../../source/components/genericsetup.rst:128
# a44e44aaa15f4154aa87b8dda3602abf
msgid "An \"Import various\" step, which runs Python code every time the GenericSetup XML profile is installed."
msgstr ""

#: ../../source/components/genericsetup.rst:130
# 0945ccf9b7b049ad82a2463b83048079
msgid "For more information about custom import steps, see:"
msgstr ""

#: ../../source/components/genericsetup.rst:132
# 87a237e61eb442d3b3b28732ea485c53
msgid "http://n2.nabble.com/indexing-of-content-created-by-Generic-Setup-tp4454703p4454703.html"
msgstr ""

#: ../../source/components/genericsetup.rst:135
# f1039b713f61482d992b5792b5d9757f
msgid "Listing available profiles"
msgstr ""

#: ../../source/components/genericsetup.rst:146
# 561df62de7f74ab9b94af1ad4c481c21
msgid "Results::"
msgstr ""

#: ../../source/components/genericsetup.rst:155
# 9d9ed8d58d9e4b4b9bf6206ac64f6f19
msgid "Installing a profile"
msgstr ""

#: ../../source/components/genericsetup.rst:157
# c97e4450a2dd4a1fbea2e8a3f1f24add
msgid "This is usually unit test specific question how to enable certain add-ons for unit testing."
msgstr ""

#: ../../source/components/genericsetup.rst:160
# 4621b1856014481b9512cfe1e5928cd6
msgid "PloneTestCase.setupPloneSite"
msgstr ""

#: ../../source/components/genericsetup.rst:162
# 7182dc14cb09477aa2df5a98ffb81a93
msgid "See *Running add-on installers and extensions profiles for unit tests*."
msgstr ""

#: ../../source/components/genericsetup.rst:165
# 92b996d1469b4d17857da1d258696f1b
msgid "Manually"
msgstr ""

#: ../../source/components/genericsetup.rst:167
# 3a9c09043fd6495f9caea3c36167659e
msgid "You might want to install profiles manually if they need to be enabled only for certain tests."
msgstr ""

#: ../../source/components/genericsetup.rst:169
# 9adf2853c0204d17b532db4633d8a327
msgid "The profile name is in the format ``profile-${product name}:${profile id}``"
msgstr ""

#: ../../source/components/genericsetup.rst:171
# a60539be7b0c40aba1757635655cf5c6
msgid "Unit testing example::"
msgstr ""

#: ../../source/components/genericsetup.rst:177
#: ../../source/components/genericsetup.rst:358
# 3ccb8c3b114e4945af5c998bb7ad6e95
# 6c36a8914f6d4298a914793997fa16e9
msgid "Upgrade steps"
msgstr ""

#: ../../source/components/genericsetup.rst:179
# bd05eff814a441dc868f9fa2ad64d4a5
msgid "If you need to migrate data or settings on new add-on versions"
msgstr ""

#: ../../source/components/genericsetup.rst:181
# 4a4407cf44f9439d8b46debf3c30a402
msgid "http://stackoverflow.com/questions/15316583/how-to-define-a-procedure-to-upgrade-an-add-on"
msgstr ""

#: ../../source/components/genericsetup.rst:184
# cc840e98449542889a803487baa0e78a
msgid "Uninstall profile"
msgstr ""

#: ../../source/components/genericsetup.rst:186
# e932addd4ab743f287f6f1476ee54bf2
msgid "For the theory, see: `<http://plone.org/documentation/kb/genericsetup/creating-an-uninstall-profile>`_"
msgstr ""

#: ../../source/components/genericsetup.rst:189
# e8b1122734e14110a7b91963c2dfc794
msgid "For an example, see the `collective.pdfpeek source code <http://svn.plone.org/svn/collective/collective.pdfpeek/trunk/collective/pdfpeek/profiles/>`_."
msgstr ""

#: ../../source/components/genericsetup.rst:193
# 8ebd1f875763410a8ff9fd2bc2510836
msgid "Dependencies"
msgstr ""

#: ../../source/components/genericsetup.rst:195
# bc491ae71c7b4b99a3d22014f9879d5d
msgid "GenericSetup profile can contain dependencies to other add-on product installers and profiles."
msgstr ""

#: ../../source/components/genericsetup.rst:197
# 19a7d4c404dd4c1b98a9fe55cdb84cf7
msgid "`More information about GenericSetup dependencies <http://plone.org/products/plone/roadmap/195/>`_."
msgstr ""

#: ../../source/components/genericsetup.rst:199
# 62fe7b90b02e48b4a697815b2bf169fb
msgid "For example, if you want to declare dependency to *collective.basket* add-on product, so that it is automatically installed when your add-on installed you can use the declaration below. This way, you can be sure that all layers, portlets, etc. features which require database changes are usable from *collective.basket* add-on products when your add-on product is run."
msgstr ""

#: ../../source/components/genericsetup.rst:204
# 31cf76ffe4b94a4d8924f14940fe0032
msgid "``metadata.xml``:"
msgstr ""

#: ../../source/components/genericsetup.rst:216
# 419ac8109b9144b4b45fdbf358a5f4d2
msgid "*collective.basket* declares the profile in its configure.zcml:"
msgstr ""

#: ../../source/components/genericsetup.rst:231
# 3d9ef3ff945a489e9bfc120605c5545d
msgid "Unlike other GenericSetup XML files, ``metadata.xml`` is read on the start-up and this read is cached. Always restart Plone after editing ``metadata.xml``. If your ``metadata.xml`` file contains syntax errors or dependencies to a missing or non-existent product (e.g. due to a typo in a name) your add-on will disappear from the installation control panel."
msgstr ""

#: ../../source/components/genericsetup.rst:241
# 186c371572104e98a29b8de4af61cc4f
msgid "The ``Products.*`` Python namespace needs to declare generic setup dependencies specially: You actually do not mention ``Products.xxx`` space."
msgstr ""

#: ../../source/components/genericsetup.rst:245
# c7e1de00c5874c9fad7760f967a9a7aa
msgid "To declare dependency to ``Products.Carousel``:"
msgstr ""

#: ../../source/components/genericsetup.rst:260
# d0d4b92c8788482bbdce4ac6fbe763ed
msgid "Custom installer code (``setuphandlers.py``)"
msgstr ""

#: ../../source/components/genericsetup.rst:262
# 3993de0a7ce240db9c95895573f3390c
msgid "Besides out-of-the-box XML steps which easily provide both install and uninstall, GenericSetup provides a way to run a custom Python code when your add-on product is installed and uninstalled. This is not very straightforward process, though."
msgstr ""

#: ../../source/components/genericsetup.rst:267
# 4ef8383e2b8942768801d4680cdb021b
msgid "The best practice is to create a ``setuphandlers.py`` file which contains function ``setupVarious()`` which runs required Python code to make changes to Plone site object. This function is registerd as a custom ``genericsetup:importStep`` in XML."
msgstr ""

#: ../../source/components/genericsetup.rst:275
# 72aa1afd96db42c3808ad502cf467b08
msgid "When you do custom ``importStep``\\s, remember to write uninstallation code as well."
msgstr ""

#: ../../source/components/genericsetup.rst:278
# 043348318067456c9e73ef5875185cbe
msgid "However, the trick is that all GenericSetup import steps, including your custom step, are run for *every* add-on product when they are installed. Thus, if your need to run code which is specific **during your add-on install only** you need to use a marker text file which is checked by GenericSetup context."
msgstr ""

#: ../../source/components/genericsetup.rst:285
# b38bdd3ce7a3485a8c18aab22140d527
msgid "Also you need to register this custom import step in ``configure.zcml``"
msgstr ""

#: ../../source/components/genericsetup.rst:303
# f07aeeb5d42743cd8237b303c5b04498
msgid "``setuphandlers.py`` example"
msgstr ""

#: ../../source/components/genericsetup.rst:330
# 6f23597c5bfa4aad88df6262b5f449e2
msgid "And add a dummy text file ``your.package/your/package/profiles/default/your.package.marker.txt``::"
msgstr ""

#: ../../source/components/genericsetup.rst:335
#: ../../source/components/genericsetup.rst:346
#: ../../source/components/genericsetup.rst:544
# bb21fe3e84494861a8c0f81096364f51
# c16f654bbb3a48e8b5cbb34ff1776334
# 1cdb4d6b4e054d3594f5ce58b5b1c935
msgid "More information"
msgstr ""

#: ../../source/components/genericsetup.rst:337
# 0916d99935144220a3401df55f12dc32
msgid "http://keeshink.blogspot.com/2009/02/creating-portal-content-in.html"
msgstr ""

#: ../../source/components/genericsetup.rst:339
# 7e950bfef41a474f81af440327f4a540
msgid "http://maurits.vanrees.org/weblog/archive/2009/12/catalog (unrelated, but contains pointers)"
msgstr ""

#: ../../source/components/genericsetup.rst:342
# 56411340e8994097807956586b5c89e1
msgid "Overriding import step order"
msgstr ""

#: ../../source/components/genericsetup.rst:344
# 46abeb72867647bbba1197e23e4a75fd
msgid "You need ``import_steps.xml``."
msgstr ""

#: ../../source/components/genericsetup.rst:348
# 8fd18f394fba4f538b3bc58e27e980c0
msgid "http://plone.293351.n2.nabble.com/Overriding-import-step-order-td2189638.html"
msgstr ""

#: ../../source/components/genericsetup.rst:350
# 75377719df3541189f1f73dbb6cb85ce
msgid "http://dev.communesplone.org/trac/browser/communesplone/urban/trunk/profiles/default/import_steps.xml?rev=5652"
msgstr ""

#: ../../source/components/genericsetup.rst:353
# 585d7f913d62426d9dd9d1dd89ab63f9
msgid "Controlling the import step execution order"
msgstr ""

#: ../../source/components/genericsetup.rst:355
# 87f28e10c6e74cb087960fd941b98c96
msgid "http://plone.293351.n2.nabble.com/indexing-of-content-created-by-Generic-Setup-td4454703.html"
msgstr ""

#: ../../source/components/genericsetup.rst:360
# d40215b2f47544b98f41464facb9d828
msgid "You can define upgrade steps to run code only when someone upgrades your product from version *x* to *y*."
msgstr ""

#: ../../source/components/genericsetup.rst:363
# 11661ee65ed144ff885e1d5c70255187
msgid "As an example, let's say that the new version of YOUR.PRODUCT defines a *price* field on a content type *MyType* to be a string, but previously (version 1.1.  and earlier) it was a float. Code that uses this field and assumes it to be a float will break after the upgrade, so you'd like to automatically convert existing values for the field to string."
msgstr ""

#: ../../source/components/genericsetup.rst:369
# 1c63a0af19c6444988496f4da21467cc
msgid "(Obviously, you could do this very quickly in a simple script, but having a GenericSetup upgrade step means non-technical people can do it as well. As it turns out, once you have the script, it's easy to put its code in an upgrade step.)"
msgstr ""

#: ../../source/components/genericsetup.rst:375
# 24e696907e1f459eb16c0708d0874626
msgid "Increment profile version"
msgstr ""

#: ../../source/components/genericsetup.rst:377
# c5e39245c4c44f4ab757863e038c9cbf
msgid "First increase the number of the version in the ``profiles/default/metadata.xml``. This version number should be an integer. Package version are different because they add sens like the status of the addon: is it stable, is it in dev, in beta, which branch it is. A profile version indicate only that you have to migrate data in the database."
msgstr ""

#: ../../source/components/genericsetup.rst:384
# ab5d063cba8441f68657ea9d860d0348
msgid "Add upgrade step"
msgstr ""

#: ../../source/components/genericsetup.rst:386
# f3ff9e4505fb4da8b8c2884c8052f289
msgid "Next we add an upgrade step:"
msgstr ""

#: ../../source/components/genericsetup.rst:408
# 9bfdfcc05baa481d84ee385b58289fef
msgid "You can use a wildcard character for *source* to indicate an upgrade for any previous version. To run the upgrade step only when upgrading from a specific version, use that version's number."
msgstr ""

#: ../../source/components/genericsetup.rst:412
# 207ccf94076749708778db2ef05e47be
msgid "A *sortkey* can be used to indicate the order in which upgrade steps are run."
msgstr ""

#: ../../source/components/genericsetup.rst:416
# 7117c32651ca489c8cb153411d4bba66
msgid "Add upgrade code"
msgstr ""

#: ../../source/components/genericsetup.rst:418
# 27b395f7c0b249d3a5ec2f7118bb3a02
msgid "The code for the upgrade method itself is best placed in a *upgrades.py* module::"
msgstr ""

#: ../../source/components/genericsetup.rst:459
# 0761cf0f4b904a37be281ccaf0e44ad1
msgid "Other examples of using generic setup to run import steps are below"
msgstr ""

#: ../../source/components/genericsetup.rst:461
# c20b684c022a44a59b9d8e8e2a587784
msgid "If you want to call types.xml use typeinfo::"
msgstr ""

#: ../../source/components/genericsetup.rst:465
# 5b60ea6b9c944d9bbf9869ebbf2c3d8e
msgid "If you want to call workflow.xml use workflow::"
msgstr ""

#: ../../source/components/genericsetup.rst:469
# 5a0513299ef84bb8bbb2f9ec4ee8a084
msgid "The ids of the various default import steps are defined in the import_steps.xml of CMFDefault. visit it at http://svn.zope.org/CMF/branches/2.1/CMFDefault/profiles/default/import_steps.xml?logsort=date&rev=78624&view=markup"
msgstr ""

#: ../../source/components/genericsetup.rst:472
# 008f164064364c708ae40c9dd5870da5
msgid "XXX Fix the link above"
msgstr ""

#: ../../source/components/genericsetup.rst:474
# 42ec8c7b425a4e168e7738893c0fac4d
msgid "After restarting Zope, your upgrade step should be visible in the ZMI: The *portal_setup* tool has a tab *Upgrades*. Select your product profile to see which upgrade steps Zope knows about for your product."
msgstr ""

#: ../../source/components/genericsetup.rst:478
# a4266f7668dd4fcaa6de70d09dec7d04
msgid "You can create many upgrade steps under one migration. This is useful when you want to have the ability to re-run some parts of the migration and make your code more re-useable (for example cook css resource of your theme)."
msgstr ""

#: ../../source/components/genericsetup.rst:482
# 8e038615712c433ba311a5b70b343878
msgid "Here is an example of many upgrade steps you can have to achieve on a site policy:"
msgstr ""

#: ../../source/components/genericsetup.rst:538
# 4f44bc9fcf444c78975da3b7cf978007
msgid "Add-on product appears twice in the installer list"
msgstr ""

#: ../../source/components/genericsetup.rst:540
# 20f3be916b8d4b1cab2524b3da9eafd2
msgid "This happens if you are developing your own add-on and keep changing things. You have an error in your add-on product ZCML code which causes portal_quickinstaller to have two entries."
msgstr ""

#: ../../source/components/genericsetup.rst:546
# 29cde6ce9ab94566b67de195e02cec8b
msgid "http://plone.293351.n2.nabble.com/Product-twice-in-quickinstaller-td5345492.html#a5345492"
msgstr ""

#: ../../source/components/genericsetup.rst:549
# f6099172b38140d5b3ace7481e9085c4
msgid "Preventing uninstall"
msgstr ""

#: ../../source/components/genericsetup.rst:551
# d34a3a0995e84aa4bcac3e20093648f0
msgid "You might want to prevent your add-on product uninstall for some reason."
msgstr ""

#: ../../source/components/genericsetup.rst:553
# f03fd76088aa409d9db7c47e159fd460
msgid "Example:"
msgstr ""

#: ../../source/components/genericsetup.rst:566
# cc101bddc024436985fc853d7276d7f7
msgid "This example if for Extensions/install.py, old Plone 2 way of writing installers"
msgstr ""

#: ../../source/components/genericsetup.rst:571
# 0fcf3135e2554538b0d82f20298426a3
msgid "Plone GenericSetup Reference"
msgstr ""

#: ../../source/components/genericsetup.rst:574
# eb5e9687357840338bbf30cf604f3993
msgid "portlets.xml"
msgstr ""

#: ../../src/plone.app.portlets/plone/app/portlets/exportimport/portlets.py:docstring of plone.app.portlets.exportimport.portlets:1
# 1c0b1da18a3f4794b976896a92acaf9b
msgid "When creating custom portlet managers, you will need to extend existing portlets to be addable to that manager: ::"
msgstr ""

#: ../../src/plone.app.portlets/plone/app/portlets/exportimport/portlets.py:docstring of plone.app.portlets.exportimport.portlets:8
# 00689ee23fe14b8db565d2fbac13db0d
msgid "You can also change the title and description of the portlet with the extend attribute: ::"
msgstr ""

#: ../../src/plone.app.portlets/plone/app/portlets/exportimport/portlets.py:docstring of plone.app.portlets.exportimport.portlets:17
# 8da885e6d4484ba3963a59fc1f94fdd6
msgid "Remove a portlet definition using the 'remove' attribute so that it can no longer be added via @@manage-portlets. This does not remove any assignments: ::"
msgstr ""

#: ../../source/components/genericsetup.rst:579
# ece536591f53452e84384f35ad60b4c9
msgid "viewlets.xml"
msgstr ""

#: ../../src/plone.app.viewletmanager/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:1
# 6928a445641a4335b0639888db80b9f5
msgid "The following examples would all be added into the viewlets.xml file."
msgstr ""

#: ../../src/plone.app.viewletmanager/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:3
# 2ae70bbc3a2c4953bdb910547e5a49e4
msgid "Re-order viewlets::"
msgstr ""

#: ../../src/plone.app.viewletmanager/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:11
# 81ab486f05e34cfd90fd44b0e5e56fc8
msgid "Move a viewlet using insert-before and insert-after (this will only affect the skinname that is specified, in this case 'My Custom Theme')::"
msgstr ""

#: ../../src/plone.app.viewletmanager/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:20
# d39f39009d9042fca23cc4ef1b0cf544
msgid "Hide a viewlet (here we hide the colophon for 'My Custom Theme')::"
msgstr ""

#: ../../src/plone.app.viewletmanager/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:27
# 9bb1dd636ccb4fda94c18d05e9b57d5f
msgid "Unhide a specific viewlet using the remove attribute::"
msgstr ""

#: ../../src/plone.app.viewletmanager/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:34
# 9bdd4bfe956a44a493fa36f55b584f17
msgid "Unhide all viewlets for a given manager using the purge attribute::"
msgstr ""

#: ../../src/plone.app.viewletmanager/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:39
# faac6f44fd7f446597cc66f1d308ce6c
msgid "Hide a viewlet for all skins::"
msgstr ""

#: ../../src/plone.app.viewletmanager/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:45
# f8638d11a78a4ea8bf44e97d42d4b213
msgid "Pro Tip: Using skinname=\"*\" currently only works if the manager has already been registered in each skin (see Plone Trac ticket #7166)"
msgstr ""

#: ../../source/components/genericsetup.rst:584
# 227c93a06877480e9dda11495920d9bd
msgid "cssregistry.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:586
#: ../../source/components/genericsetup.rst:591
#: ../../source/components/genericsetup.rst:596
# 435c29a73a9b421cb2294be7f093a10c
# ba81556871754adf8459183bbf33a505
# f95ac3b732b84969b33f9e6b9760ae1b
msgid "see :ref:`resourceregistries`"
msgstr ""

#: ../../source/components/genericsetup.rst:589
# 3192d009cbeb4dd288220674acfc0615
msgid "jsregistry.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:594
# 7ecda7413a6144aab646b1a0cdaedd7a
msgid "kssregistry.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:601
# 852f8475408b4b829456a8a2102d782d
msgid "Resource Registries"
msgstr ""

#: ../../source/components/genericsetup.rst:607
# c4e84cab2de24492bc0f8540e7636459
msgid "Content Generation"
msgstr ""

#: ../../src/Products.GenericSetup/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content:1
# f77dc4dcb0cb4ad7887f11de4fa1d585
msgid "Filesystem exporter / importer adapters."
msgstr ""

#: ../../src/Products.GenericSetup/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:1
# a81a6a2af48748f7838f8e829d60a9fd
msgid "Tree-walking exporter / importer for \"folderish\" types."
msgstr ""

#: ../../src/Products.GenericSetup/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:3
# cd793cb5d87a4f3b8c729a5b08b55508
msgid "Folderish instances are mapped to directories within the 'structure' portion of the profile, where the folder's relative path within the site corresponds to the path of its directory under 'structure'."
msgstr ""

#: ../../src/Products.GenericSetup/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:7
# 64b70cce2b024bf08b407d96baa1f558
msgid "The subobjects of a folderish instance are enumerated in the '.objects' file in the corresponding directory.  This file is a CSV file, with one row per subobject, with the following wtructure::"
msgstr ""

#: ../../src/Products.GenericSetup/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:13
# 7f1f140ba21d4981b72693aeadf7cc57
msgid "Subobjects themselves are represented as individual files or subdirectories within the parent's directory."
msgstr ""

#: ../../src/Products.GenericSetup/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter.export:1
#: ../../src/Products.GenericSetup/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter.listExportableItems:1
# 677f2bd1cabb4f0caad104a26c286489
# 765492dc00ee471daac70e39a554b9b9
msgid "See IFilesystemExporter."
msgstr ""

#: ../../src/Products.GenericSetup/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter.import_:1
# 0243ae019ec646f4bb34ddf8c811f19d
msgid "See IFilesystemImporter."
msgstr ""

#: ../../source/components/genericsetup.rst:614
# 6a3db64303234d59931b945e2382df70
msgid "Generic Setup files"
msgstr ""

#: ../../source/components/genericsetup.rst:617
# 95dbc62be4934c97932fb8133e0f7662
msgid "sharing.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:619
# ec3a6546a9ea46ad97f4226ea62aa2e6
msgid "The sharing.xml file let you add custom roles to the sharing tab. For reference, visit: :doc:`Local Roles </security/local_roles>`."
msgstr ""

#: ../../source/components/genericsetup.rst:623
# b67e03b904924a7cad8b82712c44dfea
msgid "tinymce.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:626
# 3a285021df6944bc9fbf477cb3ad8036
msgid "propertiestool.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:627
# 08eebc8141d046179d41ef5c61357f03
msgid "In the propertiestool.xml you can change all values of the portal_properties."
msgstr ""

#: ../../source/components/genericsetup.rst:629
# cfb0116fcbb34a47ba13d747e510110e
msgid "take a look at: http://plone.org/documentation/manual/developer-manual/generic-setup/reference/properties-ref"
msgstr ""

#: ../../source/components/genericsetup.rst:632
# 2f1e27e9ac8c4e71a6815ff855bd446b
msgid "metadata.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:635
# 7a581868701046c0a6251e6428294e5a
msgid "actions.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:638
# 03213f65c25844998f0a960e77380ff5
msgid "skins.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:641
# 0d1a9ac98457408b86c87d4ebccd46cb
msgid "workflows.xml"
msgstr ""

#: ../../src/Products.DCWorkflow/Products/DCWorkflow/exportimport.py:docstring of Products.DCWorkflow.exportimport:1
# ee2eb1817fcb4f4cb3b014b7c3d13c04
msgid "DCWorkflow export / import support."
msgstr ""

#: ../../src/Products.DCWorkflow/Products/DCWorkflow/exportimport.py:docstring of Products.DCWorkflow.exportimport:3
# 9ec50bdca9c24b5583d48f6e11ac4d27
msgid "$Id: exportimport.py 121521 2011-05-03 13:13:36Z erico_andrei $"
msgstr ""

#: ../../source/components/genericsetup.rst:646
# 31b7f468701c4ed38ea887124a14103e
msgid "repositorytool.xml"
msgstr ""

#: ../../src/Products.CMFEditions/Products/CMFEditions/exportimport/repository.py:docstring of Products.CMFEditions.exportimport.repository.RepositoryToolXMLAdapter:1
# b1db02c5b23d4ebdb0269ff83954b1e5
msgid "Mode in- and exporter for RepositoryTool."
msgstr ""

#: ../../source/components/genericsetup.rst:652
# e2e9afcbd82449a9a2fafaa29c23f015
msgid "contentrules.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:658
# f9d61267ab3e49eab74e5ce02df29c08
msgid "pluginregistry.xml"
msgstr ""

#: ../../source/components/genericsetup.rst:660
# f040a59aa08544b3a63ccd80a72d98a6
msgid "This configures PAS plugin orderings and active plugins. It isn't part of Plone itself, it is used by other frameworks and can be used in Plone with a little extra configuration."
msgstr ""

#: ../../source/components/genericsetup.rst:664
# e5e7df18d43d407cb333b49955b128a3
msgid "First, you need a monkey patch in your ``__init__.py``` to point the importer at where Plone keeps its PAS plugins."
msgstr ""

#: ../../source/components/genericsetup.rst:675
# 8db85190b93a41aabda6874c79a3da86
msgid "Secondly, code to handle the import step needs to be activated in Plone:"
msgstr ""

#: ../../source/components/genericsetup.rst:686
# f58a7f3a295b4ee5a03a44fd7bb2d4cf
msgid "Now you can use ``pluginregistry.xml`` in your generic setup profiles:"
msgstr ""

#: ../../source/components/genericsetup.rst:733
# 3e549dc4d088460583d6c0d307ec53a2
msgid "Best Practices"
msgstr ""

#: ../../source/components/genericsetup.rst:735
# e66b1b7e759f4910ad197264da69787b
msgid "When importing items such as property sheets, make sure not to override other profile settings by setting the purge attribute to False. This will add the items listed to the property instead of resetting the property. Example:"
msgstr ""

#: ../../source/components/genericsetup.rst:747
# 6b49c55b541e4992833740052b954e36
msgid "Only use the configuration that you need. When you export your site's configuration, it will include things that you don't need. For example, if you needed to change only the 'Allow anonymous to view about' property, this is what your propertiestool.xml would look like:"
msgstr ""

#: ../../source/components/grok.rst:3
# 52a3db80d56c4dcb9bda2f11d3f1633b
msgid "Grok framework"
msgstr ""

#: ../../source/components/grok.rst:7
# 0476945611634ce4b65eac4de8d1e269
msgid "Using Grok framework in Plone programming. Grok provides  Dont-Repeat-Yourself API to create Zope 3 components easier."
msgstr ""

#: ../../source/components/grok.rst:16
# ec554392ebc645e881d9ef6572d71864
msgid "Grok is a project to give sane, easy to use, API to Zope 3 systems. It exists as standalone, but Plone compatible port five.grok is available for Plone 3.3 and onwards."
msgstr ""

#: ../../source/components/grok.rst:19
# 44977b1724464f1fbaedcebf559159d7
msgid "Benefits over using pure Zope 3 APIs"
msgstr ""

#: ../../source/components/grok.rst:21
# 318f91454d0642ce84f0fcba15d2ecd5
msgid "No ZCML files or XML sit-ups needed (except bootstrapping one configure.zcml file)"
msgstr ""

#: ../../source/components/grok.rst:23
# af542a891b2241b486dd5b8182a7989e
msgid "More things are automatic and less explicit hand-written code needed. E.g. template file and view class are automatically matched."
msgstr ""

#: ../../source/components/grok.rst:25
# cfc9ea9294fa4edeaa511fa93b463ae6
msgid "Less code generation"
msgstr ""

#: ../../source/components/grok.rst:27
# aa50ffc610c04886bff5f1a628af2701
msgid "Grok will automatically scan all .py files in your product and run registration code in them. This way you can use Python decorators and magical classes to perform tasks which before needed to have hand written registration code."
msgstr ""

#: ../../source/components/grok.rst:34
# 89bfef60b45945ad811d531bc27a7531
msgid "http://grok.zope.org/"
msgstr ""

#: ../../source/components/grok.rst:36
# f1148e817efd46fe80706be794768700
msgid "http://pypi.python.org/pypi/five.grok"
msgstr ""

#: ../../source/components/grok.rst:39
# f53769b26a624132896ff51cdf00c449
msgid "Tutorial"
msgstr ""

#: ../../source/components/grok.rst:41
# e47cc5874b02451e916853d35b44ed32
msgid "http://plone.org/products/dexterity/documentation/manual/five.grok"
msgstr ""

#: ../../source/components/grok.rst:43
# 11a6d1acd7a7410f9af5fed9678e2fe4
msgid "http://www.martinaspeli.net/articles/using-grok-techniques-in-plone"
msgstr ""

#: ../../source/components/grok.rst:46
# d8efd2cc985b4aad957551fcf1fd9978
msgid "Using Grok in your package"
msgstr ""

#: ../../source/components/grok.rst:49
# b7c241a1d03a4e1987a4927383104938
msgid "configure.zcml - register your package for grokking"
msgstr ""

#: ../../source/components/grok.rst:51
# c7d1ce616182456684960d5deba22120
msgid "To enable grok'ing for your package:"
msgstr ""

#: ../../source/components/grok.rst:53
# 53df75d83fc34ec2884c4ba206c16d2f
msgid "The top-level ``configure.zcml`` must include the ``grok`` namespace and the ``grok:grok`` directive. You do not need to put this directive subpackages. This directive scans your package source tree recursively for grok'ed files."
msgstr ""

#: ../../source/components/grok.rst:58
# 237df5605cec4b91a39eb075344e62b3
msgid "The package must be loaded using ``setup.py`` auto-include, NOT using a ``zcml =`` section in ``buildout.cfg``. Otherwise templates are not loaded."
msgstr ""

#: ../../source/components/grok.rst:62
# bd794731f8ed4afbad8893e4d4091049
msgid "Optionally, add ``templates`` and ``static`` folders to your package root."
msgstr ""

#: ../../source/components/grok.rst:64
# a27fd3d7c5d5402b9d764249aad86957
msgid "You still need to include subpackages for old-fashioned :term:`ZCML` configurations."
msgstr ""

#: ../../source/components/grok.rst:67
# 3d9f931b96b04d969cc0150738df8c71
msgid "Example"
msgstr ""

#: ../../source/components/grok.rst:90
# 15e67f002aca4e79bcfa21ac183d193f
msgid "If you are using components from other packages you might also want to add"
msgstr ""

#: ../../source/components/grok.rst:96
# f28cae9fdde84911943b4dd8a1b41356
msgid "This makes the ``configure.zcml`` and thus Python code of all modules listed in ``setup.py`` *install_requires* section is loaded before your module is being processed."
msgstr ""

#: ../../source/components/grok.rst:101
# da273b531b6645a7ad0ff8a50d6345a2
msgid "setup.py - include five.grok package dependency for download"
msgstr ""

#: ../../source/components/grok.rst:103
# c70db8e7ed744325a183032639b5ba8d
msgid "You still need to get ``five.grok`` package to your buildout."
msgstr ""

#: ../../source/components/grok.rst:105
# aa968136a9c14486a327dde29f84ace5
msgid "Edit your Python egg ``setup.py`` file and list ``five.grok`` as dependency::"
msgstr ""

#: ../../source/components/grok.rst:109
# 9c3aa37b5b994dd681f232d1314eaad6
msgid "Re-run buildout. Now buildout should download ``five.grok`` for PyPi and activate it for you."
msgstr ""

#: ../../source/components/grok.rst:111
# 1439825a6c9247a09d2621bb6ff26eb3
msgid "If you are using Plone 4.1 or older you also need `Dexterity extends = line pindowns in your buildout <http://plone.org/products/dexterity/documentation/how-to/install>`_. Otherwise you may get *Version Conflict* errors when running buildout."
msgstr ""

#: ../../source/components/grok.rst:115
# 016975e60cb340f584d46a6f95d687ab
msgid "Plone 4.3 migration and five.grok dependency"
msgstr ""

#: ../../source/components/grok.rst:117
# 22ed098f33cc4447b6378668fda2bc09
msgid "Please see `Plone 4.2 -> 4.3 Dexterity upgrade guide <http://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-4.2-to-4.3/dexterity-optional-extras>`_ first."
msgstr ""

#: ../../source/components/grok.rst:120
# 81869647c6414da5b2ac3e6333e6266b
msgid "Migrating Dexterity and z3c.forms to Plone 4.3"
msgstr ""

#: ../../source/components/grok.rst:122
# 15a869f8e8c24ba69aded801001acbaf
msgid "Plone 4.3 ships with Dexterity. ``five.grok`` is a huge dependency with a lot of code of which maintenance cannot be guaranteed in the future (`See grok.zope.org <http://grok.zope.org>`_, `discussion <http://plone.293351.n2.nabble.com/The-grokless-madness-and-unable-to-create-a-simple-form-tp7564179p7564184.html>`_). Because Plone community cannot commit to maintain this code, but we still want to use the best goodies of grok based development, some compromises was made for Plone 4.3 regarding grok style forms and directives."
msgstr ""

#: ../../source/components/grok.rst:128
# b29f1410f47a45ffb763af2fb8beb5d2
msgid "You can include ``five.grok`` as a dependency, as you have done this far, but it is not going to be in Plone default installation in foreseeable future. Please see migration notes."
msgstr ""

#: ../../source/components/grok.rst:131
# b7a6ae48a2c646c18f9fd41d59356ccd
msgid "``grok()`` declarations, like ``grok.name()`` in classes are not supported by Plone 4.3 out of the box"
msgstr ""

#: ../../source/components/grok.rst:133
# c7c96de9b68b44769d6dcd9d78c1678c
msgid "``plone.directives.form`` goodies distributed to two supported packages: ``plone.supermodel`` and ``plone.autoform``"
msgstr ""

#: ../../source/components/grok.rst:136
# baa7428c1ea444c9845c87610376b2e9
msgid "To make your code Plone 4.3 compatible, grokless way do imports as following::"
msgstr ""

#: ../../source/components/grok.rst:144
# 605b6e6daa5e41e2a9c230b4fc6ac604
msgid "And you can use them like::"
msgstr ""

#: ../../source/components/grok.rst:163
# 4ceb8c51ec88413e815a6cb926228b4c
msgid "Migrating views from five.grok to plain Plone"
msgstr ""

#: ../../source/components/grok.rst:165
# 80efff5888544f1c9e508c44d703de37
msgid "If you further want to break the dependency with ``five.grok`` and get rid of ``grok.xxx()`` directives in your classes here are further dependency."
msgstr ""

#: ../../source/components/grok.rst:169
# 71d65cf7f2d94e7195a9ac6e98b141c8
msgid "Remove ``five.grok`` from the dependency list of your egg and remove ``<grok:grok>`` ZCML directive in ``configure.zcml``."
msgstr ""

#: ../../source/components/grok.rst:171
# 6a669b2df370436c8d86b41aa0f9a450
msgid "Remove ``from five import grok`` in all of your package modules."
msgstr ""

#: ../../source/components/grok.rst:173
# 83aca94bb1f247838e22c25d3b049b3e
msgid "Manually :doc:`register static media folder of your egg </templates_css_and_javascripts/resourcefolders>`"
msgstr ""

#: ../../source/components/grok.rst:175
# afa26d9409ee4101a2a93a19b16d5a84
msgid "Declare views and forms using `configure.zcml <http://developer.plone.org/views/browserviews.html#creating-a-view-using-zcml>`_"
msgstr ""

#: ../../source/components/grok.rst:177
# 7dc42be0b54246a786fb34478635768b
msgid "Remove ``grok.templatedir()`` and map view classes to templates using ``<browser:page>`` ZCML directive."
msgstr ""

#: ../../source/components/grok.rst:179
# 78509c50a0114f5aa5e7536348f18e10
msgid "Grok migration source example::"
msgstr ""

#: ../../source/components/grok.rst:194
# 445530bb85cb44e7b5cb7ab30e5503bd
msgid "ZCML migration ``configuration.zcml`` target example::"
msgstr ""

#: ../../source/components/grok.rst:216
# 6e96646f6e5a4de7942a3dc0fdcc8e6d
msgid "Forms handle ``update()`` themselves - this concerns only non-form views"
msgstr ""

#: ../../source/components/grok.rst:218
# 8dd690166b3b4a55a8c815cf5b3c7f4e
msgid "If your view has ``update()`` method you need to call it manually in ``__call__()`` because ``BrowserView`` base class doesn't do this."
msgstr ""

#: ../../source/components/grok.rst:221
# 9f09a1d9557d4b62b525b66df40bafcc
msgid "class MyView(BrowserView):"
msgstr ""

#: ../../source/components/grok.rst:224
# ddb7b6c181f04ee3b9da0c2a1aaa9068
msgid "..."
msgstr ""

#: ../../source/components/grok.rst:227
# 1763faeef19144008e5722dcd82d25b0
msgid "self.update() return self.index()  # Or self.render() for grok.CodeView"
msgstr ""

#: ../../source/components/grok.rst:233
# 5063c16a1e0447549d4afa18d7039b11
msgid "Tutorials"
msgstr ""

#: ../../source/components/grok.rst:235
# 237412d2033b44cd8b4b48362e931ece
msgid "http://plone.org/products/dexterity/documentation/manual/five.grok/background/adding-five.grok-as-a-dependency"
msgstr ""

#: ../../source/components/grok.rst:237
# eab6f7a14ec64a1891690a56b6d58ca8
msgid "Steps:"
msgstr ""

#: ../../source/components/grok.rst:239
# 4ed9e77cf1ac4a2eb981f1958aa61e69
msgid "Add dependencies to your ``setup.py``."
msgstr ""

#: ../../source/components/grok.rst:241
# d38f3c4a48b744509c100453ad3ba53f
msgid "Edit ``buildout.cfg`` to include the good known version set."
msgstr ""

#: ../../source/components/grok.rst:243
# a2ae14407f6044c5ab594fa99c4bc8d6
msgid "Add the ``grok`` :term:`ZCML` directive to ``configure.zcml``."
msgstr ""

#: ../../source/components/index.rst:3
# 22a048e1be244d97a33ac2709c9da67a
msgid "Component architecture"
msgstr ""

#: ../../source/components/index.rst:8
# 6c871447be544caea01997011de52529
msgid "Plone logic is wired together by Zope 3 component architecture. It provides \"enterprise business logic\" engine for Plone."
msgstr ""

#: ../../source/components/index.rst:11
# f3384faf331e458081f59f16bd83a596
msgid "The architecture provides pluggable system :doc:`interfaces </components/interfaces>`, adapters, utilities and registries. The wiring of components is done on XML based language called :doc:`ZCML </components/zcml>`."
msgstr ""

#: ../../source/components/index.rst:17
# 889e55fcb26f4e198b8b4cd615f2bed0
msgid "Grok - wrapper around Z3"
msgstr ""

#: ../../source/components/index.rst:19
# e21ad4e142314331b449823392bcc307
msgid "On Z3 component layer there exist higher level framework called :doc:`Grok </components/grok>` which gives you a way to automatic scan Python modules for decorators and directives without the need off manually writing ZCML code or Python to register your business logic."
msgstr ""

#: ../../source/components/index.rst:24
# 383a7c9939df42b5b4074a0dd986638f
msgid "Database drops using Generic setup"
msgstr ""

#: ../../source/components/index.rst:26
# a96a15917ed540829adbeefb2bd32bde
msgid "Zope 3 components act on Python codebase level which is shared by all sites in the same Zope application server process. When you install new add-ons to Plone site, the add-ons modify the site database using :doc:`GenericSetup </components/genericsetup>` framework. GenericSetup is mostly visible as */profiles/default* folder and its XML files in your add-on."
msgstr ""

#: ../../source/components/index.rst:35
# a86f1cf53fcf47c883301e92f3257371
msgid "http://www.muthukadan.net/docs/zca.html"
msgstr ""

#: ../../source/components/interfaces.rst:3
# ac16781c45764f55ba28c800e7a88b34
msgid "Interfaces"
msgstr ""

#: ../../source/components/interfaces.rst:10
# 16ec5a2117194d1d868eab95c5855f17
msgid "Interfaces define what methods an object provides. Plone extensively uses interfaces to define APIs between different subsystems. They provide a more consistent and declarative way to define bridges between two different things, when duck-typing is not enough."
msgstr ""

#: ../../source/components/interfaces.rst:16
# 4ba0b23a54ef4368a9f807a8bda452b9
msgid "An interface defines the shape of a hole where different pieces fit. The shape of the piece is defined by the interface, but the implementation details like color, material, etc. can vary."
msgstr ""

#: ../../source/components/interfaces.rst:20
# 6f35679c92744aa89dc7d0a70dd1adca
msgid "See `zope.interface package README <http://pypi.python.org/pypi/zope.interface>`_."
msgstr ""

#: ../../source/components/interfaces.rst:23
# ccd14001392349baab9b9e0ebef75cd4
msgid "Common interfaces"
msgstr ""

#: ../../source/components/interfaces.rst:25
# 2a0ba64ec400408e8fb3a6d40a22246d
msgid "Some interfaces are commonly used throughout Plone."
msgstr ""

#: ../../source/components/interfaces.rst:27
# d6914a44fc7d4b798f47119fb04456ad
msgid "The usual use case is that a :doc:`context directive for a view </views/browserviews>` is provided, specifying where the view is available (e.g. for which content types)."
msgstr ""

#: ../../source/components/interfaces.rst:33
# b8640623823f4757bf1aed6bfc5b1adb
msgid "Base class of all interfaces. Also used as a ``*`` wildcard when registering views, meaning that the view applies on every object."
msgstr ""

#: ../../source/components/interfaces.rst:37
# a01c9749eb274251a699db97ba62c1f5
msgid "All *content* items on the site. In the site root, this interface excludes Zope objects like ``acl_users`` (the user folder) and ``portal_skins`` which might otherwise appear in the item listing when you iterate through the root content."
msgstr ""

#: ../../source/components/interfaces.rst:44
# 77b2857a09064074b1a20facd605e126
msgid "All *folders* in the site."
msgstr ""

#: ../../source/components/interfaces.rst:47
# b03d58cb51a4417aa88593635947ac9f
msgid "The Plone site root object."
msgstr ""

#: ../../source/components/interfaces.rst:50
# b19edbf420404d70844d48c897b15bff
msgid "Navigation top object - where the breadcrumbs are anchored. On multilingual sites, this is the top-level folder for the current language."
msgstr ""

#: ../../source/components/interfaces.rst:56
# 19ea97becdf04c1c98029241d36c13bd
msgid "Implementing one or multiple interfaces"
msgstr ""

#: ../../source/components/interfaces.rst:58
# 086cdcfe9d33472e99e596563bb7b212
msgid "Use ``zope.interface.implements()`` in your class body. Multiple interfaces can be provided as arguments."
msgstr ""

#: ../../source/components/interfaces.rst:73
# de22b7d1a2d945ee967ba62f2e8aa316
msgid "Removing parent class interface implementations"
msgstr ""

#: ../../source/components/interfaces.rst:75
# d05849e735db4dd2a526e02ce841e9c9
msgid "``implementsOnly()`` redeclares all inherited interface implementations. This is useful if you, for example, want to make :doc:`z3c.form </forms/z3c.form>` widget bindings more accurate."
msgstr ""

#: ../../source/components/interfaces.rst:85
# 30d7c3d1f950459ab4b381cb4e9dc941
msgid "Checking whether object provides an interface"
msgstr ""

#: ../../source/components/interfaces.rst:88
# ac72d914ec8c4b7e8d5c3b888b799752
msgid "``providedBy``"
msgstr ""

#: ../../source/components/interfaces.rst:90
# ea483767d7d84bec89dbc841e99b97f6
msgid "In Python you can use code::"
msgstr ""

#: ../../source/components/interfaces.rst:100
# b75619bfe2d04f8c96dc835dc86a0727
msgid "``plone_interface_info``"
msgstr ""

#: ../../source/components/interfaces.rst:102
# c9e4615da38148eaa04a1593b5a6b8cd
msgid "In page templates you can use ``plone_interface_info`` helper view::"
msgstr ""

#: ../../source/components/interfaces.rst:112
# fbc2b0622b89415f803bbdacbe9c1714
msgid "https://github.com/plone/plone.app.layout/tree/master/plone/app/layout/globals/interface.py"
msgstr ""

#: ../../source/components/interfaces.rst:116
# ccb2cdfa775944499f8df1926c492659
msgid "Interface resolution order"
msgstr ""

#: ../../source/components/interfaces.rst:118
# 34bfa7d132d5459899af9816595580d1
msgid "Interface resolution order (IRO) is the list of interfaces provided by the object (directly, or implemented by a class), sorted by priority."
msgstr ""

#: ../../source/components/interfaces.rst:121
# 86b5c75ecde94a8788dd11c5413f0cf7
msgid "Interfaces are evaluated from zero index (highest priority) to the last index (lowest priority)."
msgstr ""

#: ../../source/components/interfaces.rst:124
# f77ba87527e44d6087bc429545037ef6
msgid "You can access this information for the object for debugging purposes using a magical attribute::"
msgstr ""

#: ../../source/components/interfaces.rst:131
# 57dd3aabced241848553e86d86bc38a3
msgid "Since adapter factories are *dynamic* (adapter interfaces not hardcoded on the object), the object can still adapt to interfaces which are not listed in ``__iro__``."
msgstr ""

#: ../../source/components/interfaces.rst:137
# c6eb718e344543e39ea81b652bd4833e
msgid "Getting interface string id"
msgstr ""

#: ../../source/components/interfaces.rst:139
# 4cd1894e5e17496f87daea281bd25122
msgid "The interface id is stored in the ``__identifier__`` attribute."
msgstr ""

#: ../../source/components/interfaces.rst:141
# 549fecf13e4549c3a8d62c6f6a4e02d0
msgid "Example file ``yourpackage/interfaces.py``::"
msgstr ""

#: ../../source/components/interfaces.rst:152
# d14694c28ec54d2f8f0bf15ca0942c4f
msgid "Note that this attribute does not respect import aliasing."
msgstr ""

#: ../../source/components/interfaces.rst:154
# 382a050ebcfc44e3ad4a66b7984e1550
msgid "Example: ``Products.ATContentTypes.interfaces.IATDocument.__identifier__`` is ``Products.ATContentTypes.interfaces.document.IATDocument``."
msgstr ""

#: ../../source/components/interfaces.rst:158
# b616bf1c716a4c6cae34c5316dbb937d
msgid "Getting interface class by its string id"
msgstr ""

#: ../../source/components/interfaces.rst:160
# c05d288714554e3ca3917aeb9fcc1aa7
msgid "Use the `zope.dottedname`_ package."
msgstr ""

#: ../../source/components/interfaces.rst:176
# 5531a1f8e969403bb3fc00ab33b3d2fb
msgid "Applying interfaces for several content types"
msgstr ""

#: ../../source/components/interfaces.rst:178
# 15090c34c1834a908437549c52c48ae0
msgid "You can apply marker interfaces to content types at any time."
msgstr ""

#: ../../source/components/interfaces.rst:180
# 1b22ce65d36840288d8717fbf99c3e37
msgid "Example use cases:"
msgstr ""

#: ../../source/components/interfaces.rst:182
# 0b9dd7e1bb2640b2914eb430c097d033
msgid "You want to assign a viewlet to a set of particular content types."
msgstr ""

#: ../../source/components/interfaces.rst:184
# 4f10f578990f421a998c53b662b60fa2
msgid "You want to enable certain behavior on certain content types."
msgstr ""

#: ../../source/components/interfaces.rst:188
# d53dec14c86e4c4786ea7a833c4aea7c
msgid "A marker interface is needed only when you need to create a common nominator for several otherwise unrelated classes. You can use one existing class or interface as a context without explicitly creating a marker interface. Places accepting ``zope.interface.Interface`` as a context usually accept a normal Python class as well (``isinstance`` behavior)."
msgstr ""

#: ../../source/components/interfaces.rst:195
# c30b27e556b545b09b28ad4a68d694e0
msgid "You can assign the marker interface for several classes in ZCML using a ``<class>`` declaration. Here we're assigning ``ILastModifiedSupport`` to documents, events and news items:"
msgstr ""

#: ../../source/components/interfaces.rst:215
# 2f20412460a44d8aae793088a8bb74e0
msgid "Then we can have a viewlet for these content types only using the following (grok example)::"
msgstr ""

#: ../../source/components/interfaces.rst:232
# 99163f22249d43b5b56cf8f5c945f239
msgid "Related:"
msgstr ""

#: ../../source/components/interfaces.rst:234
# c7f0a7baa2904eeb99aaa28266aba22d
msgid "`zope.dottedname`_ allows you to resolve dotted names to Python objects manually"
msgstr ""

#: ../../source/components/interfaces.rst:238
# 948aab52fcec4ea88a40551c892f7c9c
msgid "Dynamic marker interfaces"
msgstr ""

#: ../../source/components/interfaces.rst:240
# 7135fb6fb6e541a2b44e6273bcfc9f72
msgid "Zope allows to you to dynamically turn on and off interfaces on any content objects through the :term:`ZMI`. Browse to any object and visit the :guilabel:`Interfaces` tab."
msgstr ""

#: ../../source/components/interfaces.rst:244
# 774135dd65b4450c98535d365e9d8ae2
msgid "Marker interfaces might need to be explicitly declared using the :term:`ZCML` ``<interface>`` directive, so that Zope can find them:"
msgstr ""

#: ../../source/components/interfaces.rst:254
# a5e78ce749044e1aa97eb1fec99c198e
msgid "The interface dotted name must refer directly to the interface class and not to an import from other module, like ``__init__.py``."
msgstr ""

#: ../../source/components/interfaces.rst:258
# 1707e73793aa4a16b8e83dcd9078f1de
msgid "Setting dynamic marker interfaces programmatically"
msgstr ""

#: ../../source/components/interfaces.rst:260
# 92982aa44e7844399d465c0dfc21e405
msgid "Use the ``mark()`` function from `Products.Five`_."
msgstr ""

#: ../../source/components/interfaces.rst:270
# e55f634d9e1246fcaaf19a3162b68608
msgid "This marking persists with the object: it is not temporary."
msgstr ""

#: ../../source/components/interfaces.rst:272
# 3771f78ea3bc4af9835a3aa7a5dd6713
msgid "Under the hood: ``mark()`` delegates to ``zope.interface.directlyProvides()`` |---| with the result that a persistent object (e.g. content item) has a reference to the interface class you mark it with in its ``__provides__`` attribute; this attribute is serialized and loaded by ZODB like any other reference to a class, and `zope.interface`_ uses object specification descriptor magic (just like it does for any other object, persistent or not) to resolve provided interfaces."
msgstr ""

#: ../../source/components/interfaces.rst:283
# 9461f44f0ae64b7f8279f9de51393e53
msgid "To remove a marker interface from an object, use the ``erase()`` function from `Products.Five`_."
msgstr ""

#: ../../source/components/interfaces.rst:294
# 30b4a17241eb4d9baee37b464a714d67
msgid "Tagged values"
msgstr ""

#: ../../source/components/interfaces.rst:296
# 1d1d1c66bed54e5db8b1445b3c247803
msgid "Tagged values are arbitrary metadata you can stick on ``zope.interface.Interface`` subclasses. For example, the `plone.autoform`_ package uses them to set form widget hints for `zope.schema`_ data model declarations."
msgstr ""

#: ../../source/components/utilities.rst:3
# af5033ca772740388520061c6ded6713
msgid "Utilities"
msgstr ""

#: ../../source/components/utilities.rst:7
# 446af32595204b4f944eab194df074da
msgid "Utility design pattern in Zope 3 allows easily overridable singleton class instances for your code."
msgstr ""

#: ../../source/components/utilities.rst:15
# d4e5dec2d94746beaac5d90e9dce4dcc
msgid "Utility classes provide site-wide utility functions."
msgstr ""

#: ../../source/components/utilities.rst:17
# a911e30014394f788e1d62547830794a
msgid "They are registered by marker interfaces."
msgstr ""

#: ../../source/components/utilities.rst:19
# 486db18236524f18aa74661c9b02a06d
msgid "Site customization logic or add-on products can override utilities for enhanced or modified functionality"
msgstr ""

#: ../../source/components/utilities.rst:22
# 0f661d1156f7499aa58fd2668fa54838
msgid "Utilities can be looked up by name or interface"
msgstr ""

#: ../../source/components/utilities.rst:24
# d99b7f85222748aa9e6e1adc4cbc0751
msgid "Compared to \"plain Python functions\", utilities provide the advantage of being plug-in points without need of :doc:`monkey-patching </misc/monkeypatch>`."
msgstr ""

#: ../../source/components/utilities.rst:28
# c65c58316c9346448e932d95a2df1ae5
msgid "Read more in"
msgstr ""

#: ../../source/components/utilities.rst:30
# 564cceeb1ee048eb89f37a55d2d95b38
msgid "http://plone.org/products/dexterity/documentation/manual/five.grok/core-components/utilities"
msgstr ""

#: ../../source/components/utilities.rst:32
# ca3c5e9d7d684ed8b09b937ad05ed04d
msgid "`zope.component documentation <http://apidoc.zope.org/++apidoc++/Code/zope/component/README.txt/index.html>`_."
msgstr ""

#: ../../source/components/utilities.rst:35
# c71ea02572ca415a9cd03ed5afcb6481
msgid "Local and global utilities"
msgstr ""

#: ../../source/components/utilities.rst:37
# e05c98f0de12435895ab5e8d38957150
msgid "Utilities can be"
msgstr ""

#: ../../source/components/utilities.rst:39
# 80947fe2edbc4c3595e2cf51eb81e115
msgid "*global* - registered during Zope start-up"
msgstr ""

#: ../../source/components/utilities.rst:41
# c06af40abd9e49968e1d97987d6a5273
msgid "*local* - registered during add-on installer for a certain site/content item"
msgstr ""

#: ../../source/components/utilities.rst:43
# a13a02a1b0a14985b735a3dbb4676046
msgid "Local utilities are registered to persistent objects. The context of local utilities is stored in a thread-local variable which is set during traversal. Thus, when you ask for local utilities, they usually come from a persistent registry set up in the Plone site root object."
msgstr ""

#: ../../source/components/utilities.rst:48
# 332a30b514484fc182bdbf53d3c27b13
msgid "Global utilities are registered in ZCML and affect all Zope application server and Plone site instances."
msgstr ""

#: ../../source/components/utilities.rst:51
# ae9d7b3299f1448b9a4c38747c110b02
msgid "Some hints::"
msgstr ""

#: ../../source/components/utilities.rst:57
# 6ccff03fb4ba4415bc6e35e81d900b3f
msgid "Registering a global utility"
msgstr ""

#: ../../source/components/utilities.rst:59
# 1614589aa1a24bd9a05412b27235303d
msgid "A utility is constructed when Plone is started and ZCML is read. Utilities take no constructor parameters. If you need to use parameters like context or request, consider using views or adapters instead. Utilities may or may not have a name."
msgstr ""

#: ../../source/components/utilities.rst:64
# 5cc30a8a0c924235a6c812d448ad5b0d
msgid "A utility can be provided by a function: the function is called and it returns the utility object."
msgstr ""

#: ../../source/components/utilities.rst:67
# 5be2dd7216f54880a5004d92e4df0727
msgid "A utility can be provided by a class: the class ``__call__()`` method itself acts as an factory and returns a new class instance."
msgstr ""

#: ../../source/components/utilities.rst:70
# ba989c7d38514b93923b294ba7c42c6c
msgid "ZCML example:"
msgstr ""

#: ../../source/components/utilities.rst:81
# 097516e0c1b44f519ae2b23ae063dee1
msgid "Python example (named utility)::"
msgstr ""

#: ../../source/components/utilities.rst:91
# 1f052e573cc64b3eb292ddbd15cc793c
msgid "The utility class \"factory\" is in its simplest form a class which implements the interface::"
msgstr ""

#: ../../source/components/utilities.rst:104
# 1d2b9a23887444bd99ddd8036f53a4c1
msgid "Class is constructed / factory is run during the ZCML initialization."
msgstr ""

#: ../../source/components/utilities.rst:106
# 1775fe3afbf949c0845ece21559473c8
msgid "To use this class::"
msgstr ""

#: ../../source/components/utilities.rst:115
# 1796bf726e924cb884eb656a2eb7682b
msgid "Registering a local utility"
msgstr ""

#: ../../source/components/utilities.rst:117
# 70a8cd3280f8477dbb758ec720e5773b
msgid "http://plone.org/documentation/manual/developer-manual/generic-setup/reference/component-registry"
msgstr ""

#: ../../source/components/utilities.rst:119
# 9f347cbfc38b45d29ff861d721ca7377
msgid "http://davisagli.com/blog/registering-add-on-specific-components-using-z3c.baseregistry"
msgstr ""

#: ../../source/components/utilities.rst:121
# d423f52f348f403db6e19ea54ecb462f
msgid "http://pypi.python.org/pypi/z3c.baseregistry"
msgstr ""

#: ../../source/components/utilities.rst:125
# d3976652f3204e01877ba40c5f87e2b7
msgid "Local utilities may be destroyed when the add-on product that provides them is reinstalled. Do not use them to store any data."
msgstr ""

#: ../../source/components/utilities.rst:129
# b5e4e801b8324a678b25e8af13639be5
msgid "http://markmail.org/thread/twuhyldgyje7p723"
msgstr ""

#: ../../source/components/utilities.rst:132
# 8c40d834312140d08d2b16254a58c4cf
msgid "Overriding utility"
msgstr ""

#: ../../source/components/utilities.rst:134
# c1e442c5ab8b4069bb623256f680c7cf
msgid "If you want to override any existing utility you can re-register the utility in the ``overrides.zcml`` file in your product."
msgstr ""

#: ../../source/components/utilities.rst:138
# d2f37a1fc98748e49f66f1413c7d4b7d
msgid "Getting a utility"
msgstr ""

#: ../../source/components/utilities.rst:140
# 58c396fc750d4bb094eaa08688cb7d8c
msgid "There are two functions:"
msgstr ""

#: ../../source/components/utilities.rst:143
# 33f1fa86e89a4fb08580030935cbd97d
msgid "will raise an exception if the utility is not found."
msgstr ""

#: ../../source/components/utilities.rst:146
# d6f0bb02dbcc4912bf4205ab20748866
msgid "will return ``None`` if the utility is not found."
msgstr ""

#: ../../source/components/utilities.rst:148
# f6838c63dc43485f8d0e03976af41f6d
msgid "Utility query parameters are passed to the utility class constructor."
msgstr ""

#: ../../source/components/utilities.rst:160
# a2e6dad1c36444e983c573eb92cfa15d
msgid "You cannot use ``getUtility()`` on Python module level code during import, as the Zope Component Architecture is not yet initialized at that time. Always call ``getUtility()`` from an HTTP request end point or after Zope has been started."
msgstr ""

#: ../../source/components/utilities.rst:166
# a73c0295dbe24575b49d585dcc20fb79
msgid "Query local + global utilities:"
msgstr ""

#: ../../source/components/utilities.rst:168
# 268f57ef035d47b2b7466d2145b8d2c8
msgid "``zope.component.queryUtility()`` for local utilities, with global fallback."
msgstr ""

#: ../../source/components/utilities.rst:170
# f6f3d434308947dc89f72bd32ca48e0b
msgid "Query only global utilities::"
msgstr ""

#: ../../source/components/utilities.rst:178
# f52c5ad53a554a1186c80d8e706a0a72
msgid "Due to Zope component architecture initialization order, you cannot call ``getUtility()`` in module-level Python code. Module-level Python code is run when the module is being imported, and Zope components are not yet set up at this point."
msgstr ""

#: ../../source/components/utilities.rst:184
# 0dca2013a136460a8b4feca6b2a1104c
msgid "Getting all named utilities of one interface"
msgstr ""

#: ../../source/components/utilities.rst:186
# 261a063a86934c6b821364873f2fab94
msgid "Use ``zope.component.getUtilitiesFor()``."
msgstr ""

#: ../../source/components/utilities.rst:205
# 9d593fdeb2fd48b3a8ca8de09ec98a9d
msgid "Unregistering utilities"
msgstr ""

#: ../../source/components/utilities.rst:207
# 7f99f713c70244ceaebeb8cd60953ddd
msgid "http://www.muthukadan.net/docs/zca.html#unregisterutility"
msgstr ""

#: ../../source/components/utilities.rst:210
# 73b6d85e5c9341d18bd1066ea27886f5
msgid "Removing persistent local utilities"
msgstr ""

#: ../../source/components/utilities.rst:212
# 6d975bb0f35946dea2b21a64fc7d108f
msgid "http://plone.org/documentation/kb/manually-removing-local-persistent-utilities"
msgstr ""

#: ../../source/components/utilities.rst:213
# e4853bcf8977420890ea8c818e86b2ef
msgid "http://blog.fourdigits.nl/removing-a-persistent-local-utility"
msgstr ""

#: ../../source/components/utilities.rst:214
# 1b038d68e2744e1ead0a155d2bcd068d
msgid "http://blog.fourdigits.nl/removing-a-persistent-local-utility-part-ii"
msgstr ""

#: ../../source/components/zcml.rst:3
# 4a69d5787fe4456d8f37cd0e370ce3ca
msgid "ZCML"
msgstr ""

#: ../../source/components/zcml.rst:7
# 3bf1a4a469214b949978c27e21009267
msgid "What Plone programmers should know about ZCML."
msgstr ""

#: ../../source/components/zcml.rst:14
# 5bd7b9bc4b854e36be4e241504274525
msgid ":term:`ZCML` stands for the *Zope Configuration Mark-up Language*.  It is an XML-based language used to extend and plug into systems based on the Zope Component Architecture (:term:`ZCA`)."
msgstr ""

#: ../../source/components/zcml.rst:18
# 84b556e1ce064b25849a1a7c69000f65
msgid "It provides:"
msgstr ""

#: ../../source/components/zcml.rst:20
# da792309929c42ef994344530f5a4ed7
msgid "conflict resolution (e.g. two plug-ins cannot overlap);"
msgstr ""

#: ../../source/components/zcml.rst:21
# 0ec4a2cc9b4740ffb9611d5636e90640
msgid "extensible syntax based on namespaces."
msgstr ""

#: ../../source/components/zcml.rst:23
# 53530d8122e443ebb794510173a5cd3e
msgid "Downsides of ZCML are:"
msgstr ""

#: ../../source/components/zcml.rst:25
# 580abff857bd493a9c4ee0ca7e0c528b
msgid "it is cumbersome to write by hand;"
msgstr ""

#: ../../source/components/zcml.rst:26
# c5101e40641a43419ec0c0523d41eb0c
msgid "lack of end-user documentation."
msgstr ""

#: ../../source/components/zcml.rst:28
# 10e4f3095c4d408da33829ca1456a697
msgid "Plone uses ZCML to:"
msgstr ""

#: ../../source/components/zcml.rst:30
# b3950ee91a184cc3a23235c0524fbbb3
msgid "register components with various places in the system, both core and add-ons."
msgstr ""

#: ../../source/components/zcml.rst:35
# a44ba70dc4ee4f408dc618f58d62b1b7
msgid "Everything you can do in ZCML can also be done in Python code."
msgstr ""

#: ../../source/components/zcml.rst:37
# 06e5983ce34a45c6933acc24c0dd1e4c
msgid "After developers found ZCML cumbersome, the :doc:`Grok framework </components/grok>` was created. Grok makes it possible use the ZCA without writing XML by enabling Python directives and function decorators to be used instead."
msgstr ""

#: ../../source/components/zcml.rst:42
# ee095fdbe9414aa5bbbc70c123e2f896
msgid "More info:"
msgstr ""

#: ../../source/components/zcml.rst:44
# 763cebbee03e4d61ae337aeebec4bd24
msgid "`ZCML reference <http://docs.zope.org/zope3/ZCML/@@staticmenu.html>`_ (does not include Plone specific directives)"
msgstr ""

#: ../../source/components/zcml.rst:46
# 46cede40160f4a02b7482f687b518417
msgid "http://docs.zope.org/zopetoolkit/codingstyle/zcml-style.html"
msgstr ""

#: ../../source/components/zcml.rst:49
# 0f3812aeac2c4c72a037401920817d56
msgid "ZCML workflow"
msgstr ""

#: ../../source/components/zcml.rst:51
# 3d8f6590d2f64a1b82b111faae79562b
msgid "Each Plone component (core, add-on) has a base ``configure.zcml`` in the package root.  This :term:`ZCML` file can include additional nested configuration files using the ``<include>`` directive."
msgstr ""

#: ../../source/components/zcml.rst:55
# 41831016edde4c25af4825eb0eda5865
msgid "ZCML is always interpreted during Plone start-up."
msgstr ""

#: ../../source/components/zcml.rst:57
# db9427063728486e99b49154e6e28ded
msgid "Your :doc:`unit test </testing_and_debugging/unit_testing>` may need to manually include ZCML."
msgstr ""

#: ../../source/components/zcml.rst:60
# d81b81203d4b46dea9c8535bc0ccaa25
msgid ":doc:`Funny exception error messages occur if Plone is started in the production mode and ZCML was not properly read for all the packages </troubleshooting/exceptions>`"
msgstr ""

#: ../../source/components/zcml.rst:64
# 3c1a3dfb95a3418bb591dd393c3f7b7a
msgid "When Plone is started all ZCML files are read."
msgstr ""

#: ../../source/components/zcml.rst:66
# f4d7b8e0d9a74e7ebd6d7cc934667745
msgid "New way: Python egg ``setup.py`` file contains a `autoinclude <http://plone.org/products/plone/roadmap/247>`_ hint and is picked up automatically when all the packages are scanned."
msgstr ""

#: ../../source/components/zcml.rst:70
# 787183021bf34ec7a528c8aa272bf5c5
msgid "Old way: ZCML reference must be manually added to the ``zcml = section`` in ``buildout.cfg``"
msgstr ""

#: ../../source/components/zcml.rst:73
# 019536c8506c4f63a90d431671972df0
msgid "If ZCML contains errors :doc:`Plone does not start up in the foreground </troubleshooting/basic>`"
msgstr ""

#: ../../source/components/zcml.rst:77
# 16e2ee61d41c4e4eba63d940aec4b297
msgid "Overrides"
msgstr ""

#: ../../source/components/zcml.rst:79
# c5019a6b48044c2b815693d3d5111e9b
msgid "Besides layer overrides, ZCML provides more hardcore ways to override things in buildout. These overrides can also override utilities etc. and overrides take effect during ZCML parsing, not when site is run."
msgstr ""

#: ../../source/components/zcml.rst:84
# 305e73d336a747fba246719f931b1afb
msgid "Create ``overrides.zcml`` file in your egg to the same folder as ``configure.zcml``"
msgstr ""

#: ../../source/components/zcml.rst:86
# 1e697831c43a4beeb6a1be441e65edcd
msgid "Syntax is 100% same as in ``configure.zcml``"
msgstr ""

#: ../../source/components/zcml.rst:88
# 9703f0cb17cd4c9fac83f9ca79288a8c
msgid "Restart Plone."
msgstr ""

#: ../../source/components/zcml.rst:92
# 368beece3af74b999a86ce018daabb85
msgid "Before Plone 3.3, ZCML directives could not be automatically picked up from eggs. To make Plone pick up the directions in ``overrides.zcml``, you'd have to add this line in ``buildout.cfg``::"
msgstr ""

#: ../../source/components/zcml.rst:100
# ebeb6ce414424957b4c9cef77660f5a5
msgid "Since Plone 3.3, the ``z3c.autoinclude`` plugin can do this (http://plone.org/products/plone/roadmap/247/)."
msgstr ""

#: ../../source/components/zcml.rst:105
# fbcfd630a42645bca96c1a5662cc9aed
msgid "Specify files and code from another package"
msgstr ""

#: ../../source/components/zcml.rst:107
# aafc30a8072249c8931980b23ded4d03
msgid "If you ever find yourself needing to use a template from another package, you can do so with using the configure tag which will then run the block of :term:`ZCML` in the context of that package."
msgstr ""

#: ../../source/components/zcml.rst:112
# 87ca7cc04b4440deb4662e4f421cfb0f
msgid "Here is an example of defining portlet manager to be defined in another manager::"
msgstr ""

#: ../../source/components/zcml.rst:136
# 00e62a0acbd74ec6b17339716c103f61
msgid "Conditionally run :term:`ZCML`"
msgstr ""

#: ../../source/components/zcml.rst:138
# 06e32cfd6ddb4c558b75615468fa1713
msgid "You can conditionally run :term:`ZCML` if a certain package or feature is installed."
msgstr ""

#: ../../source/components/zcml.rst:141
# b2e5810798234938a4181b188ff985b0
msgid "First, include the namespace at the top of the :term:`ZCML` file::"
msgstr ""

#: ../../source/components/zcml.rst:150
# dc70861777464ed5b742795d4eaed7de
msgid "Examples"
msgstr ""

#: ../../source/components/zcml.rst:152
# a6c8167096ee4e7fb8ab2622654dbee7
msgid "conditionally run for package::"
msgstr ""

#: ../../source/components/zcml.rst:157
# 0f18bbfdbd2541828847641c17bbf3dd
msgid "conditionally run for feature::"
msgstr ""

