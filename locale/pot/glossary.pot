# SOME DESCRIPTIVE TITLE.
# Copyright (C) Plone community and other individual contributors
# This file is distributed under the same license as the Plone Developer Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Developer Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-08 16:49\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/glossary.rst:3
# 4e78055b6e474098870d7a9cc650e383
msgid "Glossary"
msgstr ""

#: ../../source/glossary.rst:5
# ca66c43fe73f48a09da878e817b3f387
msgid "This is a glossary for some definitions used in this documentation and still heavily under construction."
msgstr ""

#: ../../source/glossary.rst:8
# 2dcd9772fc2542069403c7eb473a7a76
msgid "It incorporates the original `glossary on plone.org <http://plone.org/documentation/glossary>`_."
msgstr ""

#: ../../source/glossary.rst:502
# 7d8cd544706f4677b55ae38f67bca8c5
msgid "The file format used by the :term:`gettext` translation system. http://www.gnu.org/software/hello/manual/gettext/PO-Files.html"
msgstr ""

#: ../../source/glossary.rst:199
# a019b53dc55649479f73037b1bcd3db8
msgid "Simply put, any Zope object can acquire any object or property from any of its parents. That is, if you have a folder called *A*, containing two resources (a document called *homepage* and another folder called *B*), then an URL pointing at http://.../A/B/homepage would work even though *B* is empty. This is because Zope starts to look for *homepage* in *B*, doesn't find it, and goes back up to *A*, where it's found. The reality, inevitably, is more complex than this. For the whole story, see the `Acquisition chapter in the Zope Book <http://www.plope.com/Books/2_7Edition/Acquisition.stx>`_."
msgstr ""

#: ../../source/glossary.rst:368
# 1322bfbaf41b48809719e8786e63d288
msgid "AGX is short for :term:`ArchGenXML`."
msgstr ""

#: ../../source/glossary.rst:231
# 67f9937afae94a98893a9d7f0b55abb0
msgid "Archetypes is a framework designed to facilitate the building of applications for Plone and :term:`CMF`. Its main purpose is to provide a common method for building content objects, based on schema definitions. Fields can be grouped for editing, making it very simple to create wizard-like forms. Archetypes is able to do all the heavy lifting needed to bootstrap a content type, allowing the developer to focus on other things such as business rules, planning, scaling and designing. It provides features such as auto-generation of editing and presentation views. Archetypes code can be generated from :term:`UML` using :term:`ArchGenXML`."
msgstr ""

#: ../../source/glossary.rst:361
# 15e270460b184809bc9657e02da4f290
msgid "ArchGenXML is a code-generator for CMF/Plone applications (a :term:`Product`) based on the :term:`Archetypes` framework. It parses UML models in XMI-Format (``.xmi``, ``.zargo``, ``.zuml``), created with applications such as ArgoUML, Poseidon or ObjectDomain. A brief tutorial for ArchGenXML is present on the plone.org site."
msgstr ""

#: ../../source/glossary.rst:292
# 3c3f6aa8841942dd86507b8766b455a3
msgid "ATContentTypes - the new content types written with Archetypes which replaces the default CMF content types in Plone 2.1 onwards."
msgstr ""

#: ../../source/glossary.rst:337
# 9165c10309c54650a72b2dc0d5771d13
msgid "When adding (or leaving) a piece of code for backward compatibility, we use a BBB comment marker with a date."
msgstr ""

#: ../../source/glossary.rst:68
# 2cd0647026744ac785d57b4aad117b9a
msgid "The catalog is an internal index of the content inside Plone so that it can be searched. The catalog object is accessible through the :term:`ZMI` as the ``portal_catalog`` object."
msgstr ""

#: ../../source/glossary.rst:243
# 0f5e60be612c41ad892c4713716e3538
msgid "The *Content Management Framework* is a framework for building content-oriented applications within Zope. It as formed the basis of Plone content from the start."
msgstr ""

#: ../../source/glossary.rst:307
# 025ab8ae448b4505a22542927e2d68f6
msgid "The *Collective* is a community code repository for Plone Products and other add-ons, and is a useful place to find the very latest code for hundreds of add-ons to Plone. Developers of new Plone Products are encouraged to share their code via the Collective so that others can easily find it, use it, and contribute fixes and improvements."
msgstr ""

#: ../../source/glossary.rst:152
# 9802ef6138f44503912e1f868f1f7f76
msgid "Cascading Style Sheets is a way to separate content from presentation. Plone uses this extensively, and it is a web standard `documented at the W3C web site <http://www.w3.org/Style/CSS/>`_. If you want to learn CSS, we recommend `the W3Schools CSS Resources <http://www.w3schools.com/Css/default.asp>`_ and the `SitePoint CSS Reference <http://reference.sitepoint.com/css>`_."
msgstr ""

#: ../../source/glossary.rst:79
# 0eb2fb4456474fc08900222de016e723
msgid "A document is a page of content, usually a self-contained piece of text. Documents can be written in several different formats, plain text, HTML or (re)Structured Text. The default home page for a Plone site is one example of a document."
msgstr ""

#: ../../source/glossary.rst:73
# fdef6a56a3ba4a8fb49e285ead848bd4
msgid "Document Template Markup Language. DTML is a server-side templating language used to produce dynamic pieces of content, but is now superseded by :term:`ZPT` for HTML and XML content. It is still used sparingly for non-XML content like SQL and mail/CSS."
msgstr ""

#: ../../source/glossary.rst:93
# e6b3b854b6a4431795f6dcb041a3e9de
msgid "Dublin Core is a standard set of metadata which enables the description of resources for the purposes of discovery. See https://en.wikipedia.org/wiki/Dublin_Core"
msgstr ""

#: ../../source/glossary.rst:462
# 753f829d3ec947829b1b7eecf87df5e5
msgid "A command-line tool for automatic discovery and installation of packages into a Python environment. The ``easy_install`` script is part of the ``setuptools`` package, which uses the :term:`Python Package Index` as its source for packages."
msgstr ""

#: ../../source/glossary.rst:14
# 975dcc26530e41858bf4347c6e843b9a
msgid "See :term:`Python egg`."
msgstr ""

#: ../../source/glossary.rst:85
# 264749ed4bf743f9ba42f4779ba32aa9
msgid "The last day an item should show up in searches, news listings etc. Please note that this doesn't actually remove or disable the item, it merely makes it not show up in searches."
msgstr ""

#: ../../source/glossary.rst:89
# fd77831dab654009ab410eaa0153dd96
msgid "This is part of the Dublin Core metadata that is present on all Plone objects."
msgstr ""

#: ../../source/glossary.rst:521
# e9c12721063a4100ae5f3916485d5aa7
msgid "An XML-based configuration system for Zope and Plone applications."
msgstr ""

#: ../../source/glossary.rst:523
#: ../../source/glossary.rst:531
# 29090b8239754c8e86218f03dd5b09d2
# 8d79654699cd443b87fcf6b0df365ccf
msgid "Add reference."
msgstr ""

#: ../../source/glossary.rst:506
# 8877976ec4b94a9d84af8ec3b198b6a5
msgid "UNIX standard software translation tool. See http://www.gnu.org/software/gettext/"
msgstr ""

#: ../../source/glossary.rst:499
# 3222b00d5b64425188273924ca2414c5
msgid "See the grok project documentation."
msgstr ""

#: ../../source/glossary.rst:135
# c33c147ef4d24489aa9f44be92959b8c
msgid "i18n is shorthand for \"internationalization\" (the letter I, 18 letters, the letter N) - and refers to the process of preparing a program so that it can be used in multiple languages without further altering the source. Plone is fully internationalized."
msgstr ""

#: ../../source/glossary.rst:510
# e89ea0dfc97f4d9cac33e0fc1235a1bc
msgid "Support tool to create and update message catalogs from instrumented source code."
msgstr ""

#: ../../source/glossary.rst:534
# 81d94a53b0cd42f1ae410e69f1ce9e72
msgid "JavaScript Object Notation. JSON is a lightweight text-based open standard designed for human-readable data interchange. In short, it's a string that looks like a JavaScript array, but is constrained to 6 simple data types. It can be parsed by many languages."
msgstr ""

#: ../../source/glossary.rst:254
# bc2a1a5af7d94fcd92719952df326ff3
msgid "*Kinetic Style Sheets* is a client-side framework for implementing rich user interfaces with AJAX functionality. It allows attaching actions to elements using a CSS-like rule syntax. KSS was added to Plone in Plone 3 and removed in Plone 4.3, because JQuery made it obsolete."
msgstr ""

#: ../../source/glossary.rst:210
# e1673db7c62b446fb780a9d0f7193c9f
msgid "Kupu is the user-friendly graphical HTML editor component that used to be bundled with Plone, starting with version 2.1. It has since been replaced by :term:`TinyMCE`."
msgstr ""

#: ../../source/glossary.rst:141
# c392a91914d84966acabee976add3ef0
msgid "Localization is the actual preparing of data for a particular language. For example Plone is i18n aware and has localization for several languages. The term l10n is formed by the first and last letter of the word and the number of letters in between."
msgstr ""

#: ../../source/glossary.rst:98
# 873b69543481412c8cc48d89028a5bcb
msgid "A layer is a set of templates and scripts that get presented to the user. By combining these layers, you create what is referred to as a :term:`skin`. The order of layers is important, the topmost layers will be examined first when rendering a page. Each layer is an entry in ``portal_skins`` -> 'Contents', and is usually a Filesystem Directory View or a Folder.  See http://plone.org/documentation/manual/theme-reference/buildingblocks/skin/layers"
msgstr ""

#: ../../source/glossary.rst:161
# 6220a16263134fccbec840727df470de
msgid "Lightweight Directory Access Protocol. An internet protocol which provides a specification for user-directory access by wire, attribute syntax, representation of distinguished names, search filters, an URL format, a schema for user-centric information, authentication methods, and transport layer security. Example: an email client might connect to an LDAP server in order to look up an email address for a person by a person's name."
msgstr ""

#: ../../source/glossary.rst:170
# ff0771dc80ab48509f9acf5132d8a050
msgid "The *Manager* Security role is a standard role in Zope. A user with the Manager role has ALL permissions except the Take Ownership permission. Also commonly known as Administrator or root in other systems."
msgstr ""

#: ../../source/glossary.rst:374
# 644578cf8a834158a1e1fc3ea4cc6e62
msgid "Macro Expansion Template Attribute Language. See :term:`ZPT`."
msgstr ""

#: ../../source/glossary.rst:345
# 5f0d808559b24c4393c502b33cf46247
msgid "A monkey patch is a way to modify the behaviour of Zope or a Product without altering the original code. Useful for fixes that have to live alongside the original code for a while, like security hotfixes, behavioural changes, etc."
msgstr ""

#: ../../source/glossary.rst:350
# 9d52891c81524bafaadd9729924092df
msgid "The term \"monkey patch\" seems to have originated as follows: First it was \"guerrilla patch\", referring to code that sneakily changes other code at runtime without any rules. In Zope 2, sometimes these patches conflict. This term went around Zope Corporation for a while. People heard it as \"gorilla patch\", though, since the two words sound very much alike, and the word gorilla is heard more often. So, when someone created a guerrilla patch very carefully and tried to avoid any battles, they tried to make it sound less forceful by calling it a monkey patch. The term stuck."
msgstr ""

#: ../../source/glossary.rst:468
# cf746adedc84466a920cfebd5cdf0718
msgid "A feature of setuptools which makes it possible to distribute multiple, separate packages sharing a single top-level namespace. For example, the packages ``plone.theme`` and ``plone.portlets`` both share the top-level ``plone`` namespace, but they are distributed as separate eggs. When installed, each egg's source code has its own directory (or possibly a compressed archive of that directory).  Namespace packages eliminate the need to distribute one giant plone package, with a top-level plone directory containing all possible children."
msgstr ""

#: ../../source/glossary.rst:248
# 500a1272ba2d401ab091a8bee3dd2229
msgid "A distributed identity system. Using a single URI provider an individual is able to login to any web site that accepts OpenID using the URI and a password. Plone implements OpenID as a :term:`PAS` plug-in."
msgstr ""

#: ../../source/glossary.rst:190
# a19eb4c98b1a4dcd9010c032f1a81c08
msgid "The Pluggable Authentication Service (PAS) is a framework for handling authentication in Zope 2. PAS is a Zope ``acl_users`` folder object that uses \"plugins\" that can implement various authentication interfaces (for example :term:`LDAP` and :term:`OpenID`) that plug into the PAS framework .  Zope 3 also uses a design inspired by PAS. PAS was integrated into Plone at the 2005 San Jose Sprint."
msgstr ""

#: ../../source/glossary.rst:278
# 69aeb4cbffb144c693fb93528b2f10da
msgid "*PLone Improvement Proposal* (just like Python's PEPs: Python Enhancement Proposals). These are documents written to structure and organise proposals for the improvement of Plone."
msgstr ""

#: ../../source/glossary.rst:282
# 4be0a525d9144115b60aee227a2a85ea
msgid "Motivation, deliverables, risks and a list of people willing to do the work must be included. This document is submitted to the `Framework Team <http://plone.org/team/FrameworkTeam>`_, who reviews the proposal and decides if it's suitable to be included in the next Plone release or not."
msgstr ""

#: ../../source/glossary.rst:288
# fc94be116a02401e84777d1ae5ef9c72
msgid "See more info about how to write a `PLIP <http://dev.plone.org/plone/wiki/PLIP>`_."
msgstr ""

#: ../../source/glossary.rst:549
# f66716b3fae4436a8a45f6e5ef2d3511
msgid "A Plonista is a member of the Plone community. It can be somebody who loves Plone, or uses Plone, or someone who spreads Plone and Plone knowledge. It can also be someone who is a Plone developer, or it can be all of the above."
msgstr ""

#: ../../source/glossary.rst:226
# a1c19b0df49a490e838f4582231faa83
msgid "A Plone-specific module that extends Plone functionality and can be managed via the Plone Control Panel. Plone Products often integrate non-Plone-specific modules for use within the Plone context."
msgstr ""

#: ../../source/glossary.rst:435
# 5663166323c84b94a58b0954be9705b0
msgid "A widely used Python packaging format which consists of a zip or ``.tar.gz`` archive with some metadata information. It was introduced by `setuptools <http://peak.telecommunity.com/DevCenter/EasyInstall>`_ which has since been superseded by `Distribute <http://packages.python.org/distribute/>`_."
msgstr ""

#: ../../source/glossary.rst:442
# 435c8d9e80eb450ba6dc9d162cde2581
msgid "A way to package and distribute Python packages. Each egg contains a ``setup.py`` file with metadata (such as the author's name and email address and licensing information), as well as information about dependencies. ``setuptools``, the Python library that powers the egg mechanism, is able to automatically find and download dependencies for eggs that you install. It is even possible for two different eggs to concurrently use different versions of the same dependency. Eggs also support a feature called *entry points*, a kind of generic plug-in mechanism. Much more detail is available at the `PEAK website <http://peak.telecommunity.com/DevCenter/setuptools>`_."
msgstr ""

#: ../../source/glossary.rst:422
# b6cdd38a218448b19d961a0c4aef99c0
msgid "A general term describing a redistributable Python module. At the most basic level, a package is a directory with an ``__init__.py`` file, which can be blank."
msgstr ""

#: ../../source/glossary.rst:454
# 98d533e33b6640d6a88badefb84077e9
msgid "The Python community's index of thousands of downloadable Python packages. It is available as a website to browse, with the ability to search for a particular package. More importantly, setuptools-based packaging tools (most notably, ``buildout`` and ``easy_install``) can query this index to download and install eggs automatically. Also known as the Cheese Shop or PyPI."
msgstr ""

#: ../../source/glossary.rst:411
# 0793b7e35b1a4c7dba9bae7c11dc791b
msgid "The order and location of folders in which the Python interpreter will look for modules. It's available in python via ``sys.path``. When Zope is running, this typically includes the global Python modules making up the standard library, the interpreter's site-packages directory, where third party \"global\" modules and eggs are installed, the Zope software home, and the ``lib/python`` directory inside the instance home. It is possible for python scripts to include additional paths in the Python path during runtime. This ability is used by ``zc.buildout``."
msgstr ""

#: ../../source/glossary.rst:321
# 019cfe472b194529ae6d8c107c877f41
msgid "Rapid Application Development - A term applied to development tools to refer to any number of features that make programming easier. :term:`Archetypes` and :term:`ArchGenXML` are examples of these from the Plone universe."
msgstr ""

#: ../../source/glossary.rst:147
# 04f6c3d069ab4b81be745357ca23a91b
msgid "Each page view by a client generates a request to Plone. This incoming request is encapsulated in a *request* object in Zope, usually called REQUEST (or lowercase \"request\" in the case of ZPT)."
msgstr ""

#: ../../source/glossary.rst:296
# 484911ba1bb847e399728ea09c82d016
msgid "A piece of Plone infrastructure that allows CSS/Javascript declarations to be contained in separate, logical files before ultimately being appended to the existing Plone CSS/Javascript files on page delivery. Primarily enables Product authors to \"register\" new CSS/Javascript without needing to touch Plone's templates, but also allows for selective inclusion of CSS/Javascript files and reduces page load by minimizing individual calls to separate blocks of CSS/Javascript files. Found in the :term:`ZMI` under ``portal_css`` and ``portal_javascript``."
msgstr ""

#: ../../source/glossary.rst:17
# 725f35c06a6f4aef9693519c078e4641
msgid "The standard plaintext markup language used for Python documentation: http://docutils.sourceforge.net/rst.html"
msgstr ""

#: ../../source/glossary.rst:20
# edcfd5e0ea414fd3b24e5ba36a3c8004
msgid "`reStructuredText <http://docutils.sourceforge.net/rst.html>`_ is an easy-to-read plaintext markup syntax and parser system. It is useful for in-line program documentation (such as Python docstrings), for quickly creating simple web pages, and for standalone documents. reStructuredText is designed to be extensible for specific application domains. The reStructuredText parser is a component of `Docutils <http://docutils.sourceforge.net/index.html>`_."
msgstr ""

#: ../../source/glossary.rst:28
# a7780c13038d463f8a26b385816cf01c
msgid "reStructuredText is a revision and reinterpretation of the `StructuredText <http://plone.org/documentation/glossary/stx>`_ and `Setext <http://docutils.sourceforge.net/mirror/setext.html>`_ lightweight markup systems."
msgstr ""

#: ../../source/glossary.rst:107
# 0f56c14982b54215acdc370662d8eb8e
msgid "A collection of template layers (see :term:`layer`) is used as the search path when a page is rendered and the different parts look up template fragments.  Skins are defined in the :term:`ZMI` in ``portal_skins`` tool. Used for both presentation and code customizations."
msgstr ""

#: ../../source/glossary.rst:34
# 2d4df4c970b0402ba6f8b699c85cb95a
msgid "A :term:`ZCML` *slug* is a one-line file created in a Zope instance's ``etc/package-includes`` directory, with a name like ``my.package-configure.zcml``. The contents of the file would be something like: ``<include package=\"my.package\" file=\"configure.zcml\" />``"
msgstr ""

#: ../../source/glossary.rst:40
# cfe0b2dffd6b4bcbacc4ea5428c427c0
msgid "This is the Zope 3 way to load a particular package."
msgstr ""

#: ../../source/glossary.rst:381
# 729b1d545e7e4db3b6aaba768778d6b6
msgid "The directory inside the Zope installation (on the filesystem) that contains all the Python code that makes up the core of the Zope application server. The various Zope packages are distributed here. Also referred to as the ``SOFTWARE_HOME`` environment variable. It varies from one system to the next, depending where you or your packaging system installed Zope. You can find the value of this in the *ZMI > Control Panel*."
msgstr ""

#: ../../source/glossary.rst:315
# b7d1f50b639a45609b1f03d6710aa085
msgid "Based on ideas from the extreme programming (XP) community. A sprint is a three to five day focused development session, in which developers pair in a room and focus on building a particular subsystem. See http://plone.org/events/sprints"
msgstr ""

#: ../../source/glossary.rst:59
# 3651cde1cbb14162a28eab73aefc6c7b
msgid "Structured Text is a simple markup technique that is useful when you don't want to resort to HTML for creating web content. It uses indenting for structure, and other markup for formatting. It has been superseded by :term:`reStructuredText`, but some people still prefer the old version, as it's simpler. More information in the `How-to section of plone.org <http://plone.org/documentation/howto/structured-text-cheatsheet>`_."
msgstr ""

#: ../../source/glossary.rst:176
# 403f564035264a3ea2490063dcedb35f
msgid "Syndication shows you the several most recently updated objects in a folder in RSS format. This format is designed to be read by other programs."
msgstr ""

#: ../../source/glossary.rst:371
# ada03bf1585f4e0ebf65c70529a2e417
msgid "Template Attribute Language. See :term:`ZPT`."
msgstr ""

#: ../../source/glossary.rst:377
# 7dde0a3035664e7eaa0fe7971cc67dae
msgid ":term:`TAL` Expression Syntax. The syntax of the expressions used in TAL attributes."
msgstr ""

#: ../../source/glossary.rst:215
# 8ad20b62144c4298b095274f0dc2765f
msgid "A graphical HTML editor bundled with Plone."
msgstr ""

#: ../../source/glossary.rst:341
# 43a725d672d2403a9c8a80f27880884f
msgid "The TODO marker in source code records new features, non-critical optimization notes, design changes, etc."
msgstr ""

#: ../../source/glossary.rst:260
# 9378d5bcfac546fa9429c20e2cc7427d
msgid "A Python \"traceback\" is a detailed error message generated when an error occurs in executing Python code. Since Plone, running atop Zope, is a Python application, most Plone errors will generate a Python traceback. If you are filing an issue report regarding a Plone or Plone-product error, you should try to include a traceback log entry with the report."
msgstr ""

#: ../../source/glossary.rst:267
# cb32b52c2d844912a8f2ca8159c842c6
msgid "To find the traceback, check your ``event.log`` log file. Alternatively, use the ZMI to check the ``error_log`` object in your Plone folder. Note that your Zope must be running in *debug* mode in order to log tracebacks."
msgstr ""

#: ../../source/glossary.rst:272
# 504f9473cf3848cd8c9e92efd7fdbe53
msgid "A traceback will be included with nearly all error entries. A traceback will look something like this: \"Traceback (innermost last): ...  AttributeError: adapters\" They can be very long. The most useful information is generally at the end."
msgstr ""

#: ../../source/glossary.rst:514
# a2668145fdf3445b9985a0bdb30dbe28
msgid "Publishing an object from the ZODB by traversing its parent objects, resolving security and names in scope. See the `Acquisition chapter in the Zope 2 book <http://docs.zope.org/zope2/zope2book/ZEO.html>`_. http://docs.zope.org/zope2/zope2book/Acquisition.html"
msgstr ""

#: ../../source/glossary.rst:185
# 802c3b89708844c8b77d61c07c6c1b52
msgid "Actions done TTP are performed \"Through the Plone\" interface. It is normally a lazy way of telling you that you should not add things from the ZMI, as is the case for adding content, for example."
msgstr ""

#: ../../source/glossary.rst:181
# a26ba2bbe3ee4c31aabaf409405fcde9
msgid "This is a general term meaning an action can be performed \"Through The Web,\" as opposed to, say, being done programmatically."
msgstr ""

#: ../../source/glossary.rst:218
# f1fb2a216d5e4f09bedb5b5d3bf25679
msgid "The *Unified Modeling Language* is a general-purpose modeling language that includes a standardized graphical notation used to create an abstract model of a system, referred to as a *UML model*. With the use of :term:`ArchGenXML`, this can be used to generate code for CMF/Plone applications (a :term:`Product`) based on the Archetypes framework."
msgstr ""

#: ../../source/glossary.rst:526
# 9f0d498184264d94af1c8002511c0614
msgid "``virtualenv`` is a tool for creating a project directory with a Python interpreter that is isolated from the rest of the system. Modules that you install in such an environment remain local to it, and do not impact your system Python or other projects."
msgstr ""

#: ../../source/glossary.rst:43
# 6e0b1bc261924f2eb2baa8d56ff1a72c
msgid "A Zope technology that supports virtual hosting. See `VirtualHostMonster URL rewriting mechanism <http://docs.zope.org/zope2/zope2book/VirtualHosting.html>`_"
msgstr ""

#: ../../source/glossary.rst:48
# e269407cdb5c4a68b8da6f84ab022614
msgid "Workflow is a very powerful way of mimicking business processes — it is also the way security settings are handled in Plone."
msgstr ""

#: ../../source/glossary.rst:327
# d3a56ead9d9446c9938cec58ff09ea5e
msgid "XXX is a marker in the comments of the source code that should only be used during development to note things that need to be taken care of before a final (trunk) commit. Ideally, one should not expect to see XXXs in released software. XXX shall not be used to record new features, non-critical optimization, design changes, etc. If you want to record things like that, use TODO comments instead. People making a release shouldn't care about TODOs, but they ought to be annoyed to find XXXs."
msgstr ""

#: ../../source/glossary.rst:540
# e1bec4fd16884ef7ae520743a2b42c90
msgid "The Zope Component Architecture (ZCA) is a Python framework for supporting component-based design and programming. It is very well suited to developing large Python software systems. The ZCA is not specific to the Zope web application server: it can be used for developing any Python application. From `A Comprehensive Guide to Zope Component Architecture <http://www.muthukadan.net/docs/zca.html>`_."
msgstr ""

#: ../../source/glossary.rst:479
# 0eaec08dd53340e486296d7467c6e781
msgid "Zope Configuration Markup Language. Zope 3 separates policy from the actual code and moves it out to separate configuration files, typically a ``configure.zcml`` file in a buildout. This file configures the Zope instance. 'Configuration' might be a bit misleading here and should be thought or more as wiring. ZCML, the XML-based configuration language that is used for this, is tailored to do component registration and security declarations, for the most part. By enabling or disabling certain components in ZCML, you can configure certain policies of the overall application. In Zope 2, enabling and disabling components means to drop in or remove a certain Zope 2 product. When it's there, it's automagically imported and loaded. This is not the case in Zope 3. If you don't enable it explicitly, it will not be found."
msgstr ""

#: ../../source/glossary.rst:493
# 96ed036496fa4f6a8c74af23c395eeef
msgid "The :term:`grok` project has taken a different approach to the same problem, and allows component registration etc. to be done declaratively from Python code. Both approaches are possible in Plone."
msgstr ""

#: ../../source/glossary.rst:403
# 8a7e2f096cba45a2926d4ff5eee1817a
msgid "ZEO (Zope Enterprise Objects) is a scaling solution used with Zope. The ZEO server is a storage server that allows multiple Zope instances, called ZEO clients, to connect to a single database.  ZEO clients may be distributed across multiple machines.  For additional info, see `the related chapter in The Zope Book <http://docs.zope.org/zope2/zope2book/ZEO.html>`_."
msgstr ""

#: ../../source/glossary.rst:114
# 69f0f7e41ad54bcc9cc05fc53081cded
msgid "The *Zope Management Interface*. Zope has a built in Management Interface that is accessible through the web. Accessing is as simple as appending ``/manage`` to your URL, for example: ``http://localhost/manage`` - or visiting Plone Setup and clicking the *Zope Management Interface* link (Click 'View' to go back to the Plone site). Be careful in there, though - it's the \"geek view\" of things, and is not straightforward, nor does it protect you from doing stupid things. :)"
msgstr ""

#: ../../source/glossary.rst:52
# 6febd89cea9449129fda56506caf1049
msgid "The Zope Object Database is where your content is normally stored when you are using Plone. The default storage backend of the ZODB is *filestorage*, which stores the database on the file system in the file(s) such as ``Data.fs``, normally located in the ``var`` directory."
msgstr ""

#: ../../source/glossary.rst:390
# 2350415eea71497a9b9b48a3656ac082
msgid "An operating system process that handles HTTP interaction with a Zope database (:term:`ZODB`). In other words, the Zope web server process.  Alternatively, the Python code and other configuration files necessary for running this process."
msgstr ""

#: ../../source/glossary.rst:395
# 011e0b6bceb748f29a775756263a4776
msgid "One Zope installation can support multiple instances. Use the buildout recipe ``plone.recipe.zope2instance`` to create new Zope instances in a buildout environment."
msgstr ""

#: ../../source/glossary.rst:399
# 9a9a743e2c0243548877e1d1fb714962
msgid "Several Zope instances may serve data from a single ZODB using a ZEO server on the back-end."
msgstr ""

#: ../../source/glossary.rst:427
# 8a382eaf3d1142858e21ce62e9cdc7f5
msgid "A special kind of Python package used to extend Zope. In old versions of Zope, all products were directories inside the special *Products* directory of a Zope instance; these would have a Python module name beginning with ``Products``. For example, the core of Plone is a product called *CMFPlone*, known in Python as ``Products.CMFPlone``."
msgstr ""

#: ../../source/glossary.rst:124
# 1c452eba2e874d7db6eb141964842a15
msgid "Zope Public License, a BSD-style license that Zope is licensed under."
msgstr ""

#: ../../source/glossary.rst:128
# 81134f31faa2481abed5c605d775f666
msgid "*Zope Page Templates* is the templating language that is used to render the Plone pages. It is implemented as two XML namespaces, making it possible to create templates that look like normal HTML/XML to editors. See http://docs.zope.org/zope2/zope2book/AppendixC.html"
msgstr ""

