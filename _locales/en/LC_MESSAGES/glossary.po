# SOME DESCRIPTIVE TITLE.
# Copyright (C) Plone community and other individual contributors
# This file is distributed under the same license as the Plone Developer Documentation package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: plone-doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-08 13:29\n"
"PO-Revision-Date: 2014-02-08 12:45+0000\n"
"Last-Translator: Giacomo <giacomo.spettoli@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# dfca1e99f5b747b6a5bf9e190a33f3fe
#: ../../source/glossary.rst:3
msgid "Glossary"
msgstr "Glossary"

# 59a3e702e4244908b123c4e496f44377
#: ../../source/glossary.rst:5
msgid ""
"This is a glossary for some definitions used in this documentation and still"
" heavily under construction."
msgstr "This is a glossary for some definitions used in this documentation and still heavily under construction."

# 6665363f17a645378e112d1e1f6c1dbd
#: ../../source/glossary.rst:8
msgid ""
"It incorporates the original `glossary on plone.org "
"<http://plone.org/documentation/glossary>`_."
msgstr "It incorporates the original `glossary on plone.org <http://plone.org/documentation/glossary>`_."

# 9603a758b210468584b48d6e0e16f2ea
#: ../../source/glossary.rst:502
msgid ""
"The file format used by the :term:`gettext` translation system. "
"http://www.gnu.org/software/hello/manual/gettext/PO-Files.html"
msgstr "The file format used by the :term:`gettext` translation system. http://www.gnu.org/software/hello/manual/gettext/PO-Files.html"

# 59c534eff3644471a3d64c097cdd9d52
#: ../../source/glossary.rst:199
msgid ""
"Simply put, any Zope object can acquire any object or property from any of "
"its parents. That is, if you have a folder called *A*, containing two "
"resources (a document called *homepage* and another folder called *B*), then"
" an URL pointing at http://.../A/B/homepage would work even though *B* is "
"empty. This is because Zope starts to look for *homepage* in *B*, doesn't "
"find it, and goes back up to *A*, where it's found. The reality, inevitably,"
" is more complex than this. For the whole story, see the `Acquisition "
"chapter in the Zope Book "
"<http://www.plope.com/Books/2_7Edition/Acquisition.stx>`_."
msgstr "Simply put, any Zope object can acquire any object or property from any of its parents. That is, if you have a folder called *A*, containing two resources (a document called *homepage* and another folder called *B*), then an URL pointing at http://.../A/B/homepage would work even though *B* is empty. This is because Zope starts to look for *homepage* in *B*, doesn't find it, and goes back up to *A*, where it's found. The reality, inevitably, is more complex than this. For the whole story, see the `Acquisition chapter in the Zope Book <http://www.plope.com/Books/2_7Edition/Acquisition.stx>`_."

# c139e55f03a842989ff0f289364ffd87
#: ../../source/glossary.rst:368
msgid "AGX is short for :term:`ArchGenXML`."
msgstr "AGX is short for :term:`ArchGenXML`."

# c31a4ac9046d4ce2be16127b6ed752ab
#: ../../source/glossary.rst:231
msgid ""
"Archetypes is a framework designed to facilitate the building of "
"applications for Plone and :term:`CMF`. Its main purpose is to provide a "
"common method for building content objects, based on schema definitions. "
"Fields can be grouped for editing, making it very simple to create wizard-"
"like forms. Archetypes is able to do all the heavy lifting needed to "
"bootstrap a content type, allowing the developer to focus on other things "
"such as business rules, planning, scaling and designing. It provides "
"features such as auto-generation of editing and presentation views. "
"Archetypes code can be generated from :term:`UML` using :term:`ArchGenXML`."
msgstr "Archetypes is a framework designed to facilitate the building of applications for Plone and :term:`CMF`. Its main purpose is to provide a common method for building content objects, based on schema definitions. Fields can be grouped for editing, making it very simple to create wizard-like forms. Archetypes is able to do all the heavy lifting needed to bootstrap a content type, allowing the developer to focus on other things such as business rules, planning, scaling and designing. It provides features such as auto-generation of editing and presentation views. Archetypes code can be generated from :term:`UML` using :term:`ArchGenXML`."

# 9f1d858818b24a1392f45b5d59d5f4b8
#: ../../source/glossary.rst:361
msgid ""
"ArchGenXML is a code-generator for CMF/Plone applications (a "
":term:`Product`) based on the :term:`Archetypes` framework. It parses UML "
"models in XMI-Format (``.xmi``, ``.zargo``, ``.zuml``), created with "
"applications such as ArgoUML, Poseidon or ObjectDomain. A brief tutorial for"
" ArchGenXML is present on the plone.org site."
msgstr "ArchGenXML is a code-generator for CMF/Plone applications (a :term:`Product`) based on the :term:`Archetypes` framework. It parses UML models in XMI-Format (``.xmi``, ``.zargo``, ``.zuml``), created with applications such as ArgoUML, Poseidon or ObjectDomain. A brief tutorial for ArchGenXML is present on the plone.org site."

# 7afc974de2b149b1bf24b090a7a94947
#: ../../source/glossary.rst:292
msgid ""
"ATContentTypes - the new content types written with Archetypes which "
"replaces the default CMF content types in Plone 2.1 onwards."
msgstr "ATContentTypes - the new content types written with Archetypes which replaces the default CMF content types in Plone 2.1 onwards."

# e22804bca0294b0a9d772cd6fa003a8e
#: ../../source/glossary.rst:337
msgid ""
"When adding (or leaving) a piece of code for backward compatibility, we use "
"a BBB comment marker with a date."
msgstr "When adding (or leaving) a piece of code for backward compatibility, we use a BBB comment marker with a date."

# baca22b3c7c547f4a4e9f31b285db606
#: ../../source/glossary.rst:68
msgid ""
"The catalog is an internal index of the content inside Plone so that it can "
"be searched. The catalog object is accessible through the :term:`ZMI` as the"
" ``portal_catalog`` object."
msgstr "The catalog is an internal index of the content inside Plone so that it can be searched. The catalog object is accessible through the :term:`ZMI` as the ``portal_catalog`` object."

# 5b4de3c66ec54a6cb2e5528041110cc3
#: ../../source/glossary.rst:243
msgid ""
"The *Content Management Framework* is a framework for building content-"
"oriented applications within Zope. It as formed the basis of Plone content "
"from the start."
msgstr "The *Content Management Framework* is a framework for building content-oriented applications within Zope. It as formed the basis of Plone content from the start."

# 25f15991be9542da980e15a1fd062b1e
#: ../../source/glossary.rst:307
msgid ""
"The *Collective* is a community code repository for Plone Products and other"
" add-ons, and is a useful place to find the very latest code for hundreds of"
" add-ons to Plone. Developers of new Plone Products are encouraged to share "
"their code via the Collective so that others can easily find it, use it, and"
" contribute fixes and improvements."
msgstr "The *Collective* is a community code repository for Plone Products and other add-ons, and is a useful place to find the very latest code for hundreds of add-ons to Plone. Developers of new Plone Products are encouraged to share their code via the Collective so that others can easily find it, use it, and contribute fixes and improvements."

# 96cba2fec5804d8f9d21b2cf66ace1b3
#: ../../source/glossary.rst:152
msgid ""
"Cascading Style Sheets is a way to separate content from presentation. Plone"
" uses this extensively, and it is a web standard `documented at the W3C web "
"site <http://www.w3.org/Style/CSS/>`_. If you want to learn CSS, we "
"recommend `the W3Schools CSS Resources "
"<http://www.w3schools.com/Css/default.asp>`_ and the `SitePoint CSS "
"Reference <http://reference.sitepoint.com/css>`_."
msgstr "Cascading Style Sheets is a way to separate content from presentation. Plone uses this extensively, and it is a web standard `documented at the W3C web site <http://www.w3.org/Style/CSS/>`_. If you want to learn CSS, we recommend `the W3Schools CSS Resources <http://www.w3schools.com/Css/default.asp>`_ and the `SitePoint CSS Reference <http://reference.sitepoint.com/css>`_."

# 42bb0213a9a041d6b0f62b9f5c5982f6
#: ../../source/glossary.rst:79
msgid ""
"A document is a page of content, usually a self-contained piece of text. "
"Documents can be written in several different formats, plain text, HTML or "
"(re)Structured Text. The default home page for a Plone site is one example "
"of a document."
msgstr "A document is a page of content, usually a self-contained piece of text. Documents can be written in several different formats, plain text, HTML or (re)Structured Text. The default home page for a Plone site is one example of a document."

# dff4e0c831544515bbd2c45b86915113
#: ../../source/glossary.rst:73
msgid ""
"Document Template Markup Language. DTML is a server-side templating language"
" used to produce dynamic pieces of content, but is now superseded by "
":term:`ZPT` for HTML and XML content. It is still used sparingly for non-XML"
" content like SQL and mail/CSS."
msgstr "Document Template Markup Language. DTML is a server-side templating language used to produce dynamic pieces of content, but is now superseded by :term:`ZPT` for HTML and XML content. It is still used sparingly for non-XML content like SQL and mail/CSS."

# 1cccd7b2642c4d2980c6e823e334b7c5
#: ../../source/glossary.rst:93
msgid ""
"Dublin Core is a standard set of metadata which enables the description of "
"resources for the purposes of discovery. See "
"https://en.wikipedia.org/wiki/Dublin_Core"
msgstr "Dublin Core is a standard set of metadata which enables the description of resources for the purposes of discovery. See https://en.wikipedia.org/wiki/Dublin_Core"

# 20c17c37b6a04c2ebc896c810e0d3862
#: ../../source/glossary.rst:462
msgid ""
"A command-line tool for automatic discovery and installation of packages "
"into a Python environment. The ``easy_install`` script is part of the "
"``setuptools`` package, which uses the :term:`Python Package Index` as its "
"source for packages."
msgstr "A command-line tool for automatic discovery and installation of packages into a Python environment. The ``easy_install`` script is part of the ``setuptools`` package, which uses the :term:`Python Package Index` as its source for packages."

# 81b5bd63b4634789ba9c9cb777e78e14
#: ../../source/glossary.rst:14
msgid "See :term:`Python egg`."
msgstr "See :term:`Python egg`."

# 825a14700daf458babd35a616cba5dbb
#: ../../source/glossary.rst:85
msgid ""
"The last day an item should show up in searches, news listings etc. Please "
"note that this doesn't actually remove or disable the item, it merely makes "
"it not show up in searches."
msgstr "The last day an item should show up in searches, news listings etc. Please note that this doesn't actually remove or disable the item, it merely makes it not show up in searches."

# c329342863204940ad99c7bc197907ec
#: ../../source/glossary.rst:89
msgid ""
"This is part of the Dublin Core metadata that is present on all Plone "
"objects."
msgstr "This is part of the Dublin Core metadata that is present on all Plone objects."

# 3473930197fa498b8e93590fe53a9bdb
#: ../../source/glossary.rst:521
msgid "An XML-based configuration system for Zope and Plone applications."
msgstr "An XML-based configuration system for Zope and Plone applications."

# e7c2fa8106be456d9cbca9ce8074858d
# 3c6200ac16ff486bb048a8036ba53fcb
#: ../../source/glossary.rst:523 ../../source/glossary.rst:531
msgid "Add reference."
msgstr "Add reference."

# 2fb03f377fd9425f805bc91c570d946b
#: ../../source/glossary.rst:506
msgid ""
"UNIX standard software translation tool. See "
"http://www.gnu.org/software/gettext/"
msgstr "UNIX standard software translation tool. See http://www.gnu.org/software/gettext/"

# 0431e45528964201a1972ffbf291696e
#: ../../source/glossary.rst:499
msgid "See the grok project documentation."
msgstr "See the grok project documentation."

# a1ce0c52041e45f78f41a2252d66a20f
#: ../../source/glossary.rst:135
msgid ""
"i18n is shorthand for \"internationalization\" (the letter I, 18 letters, "
"the letter N) - and refers to the process of preparing a program so that it "
"can be used in multiple languages without further altering the source. Plone"
" is fully internationalized."
msgstr "i18n is shorthand for \"internationalization\" (the letter I, 18 letters, the letter N) - and refers to the process of preparing a program so that it can be used in multiple languages without further altering the source. Plone is fully internationalized."

# 6372fe02649c47879ac669df0e877ffc
#: ../../source/glossary.rst:510
msgid ""
"Support tool to create and update message catalogs from instrumented source "
"code."
msgstr "Support tool to create and update message catalogs from instrumented source code."

# a27f91b845104303b1ddde15b0609cd3
#: ../../source/glossary.rst:534
msgid ""
"JavaScript Object Notation. JSON is a lightweight text-based open standard "
"designed for human-readable data interchange. In short, it's a string that "
"looks like a JavaScript array, but is constrained to 6 simple data types. It"
" can be parsed by many languages."
msgstr "JavaScript Object Notation. JSON is a lightweight text-based open standard designed for human-readable data interchange. In short, it's a string that looks like a JavaScript array, but is constrained to 6 simple data types. It can be parsed by many languages."

# 8cdecb8e0f624184b2bfb92f8d14beab
#: ../../source/glossary.rst:254
msgid ""
"*Kinetic Style Sheets* is a client-side framework for implementing rich user"
" interfaces with AJAX functionality. It allows attaching actions to elements"
" using a CSS-like rule syntax. KSS was added to Plone in Plone 3 and removed"
" in Plone 4.3, because JQuery made it obsolete."
msgstr "*Kinetic Style Sheets* is a client-side framework for implementing rich user interfaces with AJAX functionality. It allows attaching actions to elements using a CSS-like rule syntax. KSS was added to Plone in Plone 3 and removed in Plone 4.3, because JQuery made it obsolete."

# 252e68caf440467fb58485285502a755
#: ../../source/glossary.rst:210
msgid ""
"Kupu is the user-friendly graphical HTML editor component that used to be "
"bundled with Plone, starting with version 2.1. It has since been replaced by"
" :term:`TinyMCE`."
msgstr "Kupu is the user-friendly graphical HTML editor component that used to be bundled with Plone, starting with version 2.1. It has since been replaced by :term:`TinyMCE`."

# b6d92abbedf34cc68426c3c2abaa79e1
#: ../../source/glossary.rst:141
msgid ""
"Localization is the actual preparing of data for a particular language. For "
"example Plone is i18n aware and has localization for several languages. The "
"term l10n is formed by the first and last letter of the word and the number "
"of letters in between."
msgstr "Localization is the actual preparing of data for a particular language. For example Plone is i18n aware and has localization for several languages. The term l10n is formed by the first and last letter of the word and the number of letters in between."

# 710fa90716d3412f929e5a5052918c6a
#: ../../source/glossary.rst:98
msgid ""
"A layer is a set of templates and scripts that get presented to the user. By"
" combining these layers, you create what is referred to as a :term:`skin`. "
"The order of layers is important, the topmost layers will be examined first "
"when rendering a page. Each layer is an entry in ``portal_skins`` -> "
"'Contents', and is usually a Filesystem Directory View or a Folder.  See "
"http://plone.org/documentation/manual/theme-"
"reference/buildingblocks/skin/layers"
msgstr "A layer is a set of templates and scripts that get presented to the user. By combining these layers, you create what is referred to as a :term:`skin`. The order of layers is important, the topmost layers will be examined first when rendering a page. Each layer is an entry in ``portal_skins`` -> 'Contents', and is usually a Filesystem Directory View or a Folder.  See http://plone.org/documentation/manual/theme-reference/buildingblocks/skin/layers"

# 67db53b71bda4bf0a858b4810d2ae8e1
#: ../../source/glossary.rst:161
msgid ""
"Lightweight Directory Access Protocol. An internet protocol which provides a"
" specification for user-directory access by wire, attribute syntax, "
"representation of distinguished names, search filters, an URL format, a "
"schema for user-centric information, authentication methods, and transport "
"layer security. Example: an email client might connect to an LDAP server in "
"order to look up an email address for a person by a person's name."
msgstr "Lightweight Directory Access Protocol. An internet protocol which provides a specification for user-directory access by wire, attribute syntax, representation of distinguished names, search filters, an URL format, a schema for user-centric information, authentication methods, and transport layer security. Example: an email client might connect to an LDAP server in order to look up an email address for a person by a person's name."

# 2673d190e8b248cdb9fcf06e5d0b6dd8
#: ../../source/glossary.rst:170
msgid ""
"The *Manager* Security role is a standard role in Zope. A user with the "
"Manager role has ALL permissions except the Take Ownership permission. Also "
"commonly known as Administrator or root in other systems."
msgstr "The *Manager* Security role is a standard role in Zope. A user with the Manager role has ALL permissions except the Take Ownership permission. Also commonly known as Administrator or root in other systems."

# 4ce402f3d565418f8d6249c1ce4064a7
#: ../../source/glossary.rst:374
msgid "Macro Expansion Template Attribute Language. See :term:`ZPT`."
msgstr "Macro Expansion Template Attribute Language. See :term:`ZPT`."

# 9b2fb173dd3b4bf0bb3e1244eb9bd3fc
#: ../../source/glossary.rst:345
msgid ""
"A monkey patch is a way to modify the behaviour of Zope or a Product without"
" altering the original code. Useful for fixes that have to live alongside "
"the original code for a while, like security hotfixes, behavioural changes, "
"etc."
msgstr "A monkey patch is a way to modify the behaviour of Zope or a Product without altering the original code. Useful for fixes that have to live alongside the original code for a while, like security hotfixes, behavioural changes, etc."

# 4d26efd6d97c4dc2951515a7ccd9bfa8
#: ../../source/glossary.rst:350
msgid ""
"The term \"monkey patch\" seems to have originated as follows: First it was "
"\"guerrilla patch\", referring to code that sneakily changes other code at "
"runtime without any rules. In Zope 2, sometimes these patches conflict. This"
" term went around Zope Corporation for a while. People heard it as \"gorilla"
" patch\", though, since the two words sound very much alike, and the word "
"gorilla is heard more often. So, when someone created a guerrilla patch very"
" carefully and tried to avoid any battles, they tried to make it sound less "
"forceful by calling it a monkey patch. The term stuck."
msgstr "The term \"monkey patch\" seems to have originated as follows: First it was \"guerrilla patch\", referring to code that sneakily changes other code at runtime without any rules. In Zope 2, sometimes these patches conflict. This term went around Zope Corporation for a while. People heard it as \"gorilla patch\", though, since the two words sound very much alike, and the word gorilla is heard more often. So, when someone created a guerrilla patch very carefully and tried to avoid any battles, they tried to make it sound less forceful by calling it a monkey patch. The term stuck."

# 28604fd6487349e0a3eb1d85c8ab83e0
#: ../../source/glossary.rst:468
msgid ""
"A feature of setuptools which makes it possible to distribute multiple, "
"separate packages sharing a single top-level namespace. For example, the "
"packages ``plone.theme`` and ``plone.portlets`` both share the top-level "
"``plone`` namespace, but they are distributed as separate eggs. When "
"installed, each egg's source code has its own directory (or possibly a "
"compressed archive of that directory).  Namespace packages eliminate the "
"need to distribute one giant plone package, with a top-level plone directory"
" containing all possible children."
msgstr "A feature of setuptools which makes it possible to distribute multiple, separate packages sharing a single top-level namespace. For example, the packages ``plone.theme`` and ``plone.portlets`` both share the top-level ``plone`` namespace, but they are distributed as separate eggs. When installed, each egg's source code has its own directory (or possibly a compressed archive of that directory).  Namespace packages eliminate the need to distribute one giant plone package, with a top-level plone directory containing all possible children."

# 9888babc692248108f3e05f0df53cd40
#: ../../source/glossary.rst:248
msgid ""
"A distributed identity system. Using a single URI provider an individual is "
"able to login to any web site that accepts OpenID using the URI and a "
"password. Plone implements OpenID as a :term:`PAS` plug-in."
msgstr "A distributed identity system. Using a single URI provider an individual is able to login to any web site that accepts OpenID using the URI and a password. Plone implements OpenID as a :term:`PAS` plug-in."

# a567659e278d4941a90cc49fbe0badb0
#: ../../source/glossary.rst:190
msgid ""
"The Pluggable Authentication Service (PAS) is a framework for handling "
"authentication in Zope 2. PAS is a Zope ``acl_users`` folder object that "
"uses \"plugins\" that can implement various authentication interfaces (for "
"example :term:`LDAP` and :term:`OpenID`) that plug into the PAS framework ."
"  Zope 3 also uses a design inspired by PAS. PAS was integrated into Plone "
"at the 2005 San Jose Sprint."
msgstr "The Pluggable Authentication Service (PAS) is a framework for handling authentication in Zope 2. PAS is a Zope ``acl_users`` folder object that uses \"plugins\" that can implement various authentication interfaces (for example :term:`LDAP` and :term:`OpenID`) that plug into the PAS framework .  Zope 3 also uses a design inspired by PAS. PAS was integrated into Plone at the 2005 San Jose Sprint."

# 355b26bb652c43228406fa09d964f5fa
#: ../../source/glossary.rst:278
msgid ""
"*PLone Improvement Proposal* (just like Python's PEPs: Python Enhancement "
"Proposals). These are documents written to structure and organise proposals "
"for the improvement of Plone."
msgstr "*PLone Improvement Proposal* (just like Python's PEPs: Python Enhancement Proposals). These are documents written to structure and organise proposals for the improvement of Plone."

# 571efbc2f93e41d98841629857eb7c06
#: ../../source/glossary.rst:282
msgid ""
"Motivation, deliverables, risks and a list of people willing to do the work "
"must be included. This document is submitted to the `Framework Team "
"<http://plone.org/team/FrameworkTeam>`_, who reviews the proposal and "
"decides if it's suitable to be included in the next Plone release or not."
msgstr "Motivation, deliverables, risks and a list of people willing to do the work must be included. This document is submitted to the `Framework Team <http://plone.org/team/FrameworkTeam>`_, who reviews the proposal and decides if it's suitable to be included in the next Plone release or not."

# 6a256ebb782d4f5c8d1cb750c67a7b43
#: ../../source/glossary.rst:288
msgid ""
"See more info about how to write a `PLIP "
"<http://dev.plone.org/plone/wiki/PLIP>`_."
msgstr "See more info about how to write a `PLIP <http://dev.plone.org/plone/wiki/PLIP>`_."

# ae55ecea1fec47dcb680f4acf9f403d2
#: ../../source/glossary.rst:549
msgid ""
"A Plonista is a member of the Plone community. It can be somebody who loves "
"Plone, or uses Plone, or someone who spreads Plone and Plone knowledge. It "
"can also be someone who is a Plone developer, or it can be all of the above."
msgstr "A Plonista is a member of the Plone community. It can be somebody who loves Plone, or uses Plone, or someone who spreads Plone and Plone knowledge. It can also be someone who is a Plone developer, or it can be all of the above."

# c5b5cfda21cf4ddcafc240b223af651e
#: ../../source/glossary.rst:226
msgid ""
"A Plone-specific module that extends Plone functionality and can be managed "
"via the Plone Control Panel. Plone Products often integrate non-Plone-"
"specific modules for use within the Plone context."
msgstr "A Plone-specific module that extends Plone functionality and can be managed via the Plone Control Panel. Plone Products often integrate non-Plone-specific modules for use within the Plone context."

# 054d7b12aee148ca879ac0abad596bd4
#: ../../source/glossary.rst:435
msgid ""
"A widely used Python packaging format which consists of a zip or ``.tar.gz``"
" archive with some metadata information. It was introduced by `setuptools "
"<http://peak.telecommunity.com/DevCenter/EasyInstall>`_ which has since been"
" superseded by `Distribute <http://packages.python.org/distribute/>`_."
msgstr "A widely used Python packaging format which consists of a zip or ``.tar.gz`` archive with some metadata information. It was introduced by `setuptools <http://peak.telecommunity.com/DevCenter/EasyInstall>`_ which has since been superseded by `Distribute <http://packages.python.org/distribute/>`_."

# 797b884f42bc48f4a371e02d949ac03c
#: ../../source/glossary.rst:442
msgid ""
"A way to package and distribute Python packages. Each egg contains a "
"``setup.py`` file with metadata (such as the author's name and email address"
" and licensing information), as well as information about dependencies. "
"``setuptools``, the Python library that powers the egg mechanism, is able to"
" automatically find and download dependencies for eggs that you install. It "
"is even possible for two different eggs to concurrently use different "
"versions of the same dependency. Eggs also support a feature called *entry "
"points*, a kind of generic plug-in mechanism. Much more detail is available "
"at the `PEAK website <http://peak.telecommunity.com/DevCenter/setuptools>`_."
msgstr "A way to package and distribute Python packages. Each egg contains a ``setup.py`` file with metadata (such as the author's name and email address and licensing information), as well as information about dependencies. ``setuptools``, the Python library that powers the egg mechanism, is able to automatically find and download dependencies for eggs that you install. It is even possible for two different eggs to concurrently use different versions of the same dependency. Eggs also support a feature called *entry points*, a kind of generic plug-in mechanism. Much more detail is available at the `PEAK website <http://peak.telecommunity.com/DevCenter/setuptools>`_."

# df83f13c5d0b4ac29af9ac4c02071c3b
#: ../../source/glossary.rst:422
msgid ""
"A general term describing a redistributable Python module. At the most basic"
" level, a package is a directory with an ``__init__.py`` file, which can be "
"blank."
msgstr "A general term describing a redistributable Python module. At the most basic level, a package is a directory with an ``__init__.py`` file, which can be blank."

# 9f4b38d4bd2548c195969322c6c618d9
#: ../../source/glossary.rst:454
msgid ""
"The Python community's index of thousands of downloadable Python packages. "
"It is available as a website to browse, with the ability to search for a "
"particular package. More importantly, setuptools-based packaging tools (most"
" notably, ``buildout`` and ``easy_install``) can query this index to "
"download and install eggs automatically. Also known as the Cheese Shop or "
"PyPI."
msgstr "The Python community's index of thousands of downloadable Python packages. It is available as a website to browse, with the ability to search for a particular package. More importantly, setuptools-based packaging tools (most notably, ``buildout`` and ``easy_install``) can query this index to download and install eggs automatically. Also known as the Cheese Shop or PyPI."

# b87347bc9b6d4f90a1614635823fc088
#: ../../source/glossary.rst:411
msgid ""
"The order and location of folders in which the Python interpreter will look "
"for modules. It's available in python via ``sys.path``. When Zope is "
"running, this typically includes the global Python modules making up the "
"standard library, the interpreter's site-packages directory, where third "
"party \"global\" modules and eggs are installed, the Zope software home, and"
" the ``lib/python`` directory inside the instance home. It is possible for "
"python scripts to include additional paths in the Python path during "
"runtime. This ability is used by ``zc.buildout``."
msgstr "The order and location of folders in which the Python interpreter will look for modules. It's available in python via ``sys.path``. When Zope is running, this typically includes the global Python modules making up the standard library, the interpreter's site-packages directory, where third party \"global\" modules and eggs are installed, the Zope software home, and the ``lib/python`` directory inside the instance home. It is possible for python scripts to include additional paths in the Python path during runtime. This ability is used by ``zc.buildout``."

# cc81cebb099e441684c875f334055ccd
#: ../../source/glossary.rst:321
msgid ""
"Rapid Application Development - A term applied to development tools to refer"
" to any number of features that make programming easier. :term:`Archetypes` "
"and :term:`ArchGenXML` are examples of these from the Plone universe."
msgstr "Rapid Application Development - A term applied to development tools to refer to any number of features that make programming easier. :term:`Archetypes` and :term:`ArchGenXML` are examples of these from the Plone universe."

# 0371bd3327554ae6bbcc75a8c82d5c59
#: ../../source/glossary.rst:147
msgid ""
"Each page view by a client generates a request to Plone. This incoming "
"request is encapsulated in a *request* object in Zope, usually called "
"REQUEST (or lowercase \"request\" in the case of ZPT)."
msgstr "Each page view by a client generates a request to Plone. This incoming request is encapsulated in a *request* object in Zope, usually called REQUEST (or lowercase \"request\" in the case of ZPT)."

# 2b4d052267444181a9221d604d509391
#: ../../source/glossary.rst:296
msgid ""
"A piece of Plone infrastructure that allows CSS/Javascript declarations to "
"be contained in separate, logical files before ultimately being appended to "
"the existing Plone CSS/Javascript files on page delivery. Primarily enables "
"Product authors to \"register\" new CSS/Javascript without needing to touch "
"Plone's templates, but also allows for selective inclusion of CSS/Javascript"
" files and reduces page load by minimizing individual calls to separate "
"blocks of CSS/Javascript files. Found in the :term:`ZMI` under "
"``portal_css`` and ``portal_javascript``."
msgstr "A piece of Plone infrastructure that allows CSS/Javascript declarations to be contained in separate, logical files before ultimately being appended to the existing Plone CSS/Javascript files on page delivery. Primarily enables Product authors to \"register\" new CSS/Javascript without needing to touch Plone's templates, but also allows for selective inclusion of CSS/Javascript files and reduces page load by minimizing individual calls to separate blocks of CSS/Javascript files. Found in the :term:`ZMI` under ``portal_css`` and ``portal_javascript``."

# cedd9b5ccc68460c999299b8344f8fd5
#: ../../source/glossary.rst:17
msgid ""
"The standard plaintext markup language used for Python documentation: "
"http://docutils.sourceforge.net/rst.html"
msgstr "The standard plaintext markup language used for Python documentation: http://docutils.sourceforge.net/rst.html"

# 653cf0332a8444a3a8395fd386bdfb4e
#: ../../source/glossary.rst:20
msgid ""
"`reStructuredText <http://docutils.sourceforge.net/rst.html>`_ is an easy-"
"to-read plaintext markup syntax and parser system. It is useful for in-line "
"program documentation (such as Python docstrings), for quickly creating "
"simple web pages, and for standalone documents. reStructuredText is designed"
" to be extensible for specific application domains. The reStructuredText "
"parser is a component of `Docutils "
"<http://docutils.sourceforge.net/index.html>`_."
msgstr "`reStructuredText <http://docutils.sourceforge.net/rst.html>`_ is an easy-to-read plaintext markup syntax and parser system. It is useful for in-line program documentation (such as Python docstrings), for quickly creating simple web pages, and for standalone documents. reStructuredText is designed to be extensible for specific application domains. The reStructuredText parser is a component of `Docutils <http://docutils.sourceforge.net/index.html>`_."

# cd4ed7d14a6f4f018fb9b48a4530515d
#: ../../source/glossary.rst:28
msgid ""
"reStructuredText is a revision and reinterpretation of the `StructuredText "
"<http://plone.org/documentation/glossary/stx>`_ and `Setext "
"<http://docutils.sourceforge.net/mirror/setext.html>`_ lightweight markup "
"systems."
msgstr "reStructuredText is a revision and reinterpretation of the `StructuredText <http://plone.org/documentation/glossary/stx>`_ and `Setext <http://docutils.sourceforge.net/mirror/setext.html>`_ lightweight markup systems."

# 5982b84d3aed4d4492e5810209cf02c1
#: ../../source/glossary.rst:107
msgid ""
"A collection of template layers (see :term:`layer`) is used as the search "
"path when a page is rendered and the different parts look up template "
"fragments.  Skins are defined in the :term:`ZMI` in ``portal_skins`` tool. "
"Used for both presentation and code customizations."
msgstr "A collection of template layers (see :term:`layer`) is used as the search path when a page is rendered and the different parts look up template fragments.  Skins are defined in the :term:`ZMI` in ``portal_skins`` tool. Used for both presentation and code customizations."

# c08256c2ff844a778d7a3a69fcf9084c
#: ../../source/glossary.rst:34
msgid ""
"A :term:`ZCML` *slug* is a one-line file created in a Zope instance's ``etc"
"/package-includes`` directory, with a name like ``my.package-"
"configure.zcml``. The contents of the file would be something like: "
"``<include package=\"my.package\" file=\"configure.zcml\" />``"
msgstr "A :term:`ZCML` *slug* is a one-line file created in a Zope instance's ``etc/package-includes`` directory, with a name like ``my.package-configure.zcml``. The contents of the file would be something like: ``<include package=\"my.package\" file=\"configure.zcml\" />``"

# 048a6c64b30541d9a404dc6a33ce7321
#: ../../source/glossary.rst:40
msgid "This is the Zope 3 way to load a particular package."
msgstr "This is the Zope 3 way to load a particular package."

# dc4909c83f0448758afe318f04dc94a5
#: ../../source/glossary.rst:381
msgid ""
"The directory inside the Zope installation (on the filesystem) that contains"
" all the Python code that makes up the core of the Zope application server. "
"The various Zope packages are distributed here. Also referred to as the "
"``SOFTWARE_HOME`` environment variable. It varies from one system to the "
"next, depending where you or your packaging system installed Zope. You can "
"find the value of this in the *ZMI > Control Panel*."
msgstr "The directory inside the Zope installation (on the filesystem) that contains all the Python code that makes up the core of the Zope application server. The various Zope packages are distributed here. Also referred to as the ``SOFTWARE_HOME`` environment variable. It varies from one system to the next, depending where you or your packaging system installed Zope. You can find the value of this in the *ZMI > Control Panel*."

# c72cb92aa32e4ce58932a290956cc6c6
#: ../../source/glossary.rst:315
msgid ""
"Based on ideas from the extreme programming (XP) community. A sprint is a "
"three to five day focused development session, in which developers pair in a"
" room and focus on building a particular subsystem. See "
"http://plone.org/events/sprints"
msgstr "Based on ideas from the extreme programming (XP) community. A sprint is a three to five day focused development session, in which developers pair in a room and focus on building a particular subsystem. See http://plone.org/events/sprints"

# fb30e8354aa64b4f83c11b3a6055648a
#: ../../source/glossary.rst:59
msgid ""
"Structured Text is a simple markup technique that is useful when you don't "
"want to resort to HTML for creating web content. It uses indenting for "
"structure, and other markup for formatting. It has been superseded by "
":term:`reStructuredText`, but some people still prefer the old version, as "
"it's simpler. More information in the `How-to section of plone.org "
"<http://plone.org/documentation/howto/structured-text-cheatsheet>`_."
msgstr "Structured Text is a simple markup technique that is useful when you don't want to resort to HTML for creating web content. It uses indenting for structure, and other markup for formatting. It has been superseded by :term:`reStructuredText`, but some people still prefer the old version, as it's simpler. More information in the `How-to section of plone.org <http://plone.org/documentation/howto/structured-text-cheatsheet>`_."

# 91078144fae34cf1a650dc373f6101e5
#: ../../source/glossary.rst:176
msgid ""
"Syndication shows you the several most recently updated objects in a folder "
"in RSS format. This format is designed to be read by other programs."
msgstr "Syndication shows you the several most recently updated objects in a folder in RSS format. This format is designed to be read by other programs."

# bf0150c7d861436096f21bd49897cd6f
#: ../../source/glossary.rst:371
msgid "Template Attribute Language. See :term:`ZPT`."
msgstr "Template Attribute Language. See :term:`ZPT`."

# 2fec5b4d8448417586af3fb8d861d538
#: ../../source/glossary.rst:377
msgid ""
":term:`TAL` Expression Syntax. The syntax of the expressions used in TAL "
"attributes."
msgstr ":term:`TAL` Expression Syntax. The syntax of the expressions used in TAL attributes."

# e7442cac98f54c868a707e23871a6e8f
#: ../../source/glossary.rst:215
msgid "A graphical HTML editor bundled with Plone."
msgstr "A graphical HTML editor bundled with Plone."

# e0054d3d968b4205900b890f812a7a73
#: ../../source/glossary.rst:341
msgid ""
"The TODO marker in source code records new features, non-critical "
"optimization notes, design changes, etc."
msgstr "The TODO marker in source code records new features, non-critical optimization notes, design changes, etc."

# b5bce0b1d1944b01bc23b87b19ef15d1
#: ../../source/glossary.rst:260
msgid ""
"A Python \"traceback\" is a detailed error message generated when an error "
"occurs in executing Python code. Since Plone, running atop Zope, is a Python"
" application, most Plone errors will generate a Python traceback. If you are"
" filing an issue report regarding a Plone or Plone-product error, you should"
" try to include a traceback log entry with the report."
msgstr "A Python \"traceback\" is a detailed error message generated when an error occurs in executing Python code. Since Plone, running atop Zope, is a Python application, most Plone errors will generate a Python traceback. If you are filing an issue report regarding a Plone or Plone-product error, you should try to include a traceback log entry with the report."

# 86dca0e133134f3fb3fded38ca580093
#: ../../source/glossary.rst:267
msgid ""
"To find the traceback, check your ``event.log`` log file. Alternatively, use"
" the ZMI to check the ``error_log`` object in your Plone folder. Note that "
"your Zope must be running in *debug* mode in order to log tracebacks."
msgstr "To find the traceback, check your ``event.log`` log file. Alternatively, use the ZMI to check the ``error_log`` object in your Plone folder. Note that your Zope must be running in *debug* mode in order to log tracebacks."

# e37dd50de6af4ab8896a2b3d13bdb3f5
#: ../../source/glossary.rst:272
msgid ""
"A traceback will be included with nearly all error entries. A traceback will"
" look something like this: \"Traceback (innermost last): ...  "
"AttributeError: adapters\" They can be very long. The most useful "
"information is generally at the end."
msgstr "A traceback will be included with nearly all error entries. A traceback will look something like this: \"Traceback (innermost last): ...  AttributeError: adapters\" They can be very long. The most useful information is generally at the end."

# bb08eae89cee40fdae655dc5aff0b505
#: ../../source/glossary.rst:514
msgid ""
"Publishing an object from the ZODB by traversing its parent objects, "
"resolving security and names in scope. See the `Acquisition chapter in the "
"Zope 2 book <http://docs.zope.org/zope2/zope2book/ZEO.html>`_. "
"http://docs.zope.org/zope2/zope2book/Acquisition.html"
msgstr "Publishing an object from the ZODB by traversing its parent objects, resolving security and names in scope. See the `Acquisition chapter in the Zope 2 book <http://docs.zope.org/zope2/zope2book/ZEO.html>`_. http://docs.zope.org/zope2/zope2book/Acquisition.html"

# 675aae63f0084fdca95820175755e058
#: ../../source/glossary.rst:185
msgid ""
"Actions done TTP are performed \"Through the Plone\" interface. It is "
"normally a lazy way of telling you that you should not add things from the "
"ZMI, as is the case for adding content, for example."
msgstr "Actions done TTP are performed \"Through the Plone\" interface. It is normally a lazy way of telling you that you should not add things from the ZMI, as is the case for adding content, for example."

# 38034e4b0e3441a187ebe53defdd57bf
#: ../../source/glossary.rst:181
msgid ""
"This is a general term meaning an action can be performed \"Through The "
"Web,\" as opposed to, say, being done programmatically."
msgstr "This is a general term meaning an action can be performed \"Through The Web,\" as opposed to, say, being done programmatically."

# b5a0f7cce62c49f6980c7f04eec7782d
#: ../../source/glossary.rst:218
msgid ""
"The *Unified Modeling Language* is a general-purpose modeling language that "
"includes a standardized graphical notation used to create an abstract model "
"of a system, referred to as a *UML model*. With the use of "
":term:`ArchGenXML`, this can be used to generate code for CMF/Plone "
"applications (a :term:`Product`) based on the Archetypes framework."
msgstr "The *Unified Modeling Language* is a general-purpose modeling language that includes a standardized graphical notation used to create an abstract model of a system, referred to as a *UML model*. With the use of :term:`ArchGenXML`, this can be used to generate code for CMF/Plone applications (a :term:`Product`) based on the Archetypes framework."

# f5fc4b47cce74030bc20db25ba7ed4c8
#: ../../source/glossary.rst:526
msgid ""
"``virtualenv`` is a tool for creating a project directory with a Python "
"interpreter that is isolated from the rest of the system. Modules that you "
"install in such an environment remain local to it, and do not impact your "
"system Python or other projects."
msgstr "``virtualenv`` is a tool for creating a project directory with a Python interpreter that is isolated from the rest of the system. Modules that you install in such an environment remain local to it, and do not impact your system Python or other projects."

# ba23f39ddc924782a1824c7e2bb136f6
#: ../../source/glossary.rst:43
msgid ""
"A Zope technology that supports virtual hosting. See `VirtualHostMonster URL"
" rewriting mechanism "
"<http://docs.zope.org/zope2/zope2book/VirtualHosting.html>`_"
msgstr "A Zope technology that supports virtual hosting. See `VirtualHostMonster URL rewriting mechanism <http://docs.zope.org/zope2/zope2book/VirtualHosting.html>`_"

# 84e2738ade7a4732b0b8b6a7f857c8f2
#: ../../source/glossary.rst:48
msgid ""
"Workflow is a very powerful way of mimicking business processes — it is also"
" the way security settings are handled in Plone."
msgstr "Workflow is a very powerful way of mimicking business processes — it is also the way security settings are handled in Plone."

# 0c9d53caef0f41b986ba05043a2862ae
#: ../../source/glossary.rst:327
msgid ""
"XXX is a marker in the comments of the source code that should only be used "
"during development to note things that need to be taken care of before a "
"final (trunk) commit. Ideally, one should not expect to see XXXs in released"
" software. XXX shall not be used to record new features, non-critical "
"optimization, design changes, etc. If you want to record things like that, "
"use TODO comments instead. People making a release shouldn't care about "
"TODOs, but they ought to be annoyed to find XXXs."
msgstr "XXX is a marker in the comments of the source code that should only be used during development to note things that need to be taken care of before a final (trunk) commit. Ideally, one should not expect to see XXXs in released software. XXX shall not be used to record new features, non-critical optimization, design changes, etc. If you want to record things like that, use TODO comments instead. People making a release shouldn't care about TODOs, but they ought to be annoyed to find XXXs."

# 27360741f4f147cb84b8ff1ee9aa2291
#: ../../source/glossary.rst:540
msgid ""
"The Zope Component Architecture (ZCA) is a Python framework for supporting "
"component-based design and programming. It is very well suited to developing"
" large Python software systems. The ZCA is not specific to the Zope web "
"application server: it can be used for developing any Python application. "
"From `A Comprehensive Guide to Zope Component Architecture "
"<http://www.muthukadan.net/docs/zca.html>`_."
msgstr "The Zope Component Architecture (ZCA) is a Python framework for supporting component-based design and programming. It is very well suited to developing large Python software systems. The ZCA is not specific to the Zope web application server: it can be used for developing any Python application. From `A Comprehensive Guide to Zope Component Architecture <http://www.muthukadan.net/docs/zca.html>`_."

# 4adb0be3c159431d877a5a3941ea8c78
#: ../../source/glossary.rst:479
msgid ""
"Zope Configuration Markup Language. Zope 3 separates policy from the actual "
"code and moves it out to separate configuration files, typically a "
"``configure.zcml`` file in a buildout. This file configures the Zope "
"instance. 'Configuration' might be a bit misleading here and should be "
"thought or more as wiring. ZCML, the XML-based configuration language that "
"is used for this, is tailored to do component registration and security "
"declarations, for the most part. By enabling or disabling certain components"
" in ZCML, you can configure certain policies of the overall application. In "
"Zope 2, enabling and disabling components means to drop in or remove a "
"certain Zope 2 product. When it's there, it's automagically imported and "
"loaded. This is not the case in Zope 3. If you don't enable it explicitly, "
"it will not be found."
msgstr "Zope Configuration Markup Language. Zope 3 separates policy from the actual code and moves it out to separate configuration files, typically a ``configure.zcml`` file in a buildout. This file configures the Zope instance. 'Configuration' might be a bit misleading here and should be thought or more as wiring. ZCML, the XML-based configuration language that is used for this, is tailored to do component registration and security declarations, for the most part. By enabling or disabling certain components in ZCML, you can configure certain policies of the overall application. In Zope 2, enabling and disabling components means to drop in or remove a certain Zope 2 product. When it's there, it's automagically imported and loaded. This is not the case in Zope 3. If you don't enable it explicitly, it will not be found."

# 08acffe7da0249ee87411639ddc2f677
#: ../../source/glossary.rst:493
msgid ""
"The :term:`grok` project has taken a different approach to the same problem,"
" and allows component registration etc. to be done declaratively from Python"
" code. Both approaches are possible in Plone."
msgstr "The :term:`grok` project has taken a different approach to the same problem, and allows component registration etc. to be done declaratively from Python code. Both approaches are possible in Plone."

# 6a66e41452d14400992b13a52f1f5ddd
#: ../../source/glossary.rst:403
msgid ""
"ZEO (Zope Enterprise Objects) is a scaling solution used with Zope. The ZEO "
"server is a storage server that allows multiple Zope instances, called ZEO "
"clients, to connect to a single database.  ZEO clients may be distributed "
"across multiple machines.  For additional info, see `the related chapter in "
"The Zope Book <http://docs.zope.org/zope2/zope2book/ZEO.html>`_."
msgstr "ZEO (Zope Enterprise Objects) is a scaling solution used with Zope. The ZEO server is a storage server that allows multiple Zope instances, called ZEO clients, to connect to a single database.  ZEO clients may be distributed across multiple machines.  For additional info, see `the related chapter in The Zope Book <http://docs.zope.org/zope2/zope2book/ZEO.html>`_."

# 400e4470a1da42f8a149e6d8d65242c4
#: ../../source/glossary.rst:114
msgid ""
"The *Zope Management Interface*. Zope has a built in Management Interface "
"that is accessible through the web. Accessing is as simple as appending "
"``/manage`` to your URL, for example: ``http://localhost/manage`` - or "
"visiting Plone Setup and clicking the *Zope Management Interface* link "
"(Click 'View' to go back to the Plone site). Be careful in there, though - "
"it's the \"geek view\" of things, and is not straightforward, nor does it "
"protect you from doing stupid things. :)"
msgstr "The *Zope Management Interface*. Zope has a built in Management Interface that is accessible through the web. Accessing is as simple as appending ``/manage`` to your URL, for example: ``http://localhost/manage`` - or visiting Plone Setup and clicking the *Zope Management Interface* link (Click 'View' to go back to the Plone site). Be careful in there, though - it's the \"geek view\" of things, and is not straightforward, nor does it protect you from doing stupid things. :)"

# 56f5f103d71a4244a0448c12da7d9868
#: ../../source/glossary.rst:52
msgid ""
"The Zope Object Database is where your content is normally stored when you "
"are using Plone. The default storage backend of the ZODB is *filestorage*, "
"which stores the database on the file system in the file(s) such as "
"``Data.fs``, normally located in the ``var`` directory."
msgstr "The Zope Object Database is where your content is normally stored when you are using Plone. The default storage backend of the ZODB is *filestorage*, which stores the database on the file system in the file(s) such as ``Data.fs``, normally located in the ``var`` directory."

# 5209601e09f44e8ca19d49ffbd83bf42
#: ../../source/glossary.rst:390
msgid ""
"An operating system process that handles HTTP interaction with a Zope "
"database (:term:`ZODB`). In other words, the Zope web server process.  "
"Alternatively, the Python code and other configuration files necessary for "
"running this process."
msgstr "An operating system process that handles HTTP interaction with a Zope database (:term:`ZODB`). In other words, the Zope web server process.  Alternatively, the Python code and other configuration files necessary for running this process."

# 30fb5608054f45afbcb20958abb3080f
#: ../../source/glossary.rst:395
msgid ""
"One Zope installation can support multiple instances. Use the buildout "
"recipe ``plone.recipe.zope2instance`` to create new Zope instances in a "
"buildout environment."
msgstr "One Zope installation can support multiple instances. Use the buildout recipe ``plone.recipe.zope2instance`` to create new Zope instances in a buildout environment."

# e431264a3e6f432cb15d759a511e41fe
#: ../../source/glossary.rst:399
msgid ""
"Several Zope instances may serve data from a single ZODB using a ZEO server "
"on the back-end."
msgstr "Several Zope instances may serve data from a single ZODB using a ZEO server on the back-end."

# e549618b5ac14395b9b3205f4678652d
#: ../../source/glossary.rst:427
msgid ""
"A special kind of Python package used to extend Zope. In old versions of "
"Zope, all products were directories inside the special *Products* directory "
"of a Zope instance; these would have a Python module name beginning with "
"``Products``. For example, the core of Plone is a product called *CMFPlone*,"
" known in Python as ``Products.CMFPlone``."
msgstr "A special kind of Python package used to extend Zope. In old versions of Zope, all products were directories inside the special *Products* directory of a Zope instance; these would have a Python module name beginning with ``Products``. For example, the core of Plone is a product called *CMFPlone*, known in Python as ``Products.CMFPlone``."

# 124056f1c1cc4143adede3041c40afba
#: ../../source/glossary.rst:124
msgid "Zope Public License, a BSD-style license that Zope is licensed under."
msgstr "Zope Public License, a BSD-style license that Zope is licensed under."

# 23ab69d7c3da4d5a9884b443806bfd0d
#: ../../source/glossary.rst:128
msgid ""
"*Zope Page Templates* is the templating language that is used to render the "
"Plone pages. It is implemented as two XML namespaces, making it possible to "
"create templates that look like normal HTML/XML to editors. See "
"http://docs.zope.org/zope2/zope2book/AppendixC.html"
msgstr "*Zope Page Templates* is the templating language that is used to render the Plone pages. It is implemented as two XML namespaces, making it possible to create templates that look like normal HTML/XML to editors. See http://docs.zope.org/zope2/zope2book/AppendixC.html"
