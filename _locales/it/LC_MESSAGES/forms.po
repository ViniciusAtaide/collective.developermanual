# 
msgid ""
msgstr ""
"Project-Id-Version: Plone Developer Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-09 14:17+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../forms/files.rst:3
msgid "Files and images"
msgstr ""

#: ../../forms/files.rst:5 ../../forms/manual.rst:5
#: ../../forms/ploneformgen.rst:5 ../../forms/schemas.rst:5
#: ../../forms/schemas.rst:164 ../../forms/vocabularies.rst:5
#: ../../forms/wysiwyg.rst:5 ../../forms/z3c.form.rst:5
msgid "Description"
msgstr ""

#: ../../forms/files.rst:7
msgid ""
"How to program files and image fields for ``z3c.forms`` and Dexterity "
"content types"
msgstr ""

#: ../../forms/files.rst:13 ../../forms/manual.rst:10
#: ../../forms/ploneformgen.rst:10 ../../forms/schemas.rst:13
#: ../../forms/vocabularies.rst:14 ../../forms/wysiwyg.rst:12
#: ../../forms/z3c.form.rst:14 ../../forms/z3c.form.rst:2145
msgid "Introduction"
msgstr ""

#: ../../forms/files.rst:15
msgid ""
"This chapter discuss about file uploads and downloads using zope.schema "
"based forms and content with :doc:`Dexterity content subsystem "
"</content/dexterity>`."
msgstr ""

#: ../../forms/files.rst:20
msgid ""
"These instructions apply for Plone 4 and forward. These instructions does "
"not apply for Archetypes content or PloneFormGen."
msgstr ""

#: ../../forms/files.rst:23
msgid ""
"Plone uses \"blobs\" (large binary objects) to store file-like data in the "
"ZODB. The ZODB writes these objects to the filesystem as separate files, but"
" due to security, performance and transaction consideration, the original "
"filename is not visible. The files are stored in a distributed tree."
msgstr ""

#: ../../forms/files.rst:28
msgid "For more introduction information, see:"
msgstr ""

#: ../../forms/files.rst:30 ../../forms/files.rst:35
msgid ""
"http://developer.plone.org/reference_manuals/external/plone.app.dexterity/advanced"
"/files-and-images.html"
msgstr ""

#: ../../forms/files.rst:33
msgid "Simple content item file or image field"
msgstr ""

#: ../../forms/files.rst:38
msgid "Simple upload form example"
msgstr ""

#: ../../forms/files.rst:40
msgid ""
"The example below uses :doc:`five.grok </components/grok>` to declare the "
"form schema and form."
msgstr ""

#: ../../forms/files.rst:43
msgid ""
"We use `plone.namedfile <http://pypi.python.org/pypi/plone.namedfile>`_ for "
"the upload field, which is a CSV file. We accept the upload and then process"
" the file."
msgstr ""

#: ../../forms/files.rst:47
msgid ""
"You need to declare an ``extends`` directive to pin down required dependency"
" versions in ``buildout.cfg``. For more information, see :doc:`buildout "
"troubleshooting </troubleshooting/buildout>`."
msgstr ""

#: ../../forms/files.rst:51
msgid ""
"You also need to declare the following packages as dependencies in the "
"``install_dependencies`` directive of your ``setup.py`` file:"
msgstr ""

#: ../../forms/files.rst:54
msgid "``five.grok``,"
msgstr ""

#: ../../forms/files.rst:55
msgid "``plone.autoform``,"
msgstr ""

#: ../../forms/files.rst:56
msgid "``plone.directives.form``."
msgstr ""

#: ../../forms/files.rst:58
msgid ""
"After doing this, rerunning ``buildout`` will pull in these packages for you"
" and you will be able to import them successfully. For more information, see"
" `plone.directives.form README "
"<http://pypi.python.org/pypi/plone.directives.form>`_."
msgstr ""

#: ../../forms/files.rst:62
msgid "Code::"
msgstr ""

#: ../../forms/files.rst:193
msgid "File field contents"
msgstr ""

#: ../../forms/files.rst:195 ../../forms/files.rst:409
#: ../../forms/schemas.rst:92 ../../forms/schemas.rst:127
#: ../../forms/schemas.rst:199 ../../forms/schemas.rst:269
#: ../../forms/schemas.rst:366 ../../forms/schemas.rst:492
#: ../../forms/schemas.rst:541 ../../forms/vocabularies.rst:74
#: ../../forms/vocabularies.rst:143 ../../forms/wysiwyg.rst:361
#: ../../forms/z3c.form.rst:285 ../../forms/z3c.form.rst:407
#: ../../forms/z3c.form.rst:541 ../../forms/z3c.form.rst:598
#: ../../forms/z3c.form.rst:637 ../../forms/z3c.form.rst:700
#: ../../forms/z3c.form.rst:744 ../../forms/z3c.form.rst:769
#: ../../forms/z3c.form.rst:844 ../../forms/z3c.form.rst:984
#: ../../forms/z3c.form.rst:1304 ../../forms/z3c.form.rst:1380
#: ../../forms/z3c.form.rst:1393 ../../forms/z3c.form.rst:1447
#: ../../forms/z3c.form.rst:1678 ../../forms/z3c.form.rst:1722
#: ../../forms/z3c.form.rst:2170 ../../forms/z3c.form.rst:2189
msgid "Example::"
msgstr ""

#: ../../forms/files.rst:244
msgid "Connstring download URLs"
msgstr ""

#: ../../forms/files.rst:247
msgid "Simple example"
msgstr ""

#: ../../forms/files.rst:249
msgid "In Dexterity you can specify a ``@@download`` field for content types:"
msgstr ""

#: ../../forms/files.rst:260
msgid "Complex example"
msgstr ""

#: ../../forms/files.rst:262
msgid ""
"You need to expose file content to the site user through a view and then "
"refer to the URL of the view in your HTML template. There are some tricks "
"you need to keep in mind:"
msgstr ""

#: ../../forms/files.rst:266
msgid ""
"All file download URLs should be timestamped, or the reupload file change "
"will not be reflected in the browser."
msgstr ""

#: ../../forms/files.rst:269
msgid ""
"You might want to serve different file types from different URLs and set "
"special HTTP headers for them."
msgstr ""

#: ../../forms/files.rst:272
msgid "Complex example (``plone.app.headeranimations``)::"
msgstr ""

#: ../../forms/files.rst:324
msgid "Streaming file data"
msgstr ""

#: ../../forms/files.rst:326
msgid ""
"File data is delivered to the browser as a stream. The view function returns"
" a streaming iterator instead of raw data. This greatly reduces the latency "
"and memory usage when the file should not be buffered as a whole to memory "
"before sending."
msgstr ""

#: ../../forms/files.rst:331
msgid "Example (``plone.app.headeranimation``)::"
msgstr ""

#: ../../forms/files.rst:402
msgid "``POSKeyError`` on missing blob"
msgstr ""

#: ../../forms/files.rst:404
msgid ""
"A ``POSKeyError`` is raised when you try to access blob *attributes*, but "
"the actual file is not available on the disk. You can still load the blob "
"object itself fine (as it's being stored in the ZODB, not on the "
"filesystem)."
msgstr ""

#: ../../forms/files.rst:423
msgid ""
"This might occur for example because you have copied the ``Data.fs`` file to"
" another computer, but not blob files."
msgstr ""

#: ../../forms/files.rst:426
msgid ""
"You probably want to catch ``POSKeyError`` s and return something more sane "
"instead::"
msgstr ""

#: ../../forms/files.rst:461
msgid "See also"
msgstr ""

#: ../../forms/files.rst:463
msgid "http://pypi.python.org/pypi/experimental.gracefulblobmissing/"
msgstr ""

#: ../../forms/files.rst:466
msgid "Widget download URLs"
msgstr ""

#: ../../forms/files.rst:468
msgid ""
"Some things you might want to keep in mind when playing with forms and "
"images:"
msgstr ""

#: ../../forms/files.rst:471
msgid ""
"Image data might be incomplete (no width/height) during the first ``POST``."
msgstr ""

#: ../../forms/files.rst:473
msgid "Image URLs might change in the middle of request (image was updated)."
msgstr ""

#: ../../forms/files.rst:475
msgid ""
"If your form content is something else than traversable context object then "
"you must fix file download URLs manually."
msgstr ""

#: ../../forms/files.rst:478
msgid ""
"See `example in plone.app.headeranimations "
"<https://svn.plone.org/svn/collective/plone.app.headeranimation/trunk/plone/app/headeranimation/browser/widgets.py>`_."
msgstr ""

#: ../../forms/files.rst:481
msgid "Migrating custom content for blobs"
msgstr ""

#: ../../forms/files.rst:483
msgid "Some hints how to migrate your custom content:"
msgstr ""

#: ../../forms/files.rst:485
msgid ""
"http://plone.293351.n2.nabble.com/plone-4-upgrade-blob-and-large-files-"
"tp5500503p5500503.html"
msgstr ""

#: ../../forms/files.rst:488
msgid "Form encoding"
msgstr ""

#: ../../forms/files.rst:492
msgid ""
"Make sure that all forms containing file content are posted as "
"``enctype=\"multipart/form-data\"``.  If you don't do this, Zope decodes "
"request ``POST`` values as string input and you get either empty strings or "
"filenames as your file content data. The older ``plone.app.z3cform`` "
"templates do not necessarily declare ``enctype``, meaning that you need to "
"use a custom page template file for forms doing uploads."
msgstr ""

#: ../../forms/files.rst:499
msgid "Example correct form header:"
msgstr ""

#: ../../forms/files.rst:507
msgid "File-system access in load-balanced configurations"
msgstr ""

#: ../../forms/files.rst:509
msgid ""
"The `plone.namedfiled <http://plone.org/products/plone.app.blob>`_ product "
"page contains configuration instructions for ``plone.namedfile`` and ZEO."
msgstr ""

#: ../../forms/index.rst:3
msgid "Models, forms, fields and widgets"
msgstr ""

#: ../../forms/index.rst:5
msgid "Plone includes several alternative form mechanisms:"
msgstr ""

#: ../../forms/index.rst:7
msgid "For content-oriented forms:"
msgstr ""

#: ../../forms/index.rst:9
msgid ":doc:`Dexterity </getstarted/dexterity>` for Plone 4.1+"
msgstr ""

#: ../../forms/index.rst:11
msgid ""
":doc:`Archetypes </reference_manuals/old/archetypes/index>` is used for "
"content types in Plone 3.x"
msgstr ""

#: ../../forms/index.rst:13
msgid ""
"For convenience forms built and maintained through-the-web and where the "
"results are stored in CSV sheet or emailed:"
msgstr ""

#: ../../forms/index.rst:15
msgid ":doc:`PloneFormGen </reference_manuals/active/ploneformgen/index>`"
msgstr ""

#: ../../forms/index.rst:17
msgid ""
"For application and utility forms where custom logic is added by writing "
"Python code:"
msgstr ""

#: ../../forms/index.rst:19
msgid "z3c.form for Plone 4.x"
msgstr ""

#: ../../forms/index.rst:21
msgid "zope.formlib is used for stock forms in Plone 3.x"
msgstr ""

#: ../../forms/index.rst:23
msgid "This documentation applies only for form libraries."
msgstr ""

#: ../../forms/index.rst:25
msgid ""
"You need to identify which form library you are dealing with and read the "
"form library specific documentation."
msgstr ""

#: ../../forms/index.rst:28
msgid ""
"Zope 3 schema (zope.schema package) is database-neutral and framework-"
"neutral way to describe Python data models."
msgstr ""

#: ../../forms/index.rst:31
msgid "Modelling data"
msgstr ""

#: ../../forms/index.rst:40
msgid "Forms, fields and widgets"
msgstr ""

#: ../../forms/index.rst:51
msgid "Creating forms through-the-web without programming"
msgstr ""

#: ../../forms/manual.rst:3
msgid "Processing raw HTTP post requests"
msgstr ""

#: ../../forms/manual.rst:7
msgid "How to read incoming HTTP POST values without form frameworks"
msgstr ""

#: ../../forms/manual.rst:12
msgid ""
"See :doc:`HTTP request object </serving/http_request_and_response>` for "
"basics."
msgstr ""

#: ../../forms/manual.rst:14
msgid ""
"Here is an example view which checks if a form button has been pressed, and "
"takes action accordingly. The view is implemented using :doc:`grok framework"
" </components/grok>`."
msgstr ""

#: ../../forms/manual.rst:18
msgid "View code::"
msgstr ""

#: ../../forms/manual.rst:49
msgid "Page template code:"
msgstr ""

#: ../../forms/manual.rst:84
msgid "Magical Zope form variables"
msgstr ""

#: ../../forms/manual.rst:87
msgid ""
"Zope provides some magical HTTP POST variable names which are automatically "
"converted to native Python primitives by ZPublisher."
msgstr ""

#: ../../forms/manual.rst:91
msgid "Quick explanation"
msgstr ""

#: ../../forms/manual.rst:93
msgid "If you have HTML::"
msgstr ""

#: ../../forms/manual.rst:97
msgid "Then::"
msgstr ""

#: ../../forms/manual.rst:101
msgid "will return integer 30 instead of string \"30\"."
msgstr ""

#: ../../forms/manual.rst:105
msgid ""
"This behavior is hard-coded to ZPublisher and cannot be extended or "
"disabled. The recommendation is not to use it, but do the conversion of "
"data-types yourself or use a more high-level form framework like z3c.form."
msgstr ""

#: ../../forms/manual.rst:110 ../../forms/z3c.form.rst:1761
msgid "More information"
msgstr ""

#: ../../forms/manual.rst:112
msgid "http://www.zope.org/Members/Zen/howto/FormVariableTypes"
msgstr ""

#: ../../forms/ploneformgen.rst:3
msgid "PloneFormGen"
msgstr ""

#: ../../forms/ploneformgen.rst:7
msgid ""
"PloneFormGen allows you to build and maintain convenience forms through "
"Plone edit interface."
msgstr ""

#: ../../forms/ploneformgen.rst:12
msgid ""
"*PloneFormGen* is a Plone add-on Product that provides a generic Plone form "
"generator using fields, widgets and validators from Archetypes. Use it to "
"build simple, one-of-a-kind, web forms that save or mail form input."
msgstr ""

#: ../../forms/ploneformgen.rst:14
msgid ""
"To build a web form, create a form folder, then add form fields as contents."
" Individual fields can display and validate themselves for testing purposes."
" The form folder creates a form from all the contained field content "
"objects."
msgstr ""

#: ../../forms/ploneformgen.rst:16
msgid ""
"Final disposition of form input is handled via plug-in action products. "
"Action adapters included with this release include a mailer, a save-data "
"adapter that saves input in tab-separated format for later download, and a "
"custom-script adapter that makes it possible to script simple actions "
"without recourse to the Zope Management Interface."
msgstr ""

#: ../../forms/ploneformgen.rst:18
msgid ""
"To make it easy to get started, newly created form folders are pre-populated"
" to act as a simple e-mail response form."
msgstr ""

#: ../../forms/ploneformgen.rst:20
msgid "`PloneFormGen product page <http://plone.org/products/ploneformgen>`_"
msgstr ""

#: ../../forms/ploneformgen.rst:22
msgid ""
":doc:`PloneFormGen documentation and tutorials "
"</reference_manuals/active/ploneformgen/index>`"
msgstr ""

#: ../../forms/ploneformgen.rst:24
msgid ""
":doc:`Creating forms with PloneFormGen add-on without programming "
"</reference_manuals/active/ploneformgen/getting_started>`"
msgstr ""

#: ../../forms/schemas.rst:3
msgid "Modelling using zope.schema"
msgstr ""

#: ../../forms/schemas.rst:7
msgid ""
"zope.schema package provide a storage-neutral way to define Python object "
"models with validators."
msgstr ""

#: ../../forms/schemas.rst:15
msgid ""
"Zope 3 schemas are a database-neutral and form-library-neutral way to "
"describe Python data models."
msgstr ""

#: ../../forms/schemas.rst:18
msgid "Plone uses Zope 3 schemas for these purposes:"
msgstr ""

#: ../../forms/schemas.rst:20
msgid "to describe persistent data models;"
msgstr ""

#: ../../forms/schemas.rst:21
msgid "to describe HTML form data;"
msgstr ""

#: ../../forms/schemas.rst:22
msgid "to describe ZCML configuration data."
msgstr ""

#: ../../forms/schemas.rst:24
msgid ""
"Since Zope 3 schemas are not bound to e.g. a SQL database engine, it gives "
"you very reusable way to define data models."
msgstr ""

#: ../../forms/schemas.rst:27
msgid ""
"Schemas are just regular Python classes, with some special attribute "
"declarations.  They are always subclasses of ``zope.interface.Interface``. "
"The schema itself cannot be a concrete object instance |---| you need to "
"either have a ``persistent.Persistent`` object (for database data) or a "
"``z3c.form.form.Form`` object (for HTML forms)."
msgstr ""

#: ../../forms/schemas.rst:33
msgid "Zope 3 schemas are used for tasks like:"
msgstr ""

#: ../../forms/schemas.rst:35
msgid ""
"defining allowed input data format (string, integer, object, list, etc.) for"
" Python class instance attributes;"
msgstr ""

#: ../../forms/schemas.rst:37
msgid "specifying required attributes on an object;"
msgstr ""

#: ../../forms/schemas.rst:38
msgid "defining custom validators on input data."
msgstr ""

#: ../../forms/schemas.rst:40
msgid ""
"The basic unit of data model declaration is the *field*, which specifies "
"what kind of data each Python attribute can hold."
msgstr ""

#: ../../forms/schemas.rst:44 ../../forms/wysiwyg.rst:39
#: ../../forms/wysiwyg.rst:316 ../../forms/z3c.form.rst:626
#: ../../forms/z3c.form.rst:1438 ../../forms/z3c.form.rst:2271
msgid "More info"
msgstr ""

#: ../../forms/schemas.rst:46
msgid "`zope.schema <http://pypi.python.org/pypi/zope.schema>`_ on PyPi"
msgstr ""

#: ../../forms/schemas.rst:48
msgid ""
"`zope.schema source code "
"<http://svn.zope.org/zope.schema/trunk/src/zope/schema/>`_ - definite source"
" for field types and usage."
msgstr ""

#: ../../forms/schemas.rst:50
msgid ""
"``zope.schema`` provides a very comprehensive set of fields out of the box. "
"Finding good documentation for them, however, can be challenging.  Here are "
"some starting points:"
msgstr ""

#: ../../forms/schemas.rst:55
msgid ""
"`Dexterity field list "
"<http://developer.plone.org/reference_manuals/external/plone.app.dexterity/reference/fields.html>`_."
msgstr ""

#: ../../forms/schemas.rst:59
msgid "Example of a schema"
msgstr ""

#: ../../forms/schemas.rst:61
msgid "Let's define a data model to store addresses::"
msgstr ""

#: ../../forms/schemas.rst:85
msgid ""
"Next, we define a concrete persistent class which uses this data model.  We "
"can use this class to store data based on our model definition in the ZODB "
"database."
msgstr ""

#: ../../forms/schemas.rst:89
msgid ""
"We use ``zope.schema.fieldproperty.FieldProperty`` to bind persistent class "
"attributes to the data definition."
msgstr ""

#: ../../forms/schemas.rst:115
msgid ""
"For persistent objects, see :doc:`persistent object documentation "
"</persistency/persistent>`."
msgstr ""

#: ../../forms/schemas.rst:120
msgid "Using schemas as data models"
msgstr ""

#: ../../forms/schemas.rst:123
msgid ""
"Based on the example data model above, we can use it in e.g. content type "
":doc:`browser views </views/browserviews>` to store arbitrary data as "
"content type attributes."
msgstr ""

#: ../../forms/schemas.rst:151
msgid "Field constructor parameters"
msgstr ""

#: ../../forms/schemas.rst:153
msgid ""
"The ``Field`` base class defines a list of standard parameters that you can "
"use to construct schema fields.  Each subclass of ``Field`` will have its "
"own set of possible parameters in addition to this."
msgstr ""

#: ../../forms/schemas.rst:157
msgid ""
"See the full list `here "
"<http://apidoc.zope.org/++apidoc++/Code/zope/schema/_bootstrapfields/Field/index.html>`_."
msgstr ""

#: ../../forms/schemas.rst:161
msgid "Title"
msgstr ""

#: ../../forms/schemas.rst:161
msgid "field title as unicode string"
msgstr ""

#: ../../forms/schemas.rst:164
msgid "field description as unicode string"
msgstr ""

#: ../../forms/schemas.rst:167
msgid "required"
msgstr ""

#: ../../forms/schemas.rst:167
msgid "boolean, whether the field is required"
msgstr ""

#: ../../forms/schemas.rst:170
msgid "default"
msgstr ""

#: ../../forms/schemas.rst:170
msgid "Default value if the attribute is not present"
msgstr ""

#: ../../forms/schemas.rst:172
msgid "... and so on."
msgstr ""

#: ../../forms/schemas.rst:176
msgid ""
"Do not initialize any non-primitive values using the *default* keyword "
"parameter of schema fields.  Python and the ZODB stores objects by "
"reference.  Python code will construct only *one* field value during schema "
"construction, and share its content across all objects.  This is probably "
"not what you intend. Instead, initialize objects in the ``__init__()`` "
"method of your schema implementer."
msgstr ""

#: ../../forms/schemas.rst:183
msgid ""
"In particular, dangerous defaults are: ``default=[]``, ``default={}``, "
"``default=SomeObject()``."
msgstr ""

#: ../../forms/schemas.rst:188
msgid "Schema introspection"
msgstr ""

#: ../../forms/schemas.rst:190
msgid ""
"The ``zope.schema._schema`` module provides some introspection functions:"
msgstr ""

#: ../../forms/schemas.rst:192
msgid "``getFieldNames(schema_class)``"
msgstr ""

#: ../../forms/schemas.rst:193
msgid "``getFields(schema_class)``"
msgstr ""

#: ../../forms/schemas.rst:194
msgid ""
"``getFieldNamesInOrder(schema)`` |---| retain the orignal field declaration "
"order."
msgstr ""

#: ../../forms/schemas.rst:196
msgid ""
"``getFieldsInOrder(schema)`` |---| retain the orignal field declaration "
"order."
msgstr ""

#: ../../forms/schemas.rst:212
msgid "Dumping schema data"
msgstr ""

#: ../../forms/schemas.rst:214
msgid ""
"Below is an example how to extract all schema defined fields from an object."
msgstr ""

#: ../../forms/schemas.rst:242
msgid "Finding the schema for a Dexterity type"
msgstr ""

#: ../../forms/schemas.rst:244
msgid ""
"When trying to introspect a Dexterity type, you can get a reference to the "
"schema thus::"
msgstr ""

#: ../../forms/schemas.rst:251
msgid ""
"...and then inspect it using the methods above. Note this won't have "
"behavior fields added to it at this stage, only the fields directly defined "
"in your schema."
msgstr ""

#: ../../forms/schemas.rst:256
msgid "Field order"
msgstr ""

#: ../../forms/schemas.rst:258
msgid ""
"The ``order`` attribute can be used to determine the order in which fields "
"in a schema were defined. If one field was created after another (in the "
"same thread), the value of ``order`` will be greater."
msgstr ""

#: ../../forms/schemas.rst:264
msgid "Default values"
msgstr ""

#: ../../forms/schemas.rst:266
msgid ""
"To make default values of schema effective, class attributes must be "
"implemented using ``FieldProperty``."
msgstr ""

#: ../../forms/schemas.rst:291
msgid "Validation and type constrains"
msgstr ""

#: ../../forms/schemas.rst:293
msgid ""
"Schema objects using field properties provide automatic validation "
"facilities, preventing setting badly formatted attributes."
msgstr ""

#: ../../forms/schemas.rst:296
msgid "There are two aspects to validation:"
msgstr ""

#: ../../forms/schemas.rst:298
msgid "Checking the type constraints (done automatically)."
msgstr ""

#: ../../forms/schemas.rst:299
msgid "Checking whether the value fills certain constrains (validation)."
msgstr ""

#: ../../forms/schemas.rst:301
msgid "Example of how type constraints work::"
msgstr ""

#: ../../forms/schemas.rst:332
msgid "Example of validation (email field)::"
msgstr ""

#: ../../forms/schemas.rst:352
msgid "Persistent objects and schema"
msgstr ""

#: ../../forms/schemas.rst:354
msgid ""
"ZODB persistent objects do not provide facilities for setting field defaults"
" or validating the data input."
msgstr ""

#: ../../forms/schemas.rst:357
msgid ""
"When you create a persistent class, you need to provide field properties for"
" it, which will sanify the incoming and outgoing data."
msgstr ""

#: ../../forms/schemas.rst:360
msgid ""
"When the persistent object is created it has no attributes. When you try to "
"access the attribute through a named "
"``zope.schema.fieldproperty.FieldProperty`` accessor, it first checks "
"whether the attribute exists. If the attribute is not there, it is created "
"and the default value is returned."
msgstr ""

#: ../../forms/schemas.rst:417
msgid "Now you see the magic::"
msgstr ""

#: ../../forms/schemas.rst:426
msgid "Collections (and multichoice fields)"
msgstr ""

#: ../../forms/schemas.rst:428
msgid ""
"Collections are fields composed of several other fields. Collections also "
"act as multi-choice fields."
msgstr ""

#: ../../forms/schemas.rst:431
msgid "For more information see:"
msgstr ""

#: ../../forms/schemas.rst:433
msgid ""
"`Using Zope schemas with a complex vocabulary and multi-select fields "
"<http://www.upfrontsystems.co.za/Members/izak/sysadman/using-zope-schemas-"
"with-a-complex-vocabulary-and-multi-select-fields>`_"
msgstr ""

#: ../../forms/schemas.rst:435
msgid ""
"Collections section in `zope.schema documentation "
"<http://apidoc.zope.org/++apidoc++/Code/zope/schema/fields.txt/index.html>`_"
msgstr ""

#: ../../forms/schemas.rst:437
msgid ""
"Schema `field sources documentation "
"<http://apidoc.zope.org/++apidoc++/Code/zope/schema/sources.txt/index.html>`_"
msgstr ""

#: ../../forms/schemas.rst:439
msgid ""
"`Choice field "
"<http://apidoc.zope.org/++apidoc++/Code/zope/schema/_field/Choice/index.html>`_"
msgstr ""

#: ../../forms/schemas.rst:441
msgid ""
"`List field "
"<http://apidoc.zope.org/++apidoc++/Code/zope/schema/_field/List/index.html>`_."
msgstr ""

#: ../../forms/schemas.rst:445
msgid "Single-choice example"
msgstr ""

#: ../../forms/schemas.rst:447
msgid "Only one value can be chosen."
msgstr ""

#: ../../forms/schemas.rst:449
msgid "Below is code to create Python logging level choice::"
msgstr ""

#: ../../forms/schemas.rst:487
msgid "Multi-choice example"
msgstr ""

#: ../../forms/schemas.rst:489
msgid ""
"Using zope.schema.List, many values can be chosen once. Each value is "
"atomically constrained by *value_type* schema field."
msgstr ""

#: ../../forms/schemas.rst:513 ../../forms/z3c.form.rst:499
msgid "Dynamic schemas"
msgstr ""

#: ../../forms/schemas.rst:515
msgid ""
"Schemas are singletons, as there only exist one class instance per Python "
"run-time. For example, if you need to feed schemas generated dynamically to "
"form engine, you need to"
msgstr ""

#: ../../forms/schemas.rst:519
msgid ""
"If the form engine (e.g. z3c.form refers to schema fields, then replace "
"these references with dynamically generated copes)"
msgstr ""

#: ../../forms/schemas.rst:522
msgid ""
"Generate a Python class dynamically. Output Python source code, then "
"``eval()`` it. Using ``eval()`` is almost always considered as a bad "
"practice."
msgstr ""

#: ../../forms/schemas.rst:528
msgid ""
"Though it is possible, you should not modify zope.schema classes in-place as"
" the same copy is shared between different threads and if there are two "
"concurrent HTTP requests problems occur."
msgstr ""

#: ../../forms/schemas.rst:534
msgid "Replacing schema fields with dynamically modified copies"
msgstr ""

#: ../../forms/schemas.rst:536
msgid ""
"The below is an example for z3c.form. It uses Python ``copy`` module to copy"
" f.field reference, which points to zope.schema field. For this field copy, "
"we modify *required* attribute based on input."
msgstr ""

#: ../../forms/schemas.rst:568
msgid "Don't use dict {} or list [] as a default value"
msgstr ""

#: ../../forms/schemas.rst:570
msgid ""
"Because how Python object construction works, giving [] or {} as a default "
"value will make all created field values to share this same object."
msgstr ""

#: ../../forms/schemas.rst:573
msgid "http://effbot.org/zone/default-values.htm"
msgstr ""

#: ../../forms/schemas.rst:575
msgid "Use value adapters instead"
msgstr ""

#: ../../forms/schemas.rst:577
msgid "http://pypi.python.org/pypi/plone.directives.form#value-adapters"
msgstr ""

#: ../../forms/vocabularies.rst:3
msgid "Vocabularies"
msgstr ""

#: ../../forms/vocabularies.rst:7
msgid ""
"Vocabularies are lists of (value -> human readable title) pairs used by e.g."
" selection drop downs. zope.schema provides tools to programmatically "
"construct their vocabularies."
msgstr ""

#: ../../forms/vocabularies.rst:16
msgid "Vocabularies specify options for choice fields."
msgstr ""

#: ../../forms/vocabularies.rst:18
msgid ""
"Vocabularies are normally described using "
"zope.schema.vocabulary.SimpleVocabulary and "
"zope.schema.vocabulary.SimpleTerm objects. `See the source code "
"<http://svn.zope.org/zope.schema/trunk/src/zope/schema/vocabulary.py?rev=75170&view=auto>`_."
msgstr ""

#: ../../forms/vocabularies.rst:24
msgid "Vocabulary terms"
msgstr ""

#: ../../forms/vocabularies.rst:26
msgid "zope.schema defines different vocabulary term possibilities."
msgstr ""

#: ../../forms/vocabularies.rst:28
msgid ""
"A term is an entry in the vocabulary. The term has a value. Most terms are "
"tokenised terms which also have a token, and some terms are titled, meaning "
"they have a title that is different to the token."
msgstr ""

#: ../../forms/vocabularies.rst:30
msgid "In ``SimpleTerm`` instances"
msgstr ""

#: ../../forms/vocabularies.rst:32
msgid ""
"``SimpleTerm.token`` must be an ASCII string. It is the value passed with "
"the request when the form is submitted. A token must uniquely identify a "
"term."
msgstr ""

#: ../../forms/vocabularies.rst:34
msgid ""
"``SimpleTerm.value`` is the actual value stored on the object. This is not "
"passed to the browser or used in the form. The value is often a unicode "
"string, but can be any type of object."
msgstr ""

#: ../../forms/vocabularies.rst:36
msgid ""
"``SimpleTerm.title`` is a unicode string or translatable message. It is used"
" in the form."
msgstr ""

#: ../../forms/vocabularies.rst:38
msgid "Some info::"
msgstr ""

#: ../../forms/vocabularies.rst:67
msgid ""
"If you need international texts please note that only title is, and should "
"be, translated. Value and token should always carry the same value."
msgstr ""

#: ../../forms/vocabularies.rst:72
msgid "Creating a vocabulary"
msgstr ""

#: ../../forms/vocabularies.rst:84
msgid "Example 2::"
msgstr ""

#: ../../forms/vocabularies.rst:101
msgid "Stock vocabularies"
msgstr ""

#: ../../forms/vocabularies.rst:103
msgid "Some vocabularies Plone provides out of the box"
msgstr ""

#: ../../forms/vocabularies.rst:105
msgid ""
"`Some common named vocabularies "
"<http://developer.plone.org/reference_manuals/external/plone.app.dexterity/advanced/vocabularies.html"
"#some-common-vocabularies>`_"
msgstr ""

#: ../../forms/vocabularies.rst:107
msgid ""
"`Thumbnail size vocabulary (TinyMCE) "
"<https://github.com/plone/Products.TinyMCE/blob/master/Products/TinyMCE/vocabularies.py>`_"
msgstr ""

#: ../../forms/vocabularies.rst:110
msgid "Creating vocabulary from list of objects"
msgstr ""

#: ../../forms/vocabularies.rst:112
msgid "Here is one example where value = title in term::"
msgstr ""

#: ../../forms/vocabularies.rst:117
msgid "Retrieving a vocabulary"
msgstr ""

#: ../../forms/vocabularies.rst:119
msgid ""
"zope.schema's SimpleVocabulary objects are retrieved via factories "
"registered as utilities."
msgstr ""

#: ../../forms/vocabularies.rst:121
msgid "To get one, use zope.component's getUtility::"
msgstr ""

#: ../../forms/vocabularies.rst:131
msgid "Getting a term"
msgstr ""

#: ../../forms/vocabularies.rst:133
msgid "By term value::"
msgstr ""

#: ../../forms/vocabularies.rst:141
msgid "Listing a vocabulary"
msgstr ""

#: ../../forms/vocabularies.rst:150
msgid "Dynamic vocabularies"
msgstr ""

#: ../../forms/vocabularies.rst:152
msgid ""
"Dynamic vocabularies' values may change run-time. They are usually generated"
" based on some context data."
msgstr ""

#: ../../forms/vocabularies.rst:155
msgid ""
"Note that the examples below need grok package installed and <grok:grok "
"package=\"...\"> directive in configure.zcml."
msgstr ""

#: ../../forms/vocabularies.rst:158
msgid ""
"Complete example with portal_catalog query, vocabulary creation and form"
msgstr ""

#: ../../forms/vocabularies.rst:271
msgid "Complex example 2"
msgstr ""

#: ../../forms/vocabularies.rst:336
msgid ""
"For another example, see `Dynamic sources "
"<http://developer.plone.org/reference_manuals/external/plone.app.dexterity/advanced/vocabularies.html"
"#dynamic-sources>`_ chapter in Dexterity manual."
msgstr ""

#: ../../forms/vocabularies.rst:340
msgid "Registering a named vocabulary provider in ZCML"
msgstr ""

#: ../../forms/vocabularies.rst:342
msgid ""
"You can use ``<utility>`` in ZCML to register vocabularies by name and then "
"refer them by name via ``getUtility()`` or in zope.schema.Choice."
msgstr ""

#: ../../forms/vocabularies.rst:353
msgid "Then you can refer to vocabulary by its name::"
msgstr ""

#: ../../forms/vocabularies.rst:361
msgid ""
"For more information see `vocabularies API doc "
"<http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_zope/vocabulary/index.html>`_."
msgstr ""

#: ../../forms/wysiwyg.rst:3
msgid "WYSIWYG text editing and TinyMCE"
msgstr ""

#: ../../forms/wysiwyg.rst:7
msgid "WYSIWYG text field editor programming in Plone."
msgstr ""

#: ../../forms/wysiwyg.rst:14
msgid "Plone supports TinyMCE (default), Kupu and CKEditor."
msgstr ""

#: ../../forms/wysiwyg.rst:16
msgid ""
"TinyMCE and Plone integration is distributed in `Products.TinyMCE package "
"<http://pypi.python.org/pypi/Products.TinyMCE>`_."
msgstr ""

#: ../../forms/wysiwyg.rst:20
msgid "Disabling HTML filtering and safe HTML transformation"
msgstr ""

#: ../../forms/wysiwyg.rst:22
msgid ""
"By default Plone does HTML filtering to prevent `cross-site scripting "
"<http://en.wikipedia.org/wiki/Cross-site_scripting>`_ attacks. This will "
"make Plone to strip away from HTML"
msgstr ""

#: ../../forms/wysiwyg.rst:25
msgid "`<script>` tags"
msgstr ""

#: ../../forms/wysiwyg.rst:27
msgid "Some other potentially unsafe tags and attributes"
msgstr ""

#: ../../forms/wysiwyg.rst:29
msgid ""
"If you need to put `<scrip>` tag on your content text in TinyMCE you can "
"disable this security feature."
msgstr ""

#: ../../forms/wysiwyg.rst:33
msgid ""
"If you don't trust all of your site editors, then this will open your site "
"for an attack."
msgstr ""

#: ../../forms/wysiwyg.rst:35
msgid ""
"In the Zope Management Interface, at the top of a Plone site, go to "
"portal_transforms and open the safe_html transform. Disable it by putting a "
"\"1\" in the disable_transform field and saving."
msgstr ""

#: ../../forms/wysiwyg.rst:37
msgid "A site restart might be required depending on Plone version."
msgstr ""

#: ../../forms/wysiwyg.rst:41
msgid ""
"http://stackoverflow.com/questions/5796643/make-plone-accept-any-html-input"
msgstr ""

#: ../../forms/wysiwyg.rst:46
msgid "Content linking"
msgstr ""

#: ../../forms/wysiwyg.rst:48
msgid ""
"Plone offers many kind of support and enhancements in site internal content "
"linking"
msgstr ""

#: ../../forms/wysiwyg.rst:50
msgid ""
"Delete protection: :doc:`warning if you try to delete content which is being"
" referred </content/deleting>`."
msgstr ""

#: ../../forms/wysiwyg.rst:52
msgid "Migrating of links when the content is being moved"
msgstr ""

#: ../../forms/wysiwyg.rst:54
msgid ""
"The recommended method for linking the content is *Linking by UID* since "
"*Products.TinyMCE* version 1.3."
msgstr ""

#: ../../forms/wysiwyg.rst:56
msgid ""
"When the text is saved in TinyMCE all relative links are converted to "
":doc:`UID links </content/uid>` in the saved HTML payload"
msgstr ""

#: ../../forms/wysiwyg.rst:58
msgid ""
"When the text is displayed again, the HTML is run through output filter and "
"UID links are converted back to human readable links"
msgstr ""

#: ../../forms/wysiwyg.rst:60
msgid ""
"This solves issues with earlier Plone versions where the link targets become"
" invalid when a HTML textfield with relative links where shown on the other "
"page as the original context."
msgstr ""

#: ../../forms/wysiwyg.rst:65
msgid ""
"You might need to turn on *Linking by UID* setting on in the site setup if "
"you are migrating from older Plone sites."
msgstr ""

#: ../../forms/wysiwyg.rst:68
msgid "Editor preferences"
msgstr ""

#: ../../forms/wysiwyg.rst:70
msgid ""
"Plone supports user text changeable editor. The active editor is stored in "
"the :doc:`user preferences </members/member_profile>`."
msgstr ""

#: ../../forms/wysiwyg.rst:73
msgid ""
"The user can fallback to hand-edited HTML by setting active editor to none."
msgstr ""

#: ../../forms/wysiwyg.rst:75
msgid ""
"The rich text widget can also support optional input formats besides HTML: "
"structured text and so on."
msgstr ""

#: ../../forms/wysiwyg.rst:79
msgid "Text format selector"
msgstr ""

#: ../../forms/wysiwyg.rst:81
msgid ""
"The format selector itself is rendered by ``wysiwyg_support.pt`` macros "
"which is Plone core"
msgstr ""

#: ../../forms/wysiwyg.rst:84
msgid ""
"https://github.com/plone/Products.CMFPlone/tree/master/Products/CMFPlone/skins/plone_wysiwyg/wysiwyg_support.pt"
msgstr ""

#: ../../forms/wysiwyg.rst:87
msgid "Applying styles only edit view"
msgstr ""

#: ../../forms/wysiwyg.rst:89
msgid ""
"You can use TinyMCE body selector make your CSS class have different styles "
"in view and edit modes (inside TinyMCE)"
msgstr ""

#: ../../forms/wysiwyg.rst:113
msgid ""
"Firefox does not actually support column breaks, so this was useful "
"headaching experience."
msgstr ""

#: ../../forms/wysiwyg.rst:116
msgid "Customizing TinyMCE options"
msgstr ""

#: ../../forms/wysiwyg.rst:118
msgid ""
"In your add-on code, all TinyMCE options in the control panel can be "
"exported and imported :doc:`using GenericSetup, portal_setup and tinymce.xml"
" </components/genericsetup>`."
msgstr ""

#: ../../forms/wysiwyg.rst:122
msgid "Custom field-specific style list for TinyMCE"
msgstr ""

#: ../../forms/wysiwyg.rst:125
msgid "Dexterity"
msgstr ""

#: ../../forms/wysiwyg.rst:127
msgid "Oho."
msgstr ""

#: ../../forms/wysiwyg.rst:130
msgid "Archetypes"
msgstr ""

#: ../../forms/wysiwyg.rst:132
msgid "For Archetypes see"
msgstr ""

#: ../../forms/wysiwyg.rst:134
msgid ""
"http://plone.org/products/tinymce/documentation/how-to/how-to-customize-"
"tinymce-for-an-archetypes-richwidget"
msgstr ""

#: ../../forms/wysiwyg.rst:137
msgid "Rich text transformations"
msgstr ""

#: ../../forms/wysiwyg.rst:139
msgid ""
"http://developer.plone.org/reference_manuals/external/plone.app.dexterity/advanced"
"/rich-text-markup-transformations.html"
msgstr ""

#: ../../forms/wysiwyg.rst:141
msgid "http://pypi.python.org/pypi/plone.app.textfield"
msgstr ""

#: ../../forms/wysiwyg.rst:145
msgid "Hacking TinyMCE Javascript"
msgstr ""

#: ../../forms/wysiwyg.rst:147
msgid ""
"Plone ships with pre-compressed TinyMCE source code enabled by default."
msgstr ""

#: ../../forms/wysiwyg.rst:149
msgid ""
"If you want to toy around with TinyMCE source code itself, you might want to"
" first enable the usage of debug version of TinyMCE source."
msgstr ""

#: ../../forms/wysiwyg.rst:152
msgid ""
"In ``Products.TinyMCE.skins`` open tiny_mce_src.js and copy-paste its "
"content into tiny_mce.js."
msgstr ""

#: ../../forms/wysiwyg.rst:157
msgid ""
"Replacing tiny_mce.js with tiny_mce_src.js in portal_javascripts doesn't "
"seem to work as it breaks TinyMCE plug-in loading."
msgstr ""

#: ../../forms/wysiwyg.rst:161
msgid "TinyMCE plug-ins"
msgstr ""

#: ../../forms/wysiwyg.rst:163
msgid ""
"TinyMCE consists of plug-ins. Existing plug-ins can be overlaid with your "
"custom version by loading Javascript after core TinyMCE load."
msgstr ""

#: ../../forms/wysiwyg.rst:166
msgid ""
"Default TinyMCE plug-in Javascript files can be found under "
"Products.TinyMCE/skins/tinymce/plugins"
msgstr ""

#: ../../forms/wysiwyg.rst:168
msgid ""
"Usually TinyMCE plug-ins dialogs load in <iframe> and HTML code loads "
"separate CSS and JS files from the main site"
msgstr ""

#: ../../forms/wysiwyg.rst:173
msgid "Adding a new plug-in"
msgstr ""

#: ../../forms/wysiwyg.rst:175
msgid "Here are instructions how to add new buttons to TinyMCE"
msgstr ""

#: ../../forms/wysiwyg.rst:177
msgid "Some rules"
msgstr ""

#: ../../forms/wysiwyg.rst:179
msgid "Plug-in id goes to ``tinymce.xml``"
msgstr ""

#: ../../forms/wysiwyg.rst:181
msgid ""
"Your plug-in must be in a file called ``editor_plugin.js`` in skins layer"
msgstr ""

#: ../../forms/wysiwyg.rst:183
msgid "You must have a skins layer folder named after your plug-in id"
msgstr ""

#: ../../forms/wysiwyg.rst:185
msgid "You don't register plug-in Javascript *portal_javascripts*"
msgstr ""

#: ../../forms/wysiwyg.rst:187
msgid ""
"TinyMCE button row is in the main document. However, the edit area itself is"
" in <iframe>. Also, many of TinyMCE dialogs are launched in <iframe> and "
"they load a hardcoded set of Javascript files (they don't use any kind of "
"Plone master template or <head> section)."
msgstr ""

#: ../../forms/wysiwyg.rst:191
msgid "So in the end you'll have a file::"
msgstr ""

#: ../../forms/wysiwyg.rst:195
msgid "Why all this? I don't know. And honestly, in this point, I don't care."
msgstr ""

#: ../../forms/wysiwyg.rst:197
msgid "Register your specially named skin layer in ``skins.xml``::"
msgstr ""

#: ../../forms/wysiwyg.rst:214
msgid "Register your plugin in ``tinymce.xml`` GenericSetup install profile"
msgstr ""

#: ../../forms/wysiwyg.rst:233
msgid "Then finally drop a ``editor_plugin.js`` to your plug-in folder"
msgstr ""

#: ../../forms/wysiwyg.rst:284
msgid "Media resources"
msgstr ""

#: ../../forms/wysiwyg.rst:286
msgid ""
"TinyMCE exposes URL to your plug-in base folder, where editor_plugin.js is, "
"as plug-in ``init()`` parameter."
msgstr ""

#: ../../forms/wysiwyg.rst:288
msgid "You can construct relative URLs to set media resources in ``init()``."
msgstr ""

#: ../../forms/wysiwyg.rst:299
msgid "Language resources"
msgstr ""

#: ../../forms/wysiwyg.rst:301
msgid ""
"TinyMCE does not directly accept strings as labels, but uses its own "
"internal translation mechanism which is not gettext."
msgstr ""

#: ../../forms/wysiwyg.rst:303
msgid "Create folder ``langs`` under plug-in base folder"
msgstr ""

#: ../../forms/wysiwyg.rst:305
msgid "There create file ``en.js``"
msgstr ""

#: ../../forms/wysiwyg.rst:307
msgid "Sample content"
msgstr ""

#: ../../forms/wysiwyg.rst:318
msgid ""
"https://svn.plone.org/svn/collective/medialog.tinymceplugins.helpmenu/trunk/medialog/tinymceplugins/helpmenu/skins/tinymce_plugin_helpmenu/editor_plugin.js"
msgstr ""

#: ../../forms/wysiwyg.rst:321
msgid "Customizing existing plug-in"
msgstr ""

#: ../../forms/wysiwyg.rst:323
msgid "The recommended way is to customize TinyMCE"
msgstr ""

#: ../../forms/wysiwyg.rst:325
msgid ""
"Re-register plug-in by simply including a plug-in JS code in a separate "
"Javascript file loaded after tinymce.js"
msgstr ""

#: ../../forms/wysiwyg.rst:328
msgid ""
"override existing individual TinyMCE files using :doc:`jbot "
"</templates_css_and_javascripts/skin_layers>`."
msgstr ""

#: ../../forms/wysiwyg.rst:332
msgid "Overriding plug-in"
msgstr ""

#: ../../forms/wysiwyg.rst:334
msgid ""
"Create a duplicate of plug-in JS file (table.js), register it as a custom "
"Javascript from your add-on resource folder."
msgstr ""

#: ../../forms/wysiwyg.rst:337
msgid ""
"TinyMCE overrides previous plug-in registrations with new ones and you can "
"just re-register your own plug-in version to override the existing version."
msgstr ""

#: ../../forms/wysiwyg.rst:340
msgid "Refer it in portal_javascripts"
msgstr ""

#: ../../forms/wysiwyg.rst:356
msgid "Overriding plug-in resources"
msgstr ""

#: ../../forms/wysiwyg.rst:358
msgid ""
"Yoiu can also override CSS, HTML (.htm.pt templates) with ``z3c.jbot`` as "
"instructed above."
msgstr ""

#: ../../forms/wysiwyg.rst:367
msgid ""
"Since there resources are loaded in <iframe> the normal browser refresh does"
" not trigger reload for them. Right click <iframe>, choose Refresh from "
"context menu."
msgstr ""

#: ../../forms/wysiwyg.rst:372
msgid "Ploneboard and anonymous editor"
msgstr ""

#: ../../forms/wysiwyg.rst:374
msgid "Problems with TinyMCE and Ploneboard."
msgstr ""

#: ../../forms/wysiwyg.rst:376
msgid "For more information, see"
msgstr ""

#: ../../forms/wysiwyg.rst:378
msgid ""
"http://www.llakomy.com/articles/enable-kupu-for-anonymous-in-ploneboard"
msgstr ""

#: ../../forms/wysiwyg.rst:382
msgid "TinyMCE shortcuts"
msgstr ""

#: ../../forms/wysiwyg.rst:384
msgid ""
"``Products.TinyMCE`` versions 1.3+ provide a shortcut view in link and image"
" dialogs. You can add your own site specific shortcuts here."
msgstr ""

#: ../../forms/wysiwyg.rst:387
msgid ""
"The most common use case is a shortcut link a folder which acts as a site "
"image bank. On multilingual sites this folder is"
msgstr ""

#: ../../forms/wysiwyg.rst:390
msgid "Below natural language folders in the site root"
msgstr ""

#: ../../forms/wysiwyg.rst:392
msgid "Language neutral"
msgstr ""

#: ../../forms/wysiwyg.rst:394
msgid "These make navigating to the folder using normal means very difficult."
msgstr ""

#: ../../forms/wysiwyg.rst:396
msgid ""
"New TinyMCE shortcuts can be registered as global utility via "
"`Products.TinyMCE.interfaces.IShortcut interface "
"<https://github.com/plone/Products.TinyMCE/blob/master/Products/TinyMCE/interfaces/shortcut.py>`_."
msgstr ""

#: ../../forms/wysiwyg.rst:401
msgid "We'll register our image bank as a shortcut into TinyMCE image dialog."
msgstr ""

#: ../../forms/wysiwyg.rst:403
msgid "First make sure your add-on is :doc:`grok'ed </components/grok>`."
msgstr ""

#: ../../forms/wysiwyg.rst:405
msgid ""
"Then drop in the following file ``shortcut.py`` file into your :doc:`add-on "
"</getstarted/index>`::"
msgstr ""

#: ../../forms/wysiwyg.rst:434
msgid ""
"After this you still need to go to TinyMCE control panel "
"(``http://localhost:8080/Plone/@@tinymce-controlpanel``) and enable the link"
" button in the settings for *Image Shortcuts*."
msgstr ""

#: ../../forms/wysiwyg.rst:440
msgid ""
"You might also want to disable TinyMCE inline image uploads through CSS and "
"disable image creation in arbitrary folders on your site. Currently the only"
" way is to override TinyMCE internal CSS files using z3c.bot."
msgstr ""

#: ../../forms/z3c.form.rst:3
msgid "z3c.form library"
msgstr ""

#: ../../forms/z3c.form.rst:7
msgid ""
"``z3c.form`` is flexible and powerful form library for Zope 3 applications. "
"It is the recommended way to create complex Python-driven forms for Plone 4 "
"and later versions."
msgstr ""

#: ../../forms/z3c.form.rst:16
msgid "Plone uses *z3c.form* library with the following integration steps"
msgstr ""

#: ../../forms/z3c.form.rst:18
msgid ""
"`plone.app.z3cform <http://pypi.python.org/pypi/plone.app.z3cform>`_ "
"provides Plone specific widgets and main template"
msgstr ""

#: ../../forms/z3c.form.rst:21
msgid ""
"`plone.z3cform <http://pypi.python.org/pypi/plone.z3cform>`_ integrates "
"*z3c.form* with applications using Zope 2 mechanisms like acquisition"
msgstr ""

#: ../../forms/z3c.form.rst:24
msgid ""
"`z3c.form <http://pypi.python.org/pypi/z3c.form/>`_ is a form library which "
"can be used with any Python application using Zope 3 HTTP requests objects"
msgstr ""

#: ../../forms/z3c.form.rst:27
msgid ""
"(Plone 4.4+ only) `plone.app.widgets "
"<https://github.com/plone/plone.app.widgets/>`_ provide a better widget set "
"over *z3c.form* default with more JavaScript-enabled features"
msgstr ""

#: ../../forms/z3c.form.rst:31
msgid ""
"Forms are modelled using :doc:`zope.schema </forms/schemas>` models written "
"as Python classes. Widgets for modelled data are set by using either "
"*plone.directives.form* hints set onto schema class or in "
"``z3c.form.form.Form`` based classes body."
msgstr ""

#: ../../forms/z3c.form.rst:35
msgid "Starting points to learn *z3c.form* in Plone"
msgstr ""

#: ../../forms/z3c.form.rst:37
msgid ""
"Read about `creating schema-driven forms with Dexterity content subsystem "
"<http://developer.plone.org/reference_manuals/external/plone.app.dexterity"
"/schema-driven-forms/index.html>`_"
msgstr ""

#: ../../forms/z3c.form.rst:39
msgid ""
"`TODO app tutorial for Plone "
"<http://developer.plone.org/reference_manuals/external/tutorials.todoapp/docs/index.html>`_"
msgstr ""

#: ../../forms/z3c.form.rst:41
msgid "Other related packages you might want to take a closer look"
msgstr ""

#: ../../forms/z3c.form.rst:43
msgid ""
"Extra, more powerful widgets, from `collective.z3cform.widgets "
"<https://github.com/collective/collective.z3cform.widgets>`_"
msgstr ""

#: ../../forms/z3c.form.rst:45
msgid ""
"Tabular data edit `collective.z3cform.datagridfield "
"<https://github.com/collective/collective.z3cform.datagridfield>`_"
msgstr ""

#: ../../forms/z3c.form.rst:47
msgid ""
"Build JavaScript interfaces with `plone.app.jqueryui "
"<https://github.com/plone/plone.app.jqueryui>`_"
msgstr ""

#: ../../forms/z3c.form.rst:49
msgid ""
"Handling image and file fields with `plone.namedfile "
"<https://github.com/plone/plone.namedfile>`_"
msgstr ""

#: ../../forms/z3c.form.rst:51
msgid ""
"Configuring forms with `plone.form.directives "
"<https://pypi.python.org/pypi/plone.directives.form>`_"
msgstr ""

#: ../../forms/z3c.form.rst:54
msgid "``z3c.form`` big picture"
msgstr ""

#: ../../forms/z3c.form.rst:56
msgid "The form model consists of:"
msgstr ""

#: ../../forms/z3c.form.rst:59
msgid "``self.request``"
msgstr ""

#: ../../forms/z3c.form.rst:59
msgid "The incoming HTTP request."
msgstr ""

#: ../../forms/z3c.form.rst:63
msgid "``self.context``"
msgstr ""

#: ../../forms/z3c.form.rst:62
msgid ""
"The Plone content item which was associated with the form view when URL "
"traversing was done."
msgstr ""

#: ../../forms/z3c.form.rst:67
msgid "``self.getContent()``"
msgstr ""

#: ../../forms/z3c.form.rst:66
msgid ""
"The actual object extracted from context and manipulated by the form if "
"``ignoreContext`` is not ``False``."
msgstr ""

#: ../../forms/z3c.form.rst:71
msgid "``self.status``"
msgstr ""

#: ../../forms/z3c.form.rst:70
msgid ""
"A message displayed at the top of the form to the user when the form is "
"rendered. Usually it will be \"Please correct the errors below\"."
msgstr ""

#: ../../forms/z3c.form.rst:73
msgid "The call-chain for a form goes like this:"
msgstr ""

#: ../../forms/z3c.form.rst:75
msgid "``Form.update()`` is called"
msgstr ""

#: ../../forms/z3c.form.rst:77
msgid ""
"[``plone.autoform``-based forms only] Calls ``Form.updateFields()`` - this "
"will set widget factory methods for fields. If you want to customize the "
"type of the widget associated with the field, do it here. If your form is "
"not ``plone.autoform``-based you need to edit ``form.schema`` widget "
"factories on the module level code after the class has been constructed. The"
" logic mapping widget hints to widgets is in ``plone.autoform.utils``."
msgstr ""

#: ../../forms/z3c.form.rst:86
msgid ""
"Calls ``Form.updateWidgets()`` - you can customize widgets at this point, if"
" you override this method. The ``self.widgets`` instance is created based on"
" the ``self.fields`` property."
msgstr ""

#: ../../forms/z3c.form.rst:90
msgid "Calls ``Form.updateActions()``"
msgstr ""

#: ../../forms/z3c.form.rst:92
msgid ""
"Calls the action handler (the handler for the button which was clicked)"
msgstr ""

#: ../../forms/z3c.form.rst:95
msgid ""
"If it's an edit form, the action handler calls ``applyChanges()`` to store "
"new values on the object and returns ``True`` if any value was changed."
msgstr ""

#: ../../forms/z3c.form.rst:99
msgid "``Form.render()`` is called"
msgstr ""

#: ../../forms/z3c.form.rst:101
msgid "This renders the form as HTML, based on widgets and their templates."
msgstr ""

#: ../../forms/z3c.form.rst:104
msgid "Form"
msgstr ""

#: ../../forms/z3c.form.rst:107
msgid "Simple boilerplate"
msgstr ""

#: ../../forms/z3c.form.rst:109
msgid ""
"Here is a minimal form implementation using ``z3c.form`` and Dexterity:"
msgstr ""

#: ../../forms/z3c.form.rst:111
msgid "Include Dexterity in your buildout as instructed by Dexterity manual"
msgstr ""

#: ../../forms/z3c.form.rst:113
msgid "Create Plone add-on product using :doc:`Paster </getstarted/paste>`"
msgstr ""

#: ../../forms/z3c.form.rst:115
msgid "Include :doc:`five.grok support in your add-on </components/grok>`"
msgstr ""

#: ../../forms/z3c.form.rst:117
msgid "Toss ``form.py`` into your add-on product::"
msgstr ""

#: ../../forms/z3c.form.rst:178
msgid "Setting form status message"
msgstr ""

#: ../../forms/z3c.form.rst:180
msgid ""
"The form's global status message tells whether the form action succeeded or "
"not."
msgstr ""

#: ../../forms/z3c.form.rst:183
msgid ""
"The form status message will be rendered only on the form. If you want to "
"set a message which will be visible even if the user renders another page "
"after submitting the form, you need to use ``Products.statusmessage``."
msgstr ""

#: ../../forms/z3c.form.rst:188
msgid "To set the form status message::"
msgstr ""

#: ../../forms/z3c.form.rst:194
msgid "Emulating form HTTP POST in unit tests"
msgstr ""

#: ../../forms/z3c.form.rst:196
msgid "The HTTP request must include at least one buttons field."
msgstr ""

#: ../../forms/z3c.form.rst:198
msgid ""
"Form widget naming must match HTTP post values. Usually widgets have "
"``form.widgets`` prefix."
msgstr ""

#: ../../forms/z3c.form.rst:201
msgid ""
"You must emulate the ZPublisher behavior which automatically converts string"
" input to Python primitives. For example, all choice/select values are "
"Python lists."
msgstr ""

#: ../../forms/z3c.form.rst:205
msgid ""
"Some ``z3c`` widgets, like ``<select>``, need to have ``WIDGETNAME-empty-"
"marker`` value set to the integer 1 to be processed."
msgstr ""

#: ../../forms/z3c.form.rst:209
msgid ""
"Usually you can get the dummy HTTP request object via acquisition from "
"``self.portal.REQUEST``"
msgstr ""

#: ../../forms/z3c.form.rst:212
msgid "Example (incomplete)::"
msgstr ""

#: ../../forms/z3c.form.rst:229
msgid "A more complete example::"
msgstr ""

#: ../../forms/z3c.form.rst:262
msgid ""
"Note that you will need to set ``IFormLayer`` on the request, to prevent a "
"``ComponentLookupError``."
msgstr ""

#: ../../forms/z3c.form.rst:267
msgid "Changing form ACTION attribute"
msgstr ""

#: ../../forms/z3c.form.rst:269
msgid ""
"By default, the HTTP ``POST`` request is made to ``context.absolute_url()``."
" However you might want to make the post go to an external server."
msgstr ""

#: ../../forms/z3c.form.rst:272
msgid ""
"See `how to set <form> action attribute "
"<http://pypi.python.org/pypi/plone.app.z3cform#form-action>`_"
msgstr ""

#: ../../forms/z3c.form.rst:275
msgid "Customizing form inner template"
msgstr ""

#: ../../forms/z3c.form.rst:277
msgid ""
"If you want to change the page template producing ``<form>...</form>`` part "
"of the HTML code, follow the instructions below."
msgstr ""

#: ../../forms/z3c.form.rst:280
msgid ""
"Generally, when you have a template which extends Plone's ``main_template`` "
"you need to use the "
"``Products.Five.browser.pagetemplatefile.ViewPageTemplateFile`` class."
msgstr ""

#: ../../forms/z3c.form.rst:297
msgid "Customizing form frame"
msgstr ""

#: ../../forms/z3c.form.rst:299
msgid ""
"Please see `plone.app.zc3form README "
"<https://github.com/plone/plone.app.z3cform>`_."
msgstr ""

#: ../../forms/z3c.form.rst:302
msgid "Rendering a form manually"
msgstr ""

#: ../../forms/z3c.form.rst:304
msgid ""
"You can directly create a form instance and call it's ``form.render()`` "
"method. This will output the full page HTML. However, there is a way to only"
" render the form body payload."
msgstr ""

#: ../../forms/z3c.form.rst:308
msgid "First create a form and ``update()``::"
msgstr ""

#: ../../forms/z3c.form.rst:313
msgid ""
"Then you can invoke ``plone.app.z3cform`` macros directly to render the form"
" body in your view's page template."
msgstr ""

#: ../../forms/z3c.form.rst:355
msgid "Fields"
msgstr ""

#: ../../forms/z3c.form.rst:357
msgid ""
"A field is responsible for: 1) pre-populating form values from context 2) "
"storing data to context after successful ``POST``."
msgstr ""

#: ../../forms/z3c.form.rst:361
msgid ""
"Form fields are stored in the ``form.fields`` variable, which is an instance"
" of the ``Fields`` class (ordered, dictionary-like)."
msgstr ""

#: ../../forms/z3c.form.rst:365
msgid "Creating a field"
msgstr ""

#: ../../forms/z3c.form.rst:367
msgid ""
"Fields are created by adapting one or more ``zope.schema`` fields for "
"``z3c.form`` using the ``Fields()`` constructor."
msgstr ""

#: ../../forms/z3c.form.rst:370
msgid "Example of creating one field::"
msgstr ""

#: ../../forms/z3c.form.rst:381
msgid "Another example::"
msgstr ""

#: ../../forms/z3c.form.rst:402
msgid "Adding a field to a form"
msgstr ""

#: ../../forms/z3c.form.rst:404
msgid ""
"Use the overridden ``+=`` operator of a ``Fields`` instance. Fields "
"instances can be added to existing Fields instances."
msgstr ""

#: ../../forms/z3c.form.rst:412
msgid "Modifying a field"
msgstr ""

#: ../../forms/z3c.form.rst:414
msgid "Fields can be accessed by their name in ``form.fields``. Example::"
msgstr ""

#: ../../forms/z3c.form.rst:419 ../../forms/z3c.form.rst:970
msgid "Accessing the schema of the field"
msgstr ""

#: ../../forms/z3c.form.rst:421
msgid ""
"A ``zope.schema`` Field is stored as a ``field`` attribute of a field. "
"Example::"
msgstr ""

#: ../../forms/z3c.form.rst:428
msgid ""
"There exist only one singleton instance of a schema during run-time. If you "
"modify the schema fields, the changes are reflected to all subsequent form "
"updates and other forms which use the same schema."
msgstr ""

#: ../../forms/z3c.form.rst:434
msgid "Read-only fields"
msgstr ""

#: ../../forms/z3c.form.rst:436
msgid "There is ``field.readonly`` flag."
msgstr ""

#: ../../forms/z3c.form.rst:438
msgid "Example code::"
msgstr ""

#: ../../forms/z3c.form.rst:474
msgid ""
"You might also want to disable the *edit* button if none of the fields are "
"editable::"
msgstr ""

#: ../../forms/z3c.form.rst:482
msgid ""
"You can also set ``z3c.form.interfaces.DISPLAY_MODE`` in ``updateWidgets()``"
" if you are not dynamically poking form fields themselves."
msgstr ""

#: ../../forms/z3c.form.rst:488
msgid ""
"Do not modify fields on singleton instances (form or fields objects are "
"shared between all forms). This causes problems on concurrent access."
msgstr ""

#: ../../forms/z3c.form.rst:494
msgid ""
"``zope.schema.Field`` has a ``readonly`` property. ``z3c.form.field.Field`` "
"does not have this property, but has the ``mode`` property. Do not confuse "
"these two."
msgstr ""

#: ../../forms/z3c.form.rst:501
msgid "Below is an example of how to include new schemas on the fly::"
msgstr ""

#: ../../forms/z3c.form.rst:539
msgid "Date and time"
msgstr ""

#: ../../forms/z3c.form.rst:550
msgid "See"
msgstr ""

#: ../../forms/z3c.form.rst:552
msgid ""
"http://stackoverflow.com/questions/5776498/specify-datetime-format-on-zope-"
"schema-date-on-plone"
msgstr ""

#: ../../forms/z3c.form.rst:554
msgid ""
"http://svn.zope.org/zope.schema/trunk/src/zope/schema/tests/test_datetime.py?rev=113055&view=auto"
msgstr ""

#: ../../forms/z3c.form.rst:557
msgid "Making boolean field required"
msgstr ""

#: ../../forms/z3c.form.rst:559
msgid "E.g. to make \"Accept Terms and Conditions\" checkbox"
msgstr ""

#: ../../forms/z3c.form.rst:561
msgid ""
"http://stackoverflow.com/questions/9670819/how-do-i-make-a-boolean-field-"
"required-in-a-z3c-form"
msgstr ""

#: ../../forms/z3c.form.rst:564
msgid "Widgets"
msgstr ""

#: ../../forms/z3c.form.rst:566
msgid ""
"Widget are responsible for 1) rendering HTML code for input; 2) parsing HTTP"
" post input."
msgstr ""

#: ../../forms/z3c.form.rst:570
msgid ""
"Widgets are stored as the ``widgets`` attribute of a form. It is presented "
"by an ordered dict-like ``Widgets`` class."
msgstr ""

#: ../../forms/z3c.form.rst:573
msgid ""
"Widgets are only available after the form's ``update()`` and "
"``updateWidgets()`` methods have been called. ``updateWidgets()`` will bind "
"widgets to the form context. For example, vocabularies defined by name are "
"resolved at this point."
msgstr ""

#: ../../forms/z3c.form.rst:578
msgid "A widget has two names:"
msgstr ""

#: ../../forms/z3c.form.rst:580
msgid ""
"``widget.__name__`` is the name of the corresponding field. Lookups from "
"``form.widgets[]`` can be done using this name."
msgstr ""

#: ../../forms/z3c.form.rst:583
msgid ""
"``widget.name`` is the decorated name used in HTML code. It has the format "
"``${form name}.${field set name}.${widget.__name__}``."
msgstr ""

#: ../../forms/z3c.form.rst:587
msgid ""
"The Zope publisher will also mangle widget names based on what kind of input"
" the widget takes. When an HTTP ``POST`` request comes in, Zope publisher "
"automatically converts ``<select>`` dropdowns to lists and so on."
msgstr ""

#: ../../forms/z3c.form.rst:593
msgid "Setting a widget for a field"
msgstr ""

#: ../../forms/z3c.form.rst:596
msgid "Using plone.directives.form schema hints"
msgstr ""

#: ../../forms/z3c.form.rst:628
msgid ""
"`Form schema hints "
"<https://developer.plone.org/reference_manuals/external/plone.app.dexterity/reference"
"/form-schema-hints.html>`_"
msgstr ""

#: ../../forms/z3c.form.rst:632
msgid "Setting widget for z3c.form plain forms"
msgstr ""

#: ../../forms/z3c.form.rst:634
msgid ""
"You can set field's widgetFactory after fields have been declared in form "
"class body."
msgstr ""

#: ../../forms/z3c.form.rst:666
msgid "Setting widget dynamically Form.updateWidgets()"
msgstr ""

#: ../../forms/z3c.form.rst:668
msgid "Widget type can be set dynamically based on external conditions."
msgstr ""

#: ../../forms/z3c.form.rst:684
msgid "Accessing a widget"
msgstr ""

#: ../../forms/z3c.form.rst:686
msgid "A widget can be accessed by its field's name. Example::"
msgstr ""

#: ../../forms/z3c.form.rst:698
msgid "Introspecting form widgets"
msgstr ""

#: ../../forms/z3c.form.rst:716
msgid "Reordering and hiding widgets"
msgstr ""

#: ../../forms/z3c.form.rst:718
msgid ""
"With Dexterity forms you can use `plone.directives.form "
"<http://pypi.python.org/pypi/plone.directives.form>`_::"
msgstr ""

#: ../../forms/z3c.form.rst:738
msgid "Modifying a widget"
msgstr ""

#: ../../forms/z3c.form.rst:740
msgid ""
"Widgets are stored in the ``form.widgets`` dictionary, which maps *field "
"name* to *widget*. The widget label can be different than the field name."
msgstr ""

#: ../../forms/z3c.form.rst:755
msgid ""
"If you want to have a completely different Python class for a widget, you "
"need to override field's widget factory in the module body code after fields"
" have been constructed in the class, or in the ``update()`` method for "
"dynamically constructed fields::"
msgstr ""

#: ../../forms/z3c.form.rst:764
msgid "Reorder form widgets"
msgstr ""

#: ../../forms/z3c.form.rst:766
msgid ""
"``plone.z3cform`` allows you to reorder the field widgets by overriding the "
"``update`` method of the form class."
msgstr ""

#: ../../forms/z3c.form.rst:782
msgid ""
"For more information about how to reorder fields see the ``plone.z3cform`` "
"page at PyPI:"
msgstr ""

#: ../../forms/z3c.form.rst:785
msgid ""
"<http://pypi.python.org/pypi/plone.z3cform#fieldsets-and-form-extenders>`_"
msgstr ""

#: ../../forms/z3c.form.rst:789
msgid "Hiding fields"
msgstr ""

#: ../../forms/z3c.form.rst:791
msgid "Here's how to do it in pure ``z3c.form``::"
msgstr ""

#: ../../forms/z3c.form.rst:799
msgid ""
"If you want to hide a widget that is part of a group, you cannot use the "
"updateWidgets method. The groups and their widgets get initialized after the"
" widgets have been updated. Before that, the groups variable is just a list "
"of group factories. During the update method though, the groups have been "
"initialized and have their own widget list each. For hiding widgets there, "
"you have to access the group in the update method like so::"
msgstr ""

#: ../../forms/z3c.form.rst:814
msgid ""
"groups itself is a list like object, you can also remove a complete group by"
" just removing it from the group dictionary."
msgstr ""

#: ../../forms/z3c.form.rst:817
msgid "Unprefixing widgets"
msgstr ""

#: ../../forms/z3c.form.rst:819
msgid ""
"By default each form widget gets a name prefixed by the form id. This allows"
" you to combine several forms on the same page."
msgstr ""

#: ../../forms/z3c.form.rst:822
msgid "You can override this behavior in ``updateWidgets()``::"
msgstr ""

#: ../../forms/z3c.form.rst:832
msgid ""
"Some templates, like ``select_input.pt``, have hard-coded name suffixes like"
" ``:list`` to satisfy ZPublisher machinery. If you need to get rid of these,"
" you need to override the template."
msgstr ""

#: ../../forms/z3c.form.rst:837
msgid "Making widgets required conditionally"
msgstr ""

#: ../../forms/z3c.form.rst:839
msgid ""
"If you want to avoid hardwired ``required`` on fields and toggle then "
"conditionally, you need to supply a dynamically modified schema field to the"
" ``z3c.form.field.Fields`` instance of the form."
msgstr ""

#: ../../forms/z3c.form.rst:887
msgid "Setting widget types"
msgstr ""

#: ../../forms/z3c.form.rst:889
msgid ""
"By default, widgets for form fields are determined by ``FieldWidget`` "
"adapters (defined in :term:`ZCML`). You can override adapters per field "
"using field's ``widgetFactory`` property."
msgstr ""

#: ../../forms/z3c.form.rst:893
msgid ""
"Below is an example which creates a custom widget, its ``FieldWidget`` "
"factory, and uses it for one field in one form::"
msgstr ""

#: ../../forms/z3c.form.rst:935
msgid ""
"Alternatively, you can use `plone.directives.form "
"<http://pypi.python.org/pypi/plone.directives.form>`_ to add widget hints to"
" form schema."
msgstr ""

#: ../../forms/z3c.form.rst:940
msgid "Widget save"
msgstr ""

#: ../../forms/z3c.form.rst:942
msgid ""
"After ``form.update()`` if the request was *save* and all data was valid, "
"``form.applyChanges(data)`` is called."
msgstr ""

#: ../../forms/z3c.form.rst:945
msgid ""
"By default widgets use ``datamanger.AttributeField`` and try to store their "
"values as a member attribute of the object returned by "
"``form.getContent()``."
msgstr ""

#: ../../forms/z3c.form.rst:0
msgid "Todo"
msgstr ""

#: ../../forms/z3c.form.rst:948
msgid "How do add custom DataManager"
msgstr ""

#: ../../forms/z3c.form.rst:951
msgid "Widget value"
msgstr ""

#: ../../forms/z3c.form.rst:953
msgid ""
"The widget value, either from form ``POST`` or previous context data, is "
"available as ``widget.value`` after the ``form.update()`` call."
msgstr ""

#: ../../forms/z3c.form.rst:958
msgid "Adding a CSS class"
msgstr ""

#: ../../forms/z3c.form.rst:960
msgid ""
"Widgets have a method ``addClass()`` to add extra CSS classes. This is "
"useful if you have Javascript/JQuery associated with your special form::"
msgstr ""

#: ../../forms/z3c.form.rst:966
msgid ""
"Note that these classes are directly applied to ``<input>``, ``<select>``, "
"etc. itself, and not to the wrapping ``<div>`` element."
msgstr ""

#: ../../forms/z3c.form.rst:972
msgid ""
"A ``zope.schema`` Field is stored as a ``field`` attribute of a widget. "
"Example::"
msgstr ""

#: ../../forms/z3c.form.rst:979
msgid "``Widget.field`` is not a ``z3c.form.field.Field`` object."
msgstr ""

#: ../../forms/z3c.form.rst:982
msgid "Getting selection widget vocabulary value as human readable text"
msgstr ""

#: ../../forms/z3c.form.rst:992
msgid "Example (page template)"
msgstr ""

#: ../../forms/z3c.form.rst:1002
msgid "Setting widget templates"
msgstr ""

#: ../../forms/z3c.form.rst:1004
msgid ""
"You might want to customize the template of a widget to have custom HTML "
"code for a specific use case."
msgstr ""

#: ../../forms/z3c.form.rst:1008
msgid "Setting the template of an individual widget"
msgstr ""

#: ../../forms/z3c.form.rst:1010
msgid ""
"First copy the existing page template code of the widget. For basic widgets "
"you can find the template in the `z3c.form source tree "
"<http://svn.zope.org/z3c.form/trunk/src/z3c/form/browser/>`_."
msgstr ""

#: ../../forms/z3c.form.rst:1015
msgid "``yourwidget.pt`` (text area widget copied over an example text)"
msgstr ""

#: ../../forms/z3c.form.rst:1057
msgid ""
"Now you can override the template factory in the ``updateWidgets()`` method "
"of your form class"
msgstr ""

#: ../../forms/z3c.form.rst:1082
msgid ""
"You can also interact with your ``form`` class instance from the widget "
"template"
msgstr ""

#: ../../forms/z3c.form.rst:1092
msgid "Setting template for your own widget type"
msgstr ""

#: ../../forms/z3c.form.rst:1094
msgid ""
"You can set the template used by the widget with the "
"``<z3c:widgetTemplate>`` ZCML directive"
msgstr ""

#: ../../forms/z3c.form.rst:1106
msgid ""
"You can also enforce the widget template in the ``render()`` method of the "
"widget class::"
msgstr ""

#: ../../forms/z3c.form.rst:1132
msgid "Widget template example::"
msgstr ""

#: ../../forms/z3c.form.rst:1166
msgid "Setting widget frame template"
msgstr ""

#: ../../forms/z3c.form.rst:1168
msgid ""
"You can change how the frame around each widget is rendered in the widget "
"rendering loop. This frame has elements like label, required marker, field "
"description and so on."
msgstr ""

#: ../../forms/z3c.form.rst:1172
msgid ""
"For instructions see `plone.app.z3cform README "
"<https://github.com/plone/plone.app.z3cform/>`_"
msgstr ""

#: ../../forms/z3c.form.rst:1175
msgid "Combined widgets"
msgstr ""

#: ../../forms/z3c.form.rst:1177
msgid ""
"You can combine multiple widgets to one with "
"``z3c.form.browser.multil.MultiWidget`` and "
"``z3c.form.browser.object.ObjectWidget`` classes."
msgstr ""

#: ../../forms/z3c.form.rst:1179
msgid "Example how to create a min max input widget."
msgstr ""

#: ../../forms/z3c.form.rst:1181
msgid "Python code to setup the widget:"
msgstr ""

#: ../../forms/z3c.form.rst:1214
msgid "Then we do some widget marking in ``updateWidgets()``::"
msgstr ""

#: ../../forms/z3c.form.rst:1229
msgid ""
"And then the page template which renders both 0. widget  (min) and 1. widget"
" (max) on the same line."
msgstr ""

#: ../../forms/z3c.form.rst:1286
msgid "Buttons"
msgstr ""

#: ../../forms/z3c.form.rst:1288
msgid ""
"Buttons enable actions in forms. ``AddForm`` and ``EditForm`` base classes "
"come with default buttons (:guilabel:`Save`)."
msgstr ""

#: ../../forms/z3c.form.rst:1291
msgid "More information in ``z3c.form`` documentation"
msgstr ""

#: ../../forms/z3c.form.rst:1293
msgid "http://packages.python.org/z3c.form/button.html"
msgstr ""

#: ../../forms/z3c.form.rst:1296
msgid "Adding a button to form"
msgstr ""

#: ../../forms/z3c.form.rst:1298
msgid ""
"The easiest way to add handlers for buttons is to use a function decorator "
"``z3c.form.button.buttonAndHandler()``."
msgstr ""

#: ../../forms/z3c.form.rst:1301
msgid ""
"The first parameter is the user visible label and the second one is the "
"``<input>`` name."
msgstr ""

#: ../../forms/z3c.form.rst:1321
msgid ""
"The default ``z3c.form.form.AddForm`` and ``z3c.form.form.EditForm`` "
":guilabel:`Add` and :guilabel:`Save` button handler calls are good code "
"examples."
msgstr ""

#: ../../forms/z3c.form.rst:1325
msgid ""
"http://svn.zope.org/z3c.form/trunk/src/z3c/form/form.py?rev=114824&view=auto"
msgstr ""

#: ../../forms/z3c.form.rst:1327
msgid ""
"If you created a form based on another form, the buttons defined on that "
"other form get lost. To prevent that, you must explicitly add the buttons of"
" the base class in your form class::"
msgstr ""

#: ../../forms/z3c.form.rst:1342
msgid "Adding buttons conditionally"
msgstr ""

#: ../../forms/z3c.form.rst:1344
msgid ""
"The ``buttonAndHandler`` decorator can accept a condition argument. The "
"condition should be a function that accepts the form as an argument and "
"returns a boolean. Example, a button that only shows when a condition is "
"met::"
msgstr ""

#: ../../forms/z3c.form.rst:1364
msgid "Manipulating form buttons programmatically"
msgstr ""

#: ../../forms/z3c.form.rst:1366
msgid ""
"You want to manipulate buttons if you want to hide buttons dynamically, "
"manipulate labels, etc."
msgstr ""

#: ../../forms/z3c.form.rst:1369
msgid "Buttons are stored in ``buttons`` class attribute."
msgstr ""

#: ../../forms/z3c.form.rst:1373
msgid ""
"Button storage is shared between all form instances, so do not mutate its "
"content. Instead create a copy of it if you wish to have form-specific "
"changes."
msgstr ""

#: ../../forms/z3c.form.rst:1378
msgid "Reading buttons"
msgstr ""

#: ../../forms/z3c.form.rst:1389
msgid "Removing or hiding buttons"
msgstr ""

#: ../../forms/z3c.form.rst:1391
msgid ""
"Here is an example how to hide all buttons from a certain form instance."
msgstr ""

#: ../../forms/z3c.form.rst:1409
msgid "Adding buttons dynamically"
msgstr ""

#: ../../forms/z3c.form.rst:1411
msgid ""
"In the example below, the ``Buttons`` array is already constructed "
"dynamically and we can manipulate it::"
msgstr ""

#: ../../forms/z3c.form.rst:1430
msgid "Subforms"
msgstr ""

#: ../../forms/z3c.form.rst:1432
msgid "Subforms are embedded ``z3c`` forms inside a master form."
msgstr ""

#: ../../forms/z3c.form.rst:1434
msgid ""
"Subforms may have their own buttons or use the controls from the master "
"form. You need to call ``update()`` manually for subforms."
msgstr ""

#: ../../forms/z3c.form.rst:1440
msgid "http://packages.python.org/z3c.form/subform.html"
msgstr ""

#: ../../forms/z3c.form.rst:1443
msgid "Adding an action to parent and subform"
msgstr ""

#: ../../forms/z3c.form.rst:1445
msgid "Parent and subform actions must be linked."
msgstr ""

#: ../../forms/z3c.form.rst:1500
msgid "Creating subforms at run-time"
msgstr ""

#: ../../forms/z3c.form.rst:1502
msgid ""
"Below is an example how to convert existing form instance to be used as an "
"subform in another form::"
msgstr ""

#: ../../forms/z3c.form.rst:1538
msgid ""
"If possible, try to construct your form class hierarchy so that you can use "
"the same class mix-in for normal forms and subforms."
msgstr ""

#: ../../forms/z3c.form.rst:1542
msgid "CRUD form"
msgstr ""

#: ../../forms/z3c.form.rst:1544
msgid "CRUD (Create, read, update, delete) forms manage list of objects."
msgstr ""

#: ../../forms/z3c.form.rst:1546
msgid "CRUD form elements:"
msgstr ""

#: ../../forms/z3c.form.rst:1548
msgid "Add form creates new objects and renders the form below the table"
msgstr ""

#: ../../forms/z3c.form.rst:1550
msgid "Edit sub-form edits existing object and renders one table row"
msgstr ""

#: ../../forms/z3c.form.rst:1552
msgid "Edit form lists all objects and allows deleting them (table master)"
msgstr ""

#: ../../forms/z3c.form.rst:1554
msgid "CRUD form orchestrates the whole thing and renders add and edit forms"
msgstr ""

#: ../../forms/z3c.form.rst:1556
msgid "``view_schema`` outputs read-only fields in CRUD table"
msgstr ""

#: ../../forms/z3c.form.rst:1558
msgid ""
"``update_schema`` outputs editable fields in CRUD table. Usually you want "
"either ``view_schema`` or ``update_schema``."
msgstr ""

#: ../../forms/z3c.form.rst:1561
msgid "``add_schema`` outputs add form."
msgstr ""

#: ../../forms/z3c.form.rst:1563
msgid ""
"the ``context`` attribute of add and edit form is the parent CRUD form. The "
"``context`` attribute of an edit subform is the edit form."
msgstr ""

#: ../../forms/z3c.form.rst:1567
msgid "Examples"
msgstr ""

#: ../../forms/z3c.form.rst:1569
msgid ""
"Easy: `plone.app.headeranimation animation and image list manager "
"<https://svn.plone.org/svn/collective/plone.app.headeranimation/trunk/plone/app/headeranimation/browser/forms.py>`_."
msgstr ""

#: ../../forms/z3c.form.rst:1571
msgid ""
"Complex: `Singing & dancing channel manager example "
"<https://svn.plone.org/svn/collective/collective.dancing/trunk/collective/dancing/browser/channel.py>`_"
msgstr ""

#: ../../forms/z3c.form.rst:1574
msgid "Displaying the status message in a non-standard location"
msgstr ""

#: ../../forms/z3c.form.rst:1576
msgid ""
"By default, the status message is rendered inside ``plone.app.z3cform`` "
"``macros.pt`` above the form:"
msgstr ""

#: ../../forms/z3c.form.rst:1598
msgid ""
"We can decouple the status message from the form, without overriding all the"
" templates, by copying status message variable to another variable and then "
"playing around with it in our wrapper view template."
msgstr ""

#: ../../forms/z3c.form.rst:1603
msgid "Form class::"
msgstr ""

#: ../../forms/z3c.form.rst:1642
msgid ""
"... and then we can use a special ``result_message`` view accessor in our "
"view template code"
msgstr ""

#: ../../forms/z3c.form.rst:1661
msgid "Storage format and data managers"
msgstr ""

#: ../../forms/z3c.form.rst:1663
msgid ""
"By default, ``z3c.form`` reads incoming context values as the object "
"attributes. This behavior can be customized using data managers."
msgstr ""

#: ../../forms/z3c.form.rst:1667
msgid ""
"You can, for example, use Python dictionaries to read and store form data."
msgstr ""

#: ../../forms/z3c.form.rst:1669
msgid "http://packages.python.org/z3c.form/datamanager.html"
msgstr ""

#: ../../forms/z3c.form.rst:1672
msgid "Custom content objects"
msgstr ""

#: ../../forms/z3c.form.rst:1674
msgid ""
"The following hack can be used if you have an object which does not conform "
"your form interface and you want to expose only certain object attribute to "
"the form to be edited."
msgstr ""

#: ../../forms/z3c.form.rst:1710
msgid ""
"Since ``getContent()`` is also used in ``applyChanges()``, you need to "
"override ``applyChanges()`` as well to save values correctly to a persistent"
" object."
msgstr ""

#: ../../forms/z3c.form.rst:1715
msgid "Custom change applying"
msgstr ""

#: ../../forms/z3c.form.rst:1717
msgid ""
"The default, the behavior of the ``z3c.form`` edit form is to write incoming"
" data as the attributes of the object returned by ``getContent()``."
msgstr ""

#: ../../forms/z3c.form.rst:1720
msgid ""
"You can override this behavior by overriding ``applyChanges()`` method."
msgstr ""

#: ../../forms/z3c.form.rst:1741
msgid "WYSIWYG widgets"
msgstr ""

#: ../../forms/z3c.form.rst:1743
msgid ""
"By using `plone.directives.form "
"<http://pypi.python.org/pypi/plone.directives.form>`_ and `plone.app.z3cform"
" <http://pypi.python.org/pypi/plone.app.z3cform>`_ packages you can do::"
msgstr ""

#: ../../forms/z3c.form.rst:1763
msgid "http://pypi.python.org/pypi/plone.directives.form"
msgstr ""

#: ../../forms/z3c.form.rst:1766
msgid "Wrapped and non-wrapped forms"
msgstr ""

#: ../../forms/z3c.form.rst:1768
msgid ""
"A ``z3c.form.form.Form`` object is \"wrapped\" when it is rendered inside "
"Plone page frame and having acquisition chain in intact."
msgstr ""

#: ../../forms/z3c.form.rst:1772
msgid "Since ``plone.app.z3cform`` 0.5.0 the behavior goes like this:"
msgstr ""

#: ../../forms/z3c.form.rst:1774
msgid "Plone 3 forms are automatically wrapped"
msgstr ""

#: ../../forms/z3c.form.rst:1776
msgid "Plone 4 forms are unwrapped"
msgstr ""

#: ../../forms/z3c.form.rst:1778
msgid ""
"The wrapper is a ``plone.z3cform.interfaces.IWrappedForm`` :doc:`marker "
"interface </components/interfaces>` on the form object, applied it after the"
" form instance has been constructed. If this marker interface is not "
"applied, ``plone.z3cform.ZopeTwoFormTemplateFactory`` tries to embed the "
"form into Plone page frame. If the form is not intended to be rendered as a "
"full page form, this usually leads to the following exception::"
msgstr ""

#: ../../forms/z3c.form.rst:1789
msgid ""
"The form tries to render the full Plone page. Rendering this page needs an "
"acquisition chain set-up for the view and the template. Embedded forms do "
"not have this, or it would lead to recursion error."
msgstr ""

#: ../../forms/z3c.form.rst:1794
msgid ""
"If you are constructing form instances manually and want to render them "
"without Plone page decoration, you must make sure that automatic form "
"wrapping does not take place::"
msgstr ""

#: ../../forms/z3c.form.rst:1824
msgid "Embedding z3c.form forms in portlets, viewlets and views"
msgstr ""

#: ../../forms/z3c.form.rst:1826
msgid ""
"By default, when ``plone.app.z3cform`` is installed through the add-on "
"installer, all forms have full Plone page frame. If you are rendering forms "
"inside non-full-page objects, you need to change the default template."
msgstr ""

#: ../../forms/z3c.form.rst:1831
msgid ""
"Below is an example how to include a ``z3c.form``-based form in a portlet."
msgstr ""

#: ../../forms/z3c.form.rst:1835
msgid ""
"``plone.app.z3cform`` version 0.5.1 or later is needed, as older versions do"
" not support overriding ``form.action`` property."
msgstr ""

#: ../../forms/z3c.form.rst:1839
msgid "You need the following:"
msgstr ""

#: ../../forms/z3c.form.rst:1841
msgid "a ``z3c.form`` class"
msgstr ""

#: ../../forms/z3c.form.rst:1843
msgid "the viewlet/portlet class"
msgstr ""

#: ../../forms/z3c.form.rst:1845
msgid ""
"A form wrapper template which renders the frame around the form. The default"
" version renders the whole Plone page frame --- you don't want this when the"
" form is embedded, otherwise you get infinite recursion (plone page having a"
" form having a plone page...)"
msgstr ""

#: ../../forms/z3c.form.rst:1851
msgid "Portlet/viewlet template which refers to the form"
msgstr ""

#: ../../forms/z3c.form.rst:1853
msgid "ZCML to register all components"
msgstr ""

#: ../../forms/z3c.form.rst:1855
msgid "Portlet code::"
msgstr ""

#: ../../forms/z3c.form.rst:1915
msgid ""
"``formwrapper.pt`` is just a dummy form view template which wraps the form. "
"This differs from standard form wrapper by *not* rendering Plone main layout"
" around the form."
msgstr ""

#: ../../forms/z3c.form.rst:1925
msgid ""
"Then the portlet template itself (``zohoportlet.pt``) renders the portlet. "
"The form is rendered using: ``<form tal:replace=\"structure "
"view/form_wrapper\" />``."
msgstr ""

#: ../../forms/z3c.form.rst:1960
msgid ""
"Viewlets behave a little differently, since they do some acquisition chain "
"mangling when you assign variables to ``self``. Thus you should never have "
"``self.view = view`` or ``self.form = form`` in a viewlet."
msgstr ""

#: ../../forms/z3c.form.rst:1964
msgid "Template example for viewlet (don't do ``sel.form_wrapper``)"
msgstr ""

#: ../../forms/z3c.form.rst:1972
msgid "Then the necessary parts of form itself::"
msgstr ""

#: ../../forms/z3c.form.rst:2134
msgid "Further reading"
msgstr ""

#: ../../forms/z3c.form.rst:2136
msgid ""
"This example code was taken from the ``mfabrik.plonezohointegration`` "
"product which is in the Plone collective."
msgstr ""

#: ../../forms/z3c.form.rst:2142
msgid "Validators"
msgstr ""

#: ../../forms/z3c.form.rst:2147
msgid ""
"Please read `Dexterity manual validators chapter "
"<http://plone.org/products/dexterity/documentation/manual/schema-driven-"
"forms/customising-form-behaviour/referencemanual-all-pages>`_."
msgstr ""

#: ../../forms/z3c.form.rst:2149
msgid "There are three kind of validation hooks you can use with z3c.form"
msgstr ""

#: ../../forms/z3c.form.rst:2151
msgid "zope.schema field parameter specific"
msgstr ""

#: ../../forms/z3c.form.rst:2153
msgid "zope.schema @invariant (validation is model specific)"
msgstr ""

#: ../../forms/z3c.form.rst:2155
msgid "zope.schema constrain (validation is model specific)"
msgstr ""

#: ../../forms/z3c.form.rst:2157
msgid "z3c.form (validation is bound ot the form instance)"
msgstr ""

#: ../../forms/z3c.form.rst:2160
msgid "Field specific internal validators"
msgstr ""

#: ../../forms/z3c.form.rst:2162
msgid ""
"When you define your field with *zope.schema* you can enable flags for field"
" internal validation. This include e.g."
msgstr ""

#: ../../forms/z3c.form.rst:2166
msgid "``required`` is field required on the form or not"
msgstr ""

#: ../../forms/z3c.form.rst:2168
msgid "``min`` and ``max`` for number based fields"
msgstr ""

#: ../../forms/z3c.form.rst:2181
msgid ""
"For available internal validation options, see the field source code in "
"zope.schema package."
msgstr ""

#: ../../forms/z3c.form.rst:2184
msgid "Constrain validators"
msgstr ""

#: ../../forms/z3c.form.rst:2186
msgid ""
"zope.schema fields take a callable argument ``constrain`` which defines a "
"Python function validating the incoming value."
msgstr ""

#: ../../forms/z3c.form.rst:2207
msgid "For more information, see ``zope.schema`` documentation."
msgstr ""

#: ../../forms/z3c.form.rst:2210
msgid "Invariant validators"
msgstr ""

#: ../../forms/z3c.form.rst:2212
msgid "TODO: Are invariants useful with z3c.form??"
msgstr ""

#: ../../forms/z3c.form.rst:2215
msgid "Form widget validators"
msgstr ""

#: ../../forms/z3c.form.rst:2217
msgid "Validators are best added in the schema itself."
msgstr ""

#: ../../forms/z3c.form.rst:2219
msgid ""
"If you are using plain ``z3c.form``, you can check the `validators "
"documentation <http://packages.python.org/z3c.form/validator.html>`_."
msgstr ""

#: ../../forms/z3c.form.rst:2222
msgid ""
"The plone.form.directives package provides convenient `decorators for form "
"validators <http://pypi.python.org/pypi/plone.directives.form#validators>`_."
" If you use ``plone.form.directives`` validators, make sure your package is "
":doc:`grokked </components/grok>` (otherwise validators are not registered)."
msgstr ""

#: ../../forms/z3c.form.rst:2228
msgid "Example: How to use widget specific validators with ``z3c.form``::"
msgstr ""

#: ../../forms/z3c.form.rst:2273
msgid ""
"http://plone.org/products/dexterity/documentation/manual/schema-driven-forms"
"/customising-form-behaviour/validation"
msgstr ""

#: ../../forms/z3c.form.rst:2276
msgid "Custom field specific validation in form action handlers and update()"
msgstr ""

#: ../../forms/z3c.form.rst:2278
msgid "http://stackoverflow.com/a/17466776/315168"
msgstr ""

#: ../../forms/z3c.form.rst:2281
msgid "Customizing and translating error messages"
msgstr ""

#: ../../forms/z3c.form.rst:2283
msgid "If you want to custom error messages on per-field level::"
msgstr ""

#: ../../forms/z3c.form.rst:2289
msgid ""
"Leave ``field`` parameter out if you want the new error message to apply to "
"all fields."
msgstr ""

#: ../../forms/z3c.form.rst:2294
msgid "Read-only and disabled fields"
msgstr ""

#: ../../forms/z3c.form.rst:2296
msgid "Read-only fields are not rendered in form edit mode::"
msgstr ""

#: ../../forms/z3c.form.rst:2304
msgid ""
"If the widget mode is ``display`` then it is rendered as in form view mode, "
"so that the user cannot edit::"
msgstr ""
