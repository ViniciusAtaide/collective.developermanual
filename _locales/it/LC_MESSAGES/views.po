# 
msgid ""
msgstr ""
"Project-Id-Version: Plone Developer Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-09 14:17+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../views/browserviews.rst:3
msgid "Views"
msgstr ""

#: ../../views/browserviews.rst:5 ../../views/layers.rst:5
#: ../../views/viewlets.rst:5
msgid "Description"
msgstr ""

#: ../../views/browserviews.rst:7
msgid "Rendering HTML pages in Plone using the Zope 3 *view* pattern."
msgstr ""

#: ../../views/browserviews.rst:12 ../../views/layers.rst:13
#: ../../views/viewlets.rst:13
msgid "Introduction"
msgstr ""

#: ../../views/browserviews.rst:14
msgid ""
"Plone/Zope uses a *view* pattern to output dynamically generated HTML pages."
msgstr ""

#: ../../views/browserviews.rst:16
msgid ""
"*Views* are the basic elements of modern Python web frameworks. A view runs "
"code to setup Python variables for a rendering template. Output is not "
"limited to HTML pages and snippets, but may contain :term:`JSON`, file "
"download payloads, or other data formats."
msgstr ""

#: ../../views/browserviews.rst:21
msgid "Views are usually a combination of:"
msgstr ""

#: ../../views/browserviews.rst:23
msgid "a Python class, which performs the user interface logic setup, and a"
msgstr ""

#: ../../views/browserviews.rst:24
msgid ""
"corresponding :term:`ZPT` page template, or direct Python string output."
msgstr ""

#: ../../views/browserviews.rst:26
msgid ""
"By keeping as much of the view logic in a separate Python class as we can "
"and making the page template as simple as possible, better component "
"readability and reuse is achieved. You can override the Python logic or the "
"template file, or both."
msgstr ""

#: ../../views/browserviews.rst:31
msgid ""
"When you are working with Plone, the most usual view type is ``BrowserView``"
" from the `Products.Five`_ package, but there are others."
msgstr ""

#: ../../views/browserviews.rst:34
msgid ""
"Each ``BrowserView`` class is a Python callable. The "
"``BrowserView.__call__()`` method acts as an entry point to executing the "
"view code. From Zope's point of view, even a function would be sufficient, "
"as it is a callable."
msgstr ""

#: ../../views/browserviews.rst:40
msgid "Plain Zope 3 vs. Grok"
msgstr ""

#: ../../views/browserviews.rst:42
msgid ""
"Views were introduced in Zope 3 and made available in Plone by way of the "
"`Products.Five`_ package, which provides some Plone/Zope 2 specific "
"adaptation hooks to the modern Zope 3 code base.  However, Zope 3's way of "
"XML-based configuration using :term:`ZCML` and separating things to three "
"different files (Python module, ZCML configuration, TAL template) was later "
"seen as cumbersome."
msgstr ""

#: ../../views/browserviews.rst:49
msgid ""
"Later, a project called `Grok <http://grok.zope.org/>`_ was started to "
"introduce an easy API to Zope 3, including a way to set up and maintain "
"views. For more information about how to use Grok (found in the `five.grok`_"
" package) with Plone, please read the `Plone and Grok tutorial "
"<http://plone.org/products/dexterity/documentation/manual/five.grok>`_."
msgstr ""

#: ../../views/browserviews.rst:56
msgid ""
"At the time of writing (Q1/2010), all project templates in Paster still use "
"old-style Zope views."
msgstr ""

#: ../../views/browserviews.rst:60 ../../views/browserviews.rst:739
#: ../../views/layers.rst:183
msgid "More information"
msgstr ""

#: ../../views/browserviews.rst:62
msgid ""
"`Zope view tutorial "
"<http://plone.org/documentation/tutorial/borg/zope-3-views>`_."
msgstr ""

#: ../../views/browserviews.rst:64
msgid ""
"`Grok view tutorial "
"<http://plone.org/products/dexterity/documentation/manual/five.grok/browser-"
"components/views>`_."
msgstr ""

#: ../../views/browserviews.rst:67
msgid "View components"
msgstr ""

#: ../../views/browserviews.rst:69
msgid ""
"Views are Zope Component Architecture (:term:`ZCA`) *multi-adapter "
"registrations*."
msgstr ""

#: ../../views/browserviews.rst:72
msgid ""
"Views are looked up by name. The Zope publisher always does a view lookup, "
"instead of traversing, if the name to be traversed is prefixed with ``@@``."
msgstr ""

#: ../../views/browserviews.rst:75
msgid "Views are resolved with three inputs:"
msgstr ""

#: ../../views/browserviews.rst:80
msgid "*context*"
msgstr ""

#: ../../views/browserviews.rst:78
msgid ""
"Any class/interface for which the view applies. If not given, "
"``zope.interface.Interface`` is used (corresponds to a registration "
"``for=\"*\"``). Usually this is a content item instance."
msgstr ""

#: ../../views/browserviews.rst:84
msgid "*request*"
msgstr ""

#: ../../views/browserviews.rst:83
msgid ""
"The current HTTP request. Interface "
"``zope.publisher.interfaces.browser.IBrowserRequest`` is used."
msgstr ""

#: ../../views/browserviews.rst:88
msgid "*layer*"
msgstr ""

#: ../../views/browserviews.rst:87
msgid ""
"Theme layer and addon layer interface. If not given, "
"``zope.publisher.interfaces.browser.IDefaultBrowserLayer`` is used."
msgstr ""

#: ../../views/browserviews.rst:90
msgid ""
"Views return HTTP request payload as the output. Returned strings are turned"
" to HTML page responses."
msgstr ""

#: ../../views/browserviews.rst:93
msgid ""
"Views can be any Python class taking in (context, request) construction "
"parameters. Minimal view would be::"
msgstr ""

#: ../../views/browserviews.rst:104
msgid "However, in the most of cases"
msgstr ""

#: ../../views/browserviews.rst:106
msgid ""
"Full Plone page views are subclass of `Products.Five.browser.BrowserView "
"<https://github.com/zopefoundation/Zope/blob/master/src/Products/Five/browser/__init__.py#L23>`_"
" which is a wrapper class. It wraps `zope.publisher.browser.BrowserView "
"<https://github.com/zopefoundation/zope.publisher/blob/master/src/zope/publisher/browser.py#L896>`_"
" and adds an acquisition (parent traversal) support for it."
msgstr ""

#: ../../views/browserviews.rst:110
msgid ""
"Views have ``index`` attribute which points to :doc:`TAL page template "
"</templates_css_and_javascripts/template_basics>` responsible rendering the "
"HTML code. You get the HTML output by doing self.index() and page template "
"gets a context argument ``view`` pointing to the view class instance. "
"``index`` value is usually instance of "
"`Products.Five.browser.pagetemplate.ViewPageTemplateFile "
"<https://github.com/zopefoundation/Zope/blob/master/src/Products/Five/browser/pagetemplatefile.py#L33>`_"
" (full Plone pages) or `zope.pagetemplate.pagetemplatefile.PageTemplateFile "
"<https://github.com/zopefoundation/zope.pagetemplate/blob/master/src/zope/pagetemplate/pagetemplatefile.py#L40>`_"
" (HTML snippets, no acquisition)"
msgstr ""

#: ../../views/browserviews.rst:117
msgid ""
"View classes should implement :doc:`interface </components/interface>` "
"`zope.browser.interfaces.IBrowserView "
"<https://github.com/zopefoundation/zope.browser/blob/master/src/zope/browser/interfaces.py#L27>`_"
msgstr ""

#: ../../views/browserviews.rst:120
msgid ""
"Views rendering page snippets and parts can be subclasses of "
"zope.publisher.browser.BrowserView directly as snippets might not need "
"acquisition support which adds some overhead to the rendering process."
msgstr ""

#: ../../views/browserviews.rst:124
msgid "Customizing views"
msgstr ""

#: ../../views/browserviews.rst:126
msgid ""
"To customize existing Plone core or add-on views you have different options."
msgstr ""

#: ../../views/browserviews.rst:128
msgid ""
"Usually you can simply override the related page template file (``.pt``)."
msgstr ""

#: ../../views/browserviews.rst:130
msgid ""
"Sometimes you need to change the related Python view class code also. In "
"this case, you override the Python class by using your own add-on which "
"installs a view class replacement using add-on layer."
msgstr ""

#: ../../views/browserviews.rst:135
msgid "Overriding view template"
msgstr ""

#: ../../views/browserviews.rst:137
msgid ""
"Follow instructions how to :doc:`use z3c.jbot "
"</templates_css_and_javascripts/template_basics>` to override templates."
msgstr ""

#: ../../views/browserviews.rst:141
msgid "Overriding view class"
msgstr ""

#: ../../views/browserviews.rst:143
msgid ""
"Here is a short introduction on finding how existing views are defined."
msgstr ""

#: ../../views/browserviews.rst:145
msgid ""
"First, you go to ``portal_types`` to see what views have been registered for"
" a particular content type."
msgstr ""

#: ../../views/browserviews.rst:148
msgid ""
"For example, if you want to override the *Tabular* view of a *Folder*, you "
"find out that it is registered as the handler for ``/folder_tabular_view``."
msgstr ""

#: ../../views/browserviews.rst:152
msgid ""
"So you look for both ``folder_tabular_view`` old-style page templates and "
"``@@folder_tabular_view`` BrowserView ZCML registrations in the Plone source"
" tree |---| it can be either."
msgstr ""

#: ../../views/browserviews.rst:156
msgid ""
"Example of how to search for this using UNIX tools (assuming that "
"`collective.recipe.omelette`_ is in use, to keep included code together):"
msgstr ""

#: ../../views/browserviews.rst:166
msgid ""
"The ``folder_tabular_view`` is found in the :doc:`skin layer "
"</templates_css_and_javascripts/skin_layers>` called ``plone_content`` in "
"the CMFPlone product."
msgstr ""

#: ../../views/browserviews.rst:170 ../../views/browserviews.rst:368
#: ../../views/browserviews.rst:983
msgid "More info:"
msgstr ""

#: ../../views/browserviews.rst:172
msgid ""
":doc:`How to override old style page templates "
"</templates_css_and_javascripts/skin_layers>`"
msgstr ""

#: ../../views/browserviews.rst:175
msgid "Creating and registering a view"
msgstr ""

#: ../../views/browserviews.rst:177
msgid "This shows how to create and register view in a Zope 3 manner."
msgstr ""

#: ../../views/browserviews.rst:180
msgid "Creating a view using Grok"
msgstr ""

#: ../../views/browserviews.rst:182
msgid "This is the simplest method and recommended for Plone 4.1+ onwards."
msgstr ""

#: ../../views/browserviews.rst:184
msgid ""
"First, create your add-on product using :doc:`Dexterity project template "
"</getstarted/paste>`. The most important thing in the add-on is that your "
"registers itself to :doc:`grok </components/grok>` which allows Plone to "
"scan all Python files for ``grok()`` directives and furter automatically "
"pick up your views (as opposite using old Zope 3 method where you manually "
"register views by typing them in to ZCML in ZCML)."
msgstr ""

#: ../../views/browserviews.rst:192
msgid "configure.zcml"
msgstr ""

#: ../../views/browserviews.rst:194
msgid ""
"First make sure the file ``configure.zcml`` in your add-on root folder "
"contains the following lines. These lines are needed only once, in the root "
"configuration ZCML file::"
msgstr ""

#: ../../views/browserviews.rst:216
msgid "setup.py and buildout"
msgstr ""

#: ../../views/browserviews.rst:218
msgid ""
"Either you need to have ``five.grok`` `registered in your buildout "
"<http://plone.org/documentation/kb/installing-add-ons-quick-how-to>`_ or "
"have :doc:`five.grok in your setup.py </components/grok>`. If you didn't add"
" it in this point and run buildout again to download and install "
"``five.grok`` package."
msgstr ""

#: ../../views/browserviews.rst:224
msgid "Python logic code"
msgstr ""

#: ../../views/browserviews.rst:226
msgid "Add the file ``yourcompany.app/yourcompany/app/browser/views.py``::"
msgstr ""

#: ../../views/browserviews.rst:246
msgid ""
"The view in question is not registered against any :doc:`layer "
"</views/layers>`, so it is immediately available after restart without need "
"to run :doc:`Add/remove in Site setup </components/genericsetup>`."
msgstr ""

#: ../../views/browserviews.rst:250
msgid ""
"The ``grok.context(Interface)`` statement makes the view available for every"
" content item and the site root: you can use it in URLs like "
"``http://yoursite/news/newsitem/@@yourviewname`` or "
"``http://yoursite/news/@@yourviewname``. In the first case, the incoming "
"``self.context`` parameter received by the view would be the ``newsitem`` "
"object, and in the second case, it would be the ``news`` container."
msgstr ""

#: ../../views/browserviews.rst:257
msgid ""
"Alternatively, you could use the :doc:`content interface </content/types>` "
"docs to make the view available only for certain content types. Example "
"``grok.context()`` directives could be::"
msgstr ""

#: ../../views/browserviews.rst:278
msgid "Page template"
msgstr ""

#: ../../views/browserviews.rst:280
msgid ""
"Then create a :doc:`page template for your view. "
"</templates_css_and_javascripts/template_basics>`. Create "
"``yourcompany.app/yourcompany/app/browser/templates`` and add the related "
"template:"
msgstr ""

#: ../../views/browserviews.rst:298
msgid ""
"Now when you restart to Plone (or use :doc:`auto-restart add-on "
"</getstarted/index>`) the view should be available through your browser. "
"After enabled, grok will scan all Python files for available files, so it "
"doesn't matter what .py filename you use."
msgstr ""

#: ../../views/browserviews.rst:304
msgid "Content slots"
msgstr ""

#: ../../views/browserviews.rst:306
msgid ""
"Available :doc:`slot </templates_css_and_javascripts/template_basics>` "
"options you can use for ``<metal fill-slot=\"\">`` in your template which "
"inherits from ``<html metal:use-"
"macro=\"context/main_template/macros/master\">``:"
msgstr ""

#: ../../views/browserviews.rst:311
msgid "``content``"
msgstr ""

#: ../../views/browserviews.rst:311
msgid "render edit border yourself"
msgstr ""

#: ../../views/browserviews.rst:314
msgid "``main``"
msgstr ""

#: ../../views/browserviews.rst:314
msgid ""
"overrides main slot in main template; you must render title and description "
"yourself"
msgstr ""

#: ../../views/browserviews.rst:317
msgid "``content-title``"
msgstr ""

#: ../../views/browserviews.rst:317
msgid "title and description prerendered, Plone version > 4.x"
msgstr ""

#: ../../views/browserviews.rst:320
msgid "``content-core``"
msgstr ""

#: ../../views/browserviews.rst:320
msgid "content body specific to your view, Plone version > 4.x"
msgstr ""

#: ../../views/browserviews.rst:325
msgid "``header``"
msgstr ""

#: ../../views/browserviews.rst:323
msgid ""
"A slot for inserting content above the title; may be useful in conjunction "
"with content-core slot if you wish to use the stock content-title provided "
"by the main template."
msgstr ""

#: ../../views/browserviews.rst:328
msgid "Accessing your newly created view"
msgstr ""

#: ../../views/browserviews.rst:330
msgid "Now you can access your view within the news folder::"
msgstr ""

#: ../../views/browserviews.rst:334
msgid "... or on a site root::"
msgstr ""

#: ../../views/browserviews.rst:338
msgid "... or on any other content item."
msgstr ""

#: ../../views/browserviews.rst:340
msgid ""
"You can also use the ``@@`` notation at the front of the view name to make "
"sure that you are looking up a *view*, and not a content item that happens "
"to have the same id as a view::"
msgstr ""

#: ../../views/browserviews.rst:346 ../../views/viewlets.rst:43
#: ../../views/viewlets.rst:153 ../../views/viewlets.rst:186
#: ../../views/viewlets.rst:305
msgid "More info"
msgstr ""

#: ../../views/browserviews.rst:348 ../../views/browserviews.rst:370
msgid ""
"http://plone.org/products/dexterity/documentation/manual/five.grok/browser-"
"components/views"
msgstr ""

#: ../../views/browserviews.rst:353
msgid "Setting view permissions"
msgstr ""

#: ../../views/browserviews.rst:355
msgid ""
"Use `grok.require "
"<http://grok.zope.org/doc/current/reference/directives.html#grok-require>`_"
msgstr ""

#: ../../views/browserviews.rst:357 ../../views/browserviews.rst:375
#: ../../views/browserviews.rst:855 ../../views/browserviews.rst:877
#: ../../views/layers.rst:213 ../../views/layers.rst:334
#: ../../views/layers.rst:349
msgid "Example::"
msgstr ""

#: ../../views/browserviews.rst:366
msgid ""
"Use :doc:`available permissions in Zope 3 style strings "
"</security/permission_lists>`."
msgstr ""

#: ../../views/browserviews.rst:373
msgid "Creating a view using ZCML"
msgstr ""

#: ../../views/browserviews.rst:400
msgid ""
"Do not attempt to run any code in the ``__init__()`` method of a view.  If "
"this code fails and an exception is raised, the ``zope.component`` machinery"
" remaps this to a \"View not found\" exception or traversal error."
msgstr ""

#: ../../views/browserviews.rst:405
msgid ""
"Instead, use a pattern where you have a ``setup()`` or similar method which "
"``__call__()`` or view users can explicitly call."
msgstr ""

#: ../../views/browserviews.rst:409
msgid "Registering a view"
msgstr ""

#: ../../views/browserviews.rst:411
msgid ""
"Zope 3 views are registered in :term:`ZCML`, an XML-based configuration "
"language.  Usually, the configuration file, where the registration done, is "
"called ``yourapp.package/yourapp/package/browser/configure.zcml``."
msgstr ""

#: ../../views/browserviews.rst:415
msgid "The following example registers a new view (see below for comments):"
msgstr ""

#: ../../views/browserviews.rst:437
msgid "``for``"
msgstr ""

#: ../../views/browserviews.rst:434
msgid ""
"specifies which content types receive this view. ``for=\"*\"`` means that "
"this view can be used for any content type. This is the same as registering "
"views to the ``zope.interface.Interface`` base class."
msgstr ""

#: ../../views/browserviews.rst:443
msgid "``name``"
msgstr ""

#: ../../views/browserviews.rst:440
msgid ""
"is the name by which the view is exposed to traversal and "
"``getMultiAdapter()`` look-ups. If your view's name is ``test``, then you "
"can render it in the browser by calling http://yourhost/site/page/@@test"
msgstr ""

#: ../../views/browserviews.rst:452
msgid "``permission``"
msgstr ""

#: ../../views/browserviews.rst:446
msgid ""
"is the permission needed to access the view. When an HTTP request comes in, "
"the currently logged in user's access rights in the current context are "
"checked against this permission. See :doc:`Security chapter "
"</security/permission_lists>` for Plone's out-of-the-box permissions. "
"Usually you want have ``zope2.View``, ``cmf.ModifyPortalContent``, "
"``cmf.ManagePortal`` or ``zope2.Public`` here."
msgstr ""

#: ../../views/browserviews.rst:457
msgid "``class``"
msgstr ""

#: ../../views/browserviews.rst:455
msgid ""
"is a Python dotted name for a class based on ``BrowserView``, which is "
"responsible for managing the view. The Class's ``__call__()`` method is the "
"entry point for view processing and rendering."
msgstr ""

#: ../../views/browserviews.rst:459
msgid ""
"You need to declare the ``browser`` namespace in your ``configure.zcml`` to "
"use ``browser`` configuration directives."
msgstr ""

#: ../../views/browserviews.rst:463
msgid "Relationship between views and templates"
msgstr ""

#: ../../views/browserviews.rst:465
msgid ""
"The ZCML ``<browser:view template=\"\">`` directive will set the ``index`` "
"class attribute."
msgstr ""

#: ../../views/browserviews.rst:468
msgid ""
"The default view's ``__call__()`` method will return the value returned by a"
" call to ``self.index()``."
msgstr ""

#: ../../views/browserviews.rst:471
msgid "Example: this ZCML configuration:"
msgstr ""

#: ../../views/browserviews.rst:482 ../../views/browserviews.rst:500
msgid "and this Python code::"
msgstr ""

#: ../../views/browserviews.rst:490
msgid "is equal to this ZCML configuration::"
msgstr ""

#: ../../views/browserviews.rst:505
msgid "Rendering of the view is done as follows::"
msgstr ""

#: ../../views/browserviews.rst:521
msgid "Overriding a view template at run-time"
msgstr ""

#: ../../views/browserviews.rst:523
msgid ""
"Below is a sample code snippet which allows you to override an already "
"constructed ``ViewPageTemplateFile`` with a chosen file at run-time::"
msgstr ""

#: ../../views/browserviews.rst:542
msgid "Several templates per view"
msgstr ""

#: ../../views/browserviews.rst:544
msgid ""
"You can bind several templates to one view and render them individually. "
"This is very useful for reusable templating, or when you subclass your "
"functional views."
msgstr ""

#: ../../views/browserviews.rst:548
msgid "Example using `five.grok`_::"
msgstr ""

#: ../../views/browserviews.rst:558
msgid "And then call in the template:"
msgstr ""

#: ../../views/browserviews.rst:567
msgid "View ``__init__()`` method special cases"
msgstr ""

#: ../../views/browserviews.rst:569
msgid ""
"The Python constructor method of the view, ``__init__()``, is special. You "
"should never try to put your code there. Instead, use helper method or lazy "
"construction design pattern if you need to set-up view variables."
msgstr ""

#: ../../views/browserviews.rst:573
msgid ""
"The ``__init__()`` method of the view might not have an :doc:`acquisition "
"chain </serving/traversing>` available, meaning that it does not know the "
"parent or hierarchy where the view is. This information is set after the "
"constructor have been run. All Plone code which relies on acquisition chain,"
" which means almost all Plone helper code, does not work in ``__init__()``. "
"Thus, the called Plone API methods return ``None`` or tend to throw "
"exceptions."
msgstr ""

#: ../../views/browserviews.rst:583 ../../views/layers.rst:3
msgid "Layers"
msgstr ""

#: ../../views/browserviews.rst:585
msgid ""
"Views can be registered against a specific *layer* interface. This means "
"that views are only looked up if the specified layer is in use. Since one "
"Zope application server can contain multiple Plone sites, layers are used to"
" determine which Python code is in effect for a given Plone site."
msgstr ""

#: ../../views/browserviews.rst:590
msgid "A layer is in use when:"
msgstr ""

#: ../../views/browserviews.rst:592
msgid "a theme which defines that layer is active, or"
msgstr ""

#: ../../views/browserviews.rst:593
msgid "if a specific add-on product which defines that layer is installed."
msgstr ""

#: ../../views/browserviews.rst:595
msgid ""
"You should normally register your views against a certain layer in your own "
"code."
msgstr ""

#: ../../views/browserviews.rst:598
msgid "For more information, see"
msgstr ""

#: ../../views/browserviews.rst:600
msgid ":doc:`browser layers </views/layers>`"
msgstr ""

#: ../../views/browserviews.rst:603
msgid ""
"Register and unregister view directly using zope.component architecture"
msgstr ""

#: ../../views/browserviews.rst:605
msgid "Example how to register::"
msgstr ""

#: ../../views/browserviews.rst:622
msgid "Example how to unregister::"
msgstr ""

#: ../../views/browserviews.rst:633
msgid "Content type, mimetype and Template start tag"
msgstr ""

#: ../../views/browserviews.rst:635
msgid "If you need to produce non-(X)HTML output, here are some resources:"
msgstr ""

#: ../../views/browserviews.rst:637
msgid ""
"http://plone.293351.n2.nabble.com/Setting-a-mime-type-on-a-Zope-3-browser-"
"view-td4442770.html"
msgstr ""

#: ../../views/browserviews.rst:640
msgid "Zope ViewPageTemplateFile vs. Five ViewPageTemplateFile"
msgstr ""

#: ../../views/browserviews.rst:642
msgid ""
"There are two different classes that share the same ``ViewPageTemplateFile``"
" name."
msgstr ""

#: ../../views/browserviews.rst:645
msgid ""
"Zope  `BrowserView source code "
"<http://svn.zope.org/zope.publisher/trunk/src/zope/publisher/browser.py?rev=101538&view=auto>`_."
msgstr ""

#: ../../views/browserviews.rst:647
msgid ""
"`Five version  "
"<http://svn.zope.org/Zope/trunk/src/Products/Five/browser/__init__.py?rev=96262&view=markup>`_."
" `Products.Five`_ is a way to access some Zope 3 technologies from the Zope "
"2 codebase, which is used by Plone."
msgstr ""

#: ../../views/browserviews.rst:651
msgid "Difference in code::"
msgstr ""

#: ../../views/browserviews.rst:655
msgid "vs.::"
msgstr ""

#: ../../views/browserviews.rst:660
msgid "The difference is that the *Five* version supports:"
msgstr ""

#: ../../views/browserviews.rst:662
msgid "Acquisition."
msgstr ""

#: ../../views/browserviews.rst:663
msgid "The ``provider:`` TAL expression."
msgstr ""

#: ../../views/browserviews.rst:664
msgid "Other Plone-specific TAL expression functions like ``test()``."
msgstr ""

#: ../../views/browserviews.rst:665
msgid ""
"Usually, Plone code needs the Five version of ``ViewPageTemplateFile``."
msgstr ""

#: ../../views/browserviews.rst:666
msgid ""
"Some subsystems, notably the ``z3c.form`` package, expect the Zope 3 version"
" of ``ViewPageTemplateFile`` instances."
msgstr ""

#: ../../views/browserviews.rst:671
msgid "Overriding a view class in a product"
msgstr ""

#: ../../views/browserviews.rst:673
msgid ""
"Most of the code in this section is copied from a `tutorial by Martin Aspeli"
" (on slideshare.net) <http://www.slideshare.net/wooda/martin-aspeli-"
"extending-and-customising-plone-3>`_. The main change is that, at least for "
"Plone 4, the interface should subclass "
"``plone.theme.interfaces.IDefaultPloneLayer`` instead of "
"``zope.interface.Interface``."
msgstr ""

#: ../../views/browserviews.rst:680
msgid ""
"In this example we override the ``@@register`` form from the "
"``plone.app.users`` package, creating a custom form which subclasses the "
"original."
msgstr ""

#: ../../views/browserviews.rst:684
msgid "Create an interface in ``interfaces.py``::"
msgstr ""

#: ../../views/browserviews.rst:692
msgid "Then create ``profiles/default/browserlayer.xml``:"
msgstr ""

#: ../../views/browserviews.rst:703
msgid "Create ``browser/configure.zcml``:"
msgstr ""

#: ../../views/browserviews.rst:719
msgid "Create ``browser/customregistration.py``::"
msgstr ""

#: ../../views/browserviews.rst:728
msgid "Helper views"
msgstr ""

#: ../../views/browserviews.rst:730
msgid ""
"Not all views need to return HTML output, or output at all. Views can be "
"used as helpers in the code to provide APIs to objects. Since views can be "
"overridden using layers, a view is a natural plug-in point which an add-on "
"product can customize or override in a conflict-free manner."
msgstr ""

#: ../../views/browserviews.rst:735
msgid ""
"View methods are exposed to page templates and such, so you can also call "
"view methods directly from a page template, not only from Python code."
msgstr ""

#: ../../views/browserviews.rst:741
msgid ":doc:`Context helpers </misc/context>`"
msgstr ""

#: ../../views/browserviews.rst:743
msgid ":doc:`Expressions </functionality/expressions>`"
msgstr ""

#: ../../views/browserviews.rst:746
msgid "Historical perspective"
msgstr ""

#: ../../views/browserviews.rst:748
msgid ""
"Often, the point of using helper views is that you can have reusable "
"functionality which can be plugged in as one-line code around the system. "
"Helper views also get around the following limitations:"
msgstr ""

#: ../../views/browserviews.rst:752
msgid "TAL security."
msgstr ""

#: ../../views/browserviews.rst:753
msgid "Limiting Python expression to one line."
msgstr ""

#: ../../views/browserviews.rst:754
msgid "Not being able to import Python modules."
msgstr ""

#: ../../views/browserviews.rst:758
msgid ""
"Using ``RestrictedPython`` scripts (creating Python through the :term:`ZMI`)"
" and Zope 2 Extension modules is discouraged. The same functionality can be "
"achieved with helper views, with less potential pitfalls."
msgstr ""

#: ../../views/browserviews.rst:764
msgid "Reusing view template snippets or embedding another view"
msgstr ""

#: ../../views/browserviews.rst:766
msgid "To use the same template code several times you can either:"
msgstr ""

#: ../../views/browserviews.rst:768
msgid ""
"create a separate ``BrowserView`` for it and then call this view (see "
"`Accessing a view instance in code`_ below);"
msgstr ""

#: ../../views/browserviews.rst:771
msgid ""
"share a ``ViewPageTemplate`` instance between views and using it several "
"times."
msgstr ""

#: ../../views/browserviews.rst:776
msgid ""
"The Plone 2.x way of doing this with TAL template language macros is "
"discouraged as a way to provide reusable functionality in your add-on "
"product. This is because macros are hardwired to the TAL template language, "
"and referring to them outside templates is difficult."
msgstr ""

#: ../../views/browserviews.rst:782
msgid ""
"Also, if you ever need to change the template language, or mix in other "
"template languages, you can do it much more easily when templates are a "
"feature of a pure Python based view, and not vice versa."
msgstr ""

#: ../../views/browserviews.rst:786
msgid ""
"Here is an example of how to have a view snippet which can be used by "
"subclasses of a base view class. Subclasses can refer to this template at "
"any point of the view rendering, making it possible for subclasses to have "
"fine-tuned control over how the template snippet is represented."
msgstr ""

#: ../../views/browserviews.rst:792
msgid "Related Python code::"
msgstr ""

#: ../../views/browserviews.rst:814
msgid ""
"Then you can render the summary template in the main template associated "
"with ``ProductCardView`` by calling the ``renderSummary()`` method and TAL "
"non-escaping HTML embedding."
msgstr ""

#: ../../views/browserviews.rst:828
msgid ""
"The ``summarybox.pt`` itself is just a piece of HTML code without the Plone "
"decoration frame (``main_template/master`` etc. macros).  Make sure that you"
" declare the ``i18n:domain`` again, or the strings in this template will not"
" be translated."
msgstr ""

#: ../../views/browserviews.rst:840
msgid "Accessing a view instance in code"
msgstr ""

#: ../../views/browserviews.rst:842
msgid "You need to get access to the view in your code if you are:"
msgstr ""

#: ../../views/browserviews.rst:844
msgid "calling a view from inside another view, or"
msgstr ""

#: ../../views/browserviews.rst:845
msgid "calling a view from your unit test code."
msgstr ""

#: ../../views/browserviews.rst:847
msgid "Below are two different approaches for that."
msgstr ""

#: ../../views/browserviews.rst:851
msgid "By using ``getMultiAdapter()``"
msgstr ""

#: ../../views/browserviews.rst:853
msgid "This is the most efficient way in Python."
msgstr ""

#: ../../views/browserviews.rst:871
msgid "By using traversal"
msgstr ""

#: ../../views/browserviews.rst:873
msgid ""
"Traversal is slower than directly calling ``getMultiAdapter()``.  However, "
"traversal is readily available in templates and ``RestrictedPython`` "
"modules."
msgstr ""

#: ../../views/browserviews.rst:895
msgid ""
"You can also do direct view look-ups and method calls in your template by "
"using the ``@@``-notation in traversing."
msgstr ""

#: ../../views/browserviews.rst:906
msgid "Use a skin-based template in a Five view"
msgstr ""

#: ../../views/browserviews.rst:908
msgid "Use ``aq_acquire(object, template_name)``."
msgstr ""

#: ../../views/browserviews.rst:910
msgid ""
"Example: Get an object by its path and render it using its default template "
"in the current context."
msgstr ""

#: ../../views/browserviews.rst:934
msgid "Listing available views"
msgstr ""

#: ../../views/browserviews.rst:936
msgid "This is useful for debugging purposes::"
msgstr ""

#: ../../views/browserviews.rst:945
msgid "Listing all views of certain type"
msgstr ""

#: ../../views/browserviews.rst:947
msgid "How to filter out views which provide a certain interface::"
msgstr ""

#: ../../views/browserviews.rst:960
msgid "Default view of a content item"
msgstr ""

#: ../../views/browserviews.rst:962
msgid "Objects have views for default, view, edit, and so on."
msgstr ""

#: ../../views/browserviews.rst:964
msgid ""
"The distinction between the *default* and *view* views are that for files, "
"the default can be *download*."
msgstr ""

#: ../../views/browserviews.rst:967
msgid "The default view ..."
msgstr ""

#: ../../views/browserviews.rst:969
msgid "This view is configured in :doc:`portal_types </content/types>`."
msgstr ""

#: ../../views/browserviews.rst:971
msgid ""
"This view is rendered when a content item is called |---| even though they "
"are objects, they have the ``__call__()`` Python method defined."
msgstr ""

#: ../../views/browserviews.rst:975
msgid ""
"If you need to get a content item's view for page rendering explicitly, you "
"can do it as follows::"
msgstr ""

#: ../../views/browserviews.rst:985
msgid ":doc:`Context helpers and utilities </misc/context>`"
msgstr ""

#: ../../views/browserviews.rst:987
msgid ""
"http://plone.293351.n2.nabble.com/URL-to-content-view-tp6028204p6028204.html"
msgstr ""

#: ../../views/browserviews.rst:991
msgid "Allowing the contentmenu on non-default views"
msgstr ""

#: ../../views/browserviews.rst:993
msgid ""
"In general, the contentmenu (where the actions, display views, factory "
"types, workflow, and other dropdowns are) is not shown on non-default views."
" There are some exceptions, though."
msgstr ""

#: ../../views/browserviews.rst:997
msgid ""
"If you want to display the contentmenu in such non-default views, you have "
"to mark them with the IViewView interface from plone.app.layout either by "
"letting the class provide IViewView by declaring it with "
"zope.component.implements or by configuring it via ZCML like so::"
msgstr ""

#: ../../views/browserviews.rst:1008
msgid "Views and automatic member variable acquisition wrapping"
msgstr ""

#: ../../views/browserviews.rst:1010
msgid ""
"View class instances will automatically assign themselves as a parent for "
"all member variables. This is because ``five`` package based views inherit "
"from ``Acquisition.Implicit`` base class."
msgstr ""

#: ../../views/browserviews.rst:1013
msgid "E.g. you have a ``Basket`` content item with ``absolute_url()`` of::"
msgstr ""

#: ../../views/browserviews.rst:1017
msgid ""
"Then if you use this object in a view code's member variable assignment in "
"e.g. ``Viewlet.update() method``::"
msgstr ""

#: ../../views/browserviews.rst:1021
msgid "... this will mess up the Basket content item's acquisition chain::"
msgstr ""

#: ../../views/browserviews.rst:1025
msgid ""
"This concerns views, viewlets and portlet renderers. It will, for example, "
"make the following code to fail::"
msgstr ""

#: ../../views/browserviews.rst:1030
msgid ""
"One workaround to avoid this mess is to use aq_inner when accessing self.obj"
" values:"
msgstr ""

#: ../../views/browserviews.rst:1032
msgid "http://stackoverflow.com/a/11755348/315168"
msgstr ""

#: ../../views/index.rst:3
msgid "Views, viewlets and layers"
msgstr ""

#: ../../views/index.rst:5
msgid "View and viewlet patterns used to create dynamic pages in plone."
msgstr ""

#: ../../views/layers.rst:7
msgid ""
"Layers allow you to easily enable and disable views and other site "
"functionality based on installed add-ons and themes."
msgstr ""

#: ../../views/layers.rst:15
msgid ""
"Layers allow you to activate different code paths and modules depending on "
"the external configuration."
msgstr ""

#: ../../views/layers.rst:18
msgid "Examples:"
msgstr ""

#: ../../views/layers.rst:20
msgid ""
"Code belonging to a theme is only active when that theme has been selected."
msgstr ""

#: ../../views/layers.rst:22
msgid ""
"Mobile browsing code is only active when the site is being browsed on a "
"mobile phone."
msgstr ""

#: ../../views/layers.rst:25
msgid ""
"Layers are marker interfaces applied to the HTTPRequest_ object. They are "
"usually used in conjunction with :term:`ZCML` directives to dynamically "
"activate various parts of the configuration (theme files, add-on product "
"functionality)."
msgstr ""

#: ../../views/layers.rst:30
msgid ""
"Layers ensure that only one add-on product can override the specific Plone "
"instance functionality in your site at a time, while still allowing you to "
"have possibly conflicting add-on products in your buildout and ZCML. "
"Remember that multiple Plone site instances can share the same ZCML and code"
" files."
msgstr ""

#: ../../views/layers.rst:36
msgid ""
"Many ZCML directives take the optional ``layer`` parameter. See example, "
"resourceDirectory_"
msgstr ""

#: ../../views/layers.rst:39
msgid ""
"Layers can be activated when an add-on product is installed or a certain "
"theme is picked."
msgstr ""

#: ../../views/layers.rst:42
msgid "For more information, read"
msgstr ""

#: ../../views/layers.rst:44
msgid ""
"`Making components theme specific <http://plone.org/documentation/manual"
"/theme-reference/buildingblocks/components/themespecific>`_"
msgstr ""

#: ../../views/layers.rst:46
msgid ""
"`Browser Layer tutorial <http://plone.org/documentation/tutorial"
"/customization-for-developers/browser-layers>`_."
msgstr ""

#: ../../views/layers.rst:48
msgid ""
"`Zope 3 Developer Handbook, Skinning <http://zope3.xmu.me/skinning.html>`_"
msgstr ""

#: ../../views/layers.rst:51
msgid "Using layers"
msgstr ""

#: ../../views/layers.rst:53
msgid ""
"Some ZCML directives (for example: `browser:page "
"<http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_browser/page/index.html>`_)"
" take a ``layer`` attribute."
msgstr ""

#: ../../views/layers.rst:57
msgid "If you have:"
msgstr ""

#: ../../views/layers.rst:60
msgid ""
"# ``plonetheme.yourthemename.interfaces.IThemeSpecific`` layer defined in"
msgstr ""

#: ../../views/layers.rst:60
msgid "Python code"
msgstr ""

#: ../../views/layers.rst:63
msgid ""
"# ``YourTheme`` product installed through add-on product installer on your"
msgstr ""

#: ../../views/layers.rst:63
msgid "site instance"
msgstr ""

#: ../../views/layers.rst:65
msgid ""
"then views and viewlets from your product can be enabled on the site "
"instance using the following ZCML::"
msgstr ""

#: ../../views/layers.rst:78
msgid "Unconditional overrides"
msgstr ""

#: ../../views/layers.rst:80
msgid ""
"If you want to override a view or a viewlet unconditionally for all sites "
"without the add-on product installer support you need to use "
"``overrides.zcml``."
msgstr ""

#: ../../views/layers.rst:85
msgid "Creating a layer"
msgstr ""

#: ../../views/layers.rst:88
msgid "Theme layer"
msgstr ""

#: ../../views/layers.rst:90
msgid "Theme layers can be created via the following steps:"
msgstr ""

#: ../../views/layers.rst:92
msgid "Subclass an interface from ``IDefaultPloneLayer``::"
msgstr ""

#: ../../views/layers.rst:104
msgid "Register it in ZCML. The name must match the theme name."
msgstr ""

#: ../../views/layers.rst:114
msgid ""
"Register and set your theme as the default theme in "
"``profiles/default/skins.xml``. Theme layers require that they are set as "
"the default theme and not just activated on your Plone site. Example:"
msgstr ""

#: ../../views/layers.rst:131
msgid "Add-on layer"
msgstr ""

#: ../../views/layers.rst:133
msgid ""
"An add-on product layer is enabled when an add-on product is installed. "
"Since one Zope application server may contain several Plone sites, you need "
"to keep enabled code paths separate by using add-on layers - otherwise all "
"views and viewlets apply to all sites in one Zope application server."
msgstr ""

#: ../../views/layers.rst:138
msgid "You can enable views and viewlets specific to functional add-ons."
msgstr ""

#: ../../views/layers.rst:140
msgid ""
"Unlike theme layers, add-on layers depend on the activated add-on products, "
"not on the selected theme."
msgstr ""

#: ../../views/layers.rst:143
msgid ""
"An add-on layer is a marker interface which is applied on the :doc:`HTTP "
"request object </serving/http_request_and_response>` by Plone core logic."
msgstr ""

#: ../../views/layers.rst:147
msgid ""
"First create an :doc:`interface </components/interfaces>` for your layer in "
"``your.product.interfaces.py``::"
msgstr ""

#: ../../views/layers.rst:164
msgid ""
"You then need to refer to this in the ``profile/default/browserlayer.xml`` "
"file of your add-on installer :doc:`setup profile "
"</components/genericsetup>`:"
msgstr ""

#: ../../views/layers.rst:179
msgid ""
"The add-on layer registry is persistent and stored in the database. The "
"changes to add-on layers are applied only when add-ons are installed or "
"uninstalled."
msgstr ""

#: ../../views/layers.rst:185
msgid "http://pypi.python.org/pypi/plone.browserlayer"
msgstr ""

#: ../../views/layers.rst:187
msgid ""
"See example in `LinguaPlone "
"<https://github.com/plone/Products.LinguaPlone/tree/master/Products/LinguaPlone/profiles/default/browserlayer.xml>`_."
msgstr ""

#: ../../views/layers.rst:190
msgid "Using layers (for customization)"
msgstr ""

#: ../../views/layers.rst:192
msgid ""
"The whole point of using layers is to enable someone else to override your "
":term:`ZCA` registrations (for example, to override a view). By subclassing "
"a marker interface for some marker you can define a more specific adapter "
"which will take precedence over the primary adapter."
msgstr ""

#: ../../views/layers.rst:198
msgid "Manual layers"
msgstr ""

#: ../../views/layers.rst:200
msgid ""
"Apply your layer to the HTTPRequest_ in the ``before_traverse`` hook or "
"before you call the code which looks up the interfaces."
msgstr ""

#: ../../views/layers.rst:203
msgid ""
"Choosing skin layer dynamically 1: http://blog.fourdigits.nl/changing-your-"
"plone-theme-skin-based-on-the-objects-portal_type"
msgstr ""

#: ../../views/layers.rst:205
msgid ""
"Choosing skin layer dynamically 2: "
"http://code.google.com/p/plonegomobile/source/browse/trunk/gomobile/gomobile.mobile/gomobile/mobile/monkeypatch.py"
msgstr ""

#: ../../views/layers.rst:207
msgid ""
"See the `plone.app.z3cform.z2 "
"<http://svn.zope.org/plone.z3cform/trunk/plone/z3cform/z2.py?rev=88331&view=markup>`_"
" module."
msgstr ""

#: ../../views/layers.rst:209
msgid ""
"In the example below we turn on a layer for the request which is later "
"checked by the rendering code. This way some pages can ask for special "
"View/Viewlet rendering."
msgstr ""

#: ../../views/layers.rst:244
msgid "Problem with ``IDefaultBrowserLayer``"
msgstr ""

#: ../../views/layers.rst:246
msgid ""
"``zope.publisher.interfaces.browser.IDefaultBrowserLayer`` is a problematic "
"layer, because it takes precedence in the HTTP request multi-adapter look up"
" (due to magic involving Plone themes)."
msgstr ""

#: ../../views/layers.rst:250
msgid ""
"Below is a dump of ``self.request.__provides__.__iro__`` for adding an extra"
" form layer::"
msgstr ""

#: ../../views/layers.rst:261
msgid ""
"One would assume that the custom form layer (``IExperCashFormLayer``) is "
"used and that it would take priority over the more generic "
"``IPloneFormLayer``. However, due to the involvement of "
"``IDefaultBrowserLayer`` when registering items using ``<browser:page "
"for=\"*\">`` syntax, it does not."
msgstr ""

#: ../../views/layers.rst:267
msgid ""
"The fix is to make your custom layer to subclass ``IDefaultBrowserLayer``, "
"as follows::"
msgstr ""

#: ../../views/layers.rst:278
msgid "We register a custom macro as follows:"
msgstr ""

#: ../../views/layers.rst:293
msgid "Now, manual assignment works OK::"
msgstr ""

#: ../../views/layers.rst:305
msgid ""
"(If this didn't make sense for you, don't worry. It doesn't make sense for "
"me either.)"
msgstr ""

#: ../../views/layers.rst:0
msgid "Todo"
msgstr ""

#: ../../views/layers.rst:308
msgid "This is not helpful."
msgstr ""

#: ../../views/layers.rst:311
msgid "Troubleshooting instructions for layers"
msgstr ""

#: ../../views/layers.rst:313
msgid ""
"Check that your view or whatever is working without a layer assigned "
"(globally);"
msgstr ""

#: ../../views/layers.rst:316
msgid ""
"Check that ``configure.zcml`` has a layer entry. Put some garbage to trigger"
" a syntax error in ``configure.zcml`` to make sure that it is being loaded;"
msgstr ""

#: ../../views/layers.rst:320
msgid ""
"Add-on layer: check that ``profiles/default/browserlayer.xml`` has a "
"matching entry with a matching name;"
msgstr ""

#: ../../views/layers.rst:323
msgid ""
"Theme layer: if it's a theme layer, check that there is a matching "
"``skins.xml`` entry"
msgstr ""

#: ../../views/layers.rst:326
msgid "Check that layer name is correctly spelt in the view declaration."
msgstr ""

#: ../../views/layers.rst:329
msgid "Checking active layers"
msgstr ""

#: ../../views/layers.rst:332
msgid "Layers are activated on the current request object"
msgstr ""

#: ../../views/layers.rst:341
msgid "Active themes and add-on products"
msgstr ""

#: ../../views/layers.rst:343
msgid ""
"The ``registered_layers()`` method returns a list of all layers active on "
"the site. Note that this is different to the list of layers which are "
"applied on the current HTTP request object: the request object may contain "
"manually activated layers."
msgstr ""

#: ../../views/layers.rst:362
msgid "Getting active theme layer"
msgstr ""

#: ../../views/layers.rst:364
msgid "Only one theme layer can be active at once."
msgstr ""

#: ../../views/layers.rst:366
msgid ""
"The active theme name is defined in ``portal_skins`` properties. This name "
"can be resolved to a theme layer."
msgstr ""

#: ../../views/layers.rst:370
msgid "Debugging active layers"
msgstr ""

#: ../../views/layers.rst:372
msgid ""
"You can check the activated layers from HTTP request object by looking at "
"``self.request.__provides__.__iro__``. Layers are evaluated from zero index "
"(highest priority) the last index (lowest priority)."
msgstr ""

#: ../../views/layers.rst:383
msgid "Testing Layers"
msgstr ""

#: ../../views/layers.rst:385
msgid ""
"Plone testing tool kits won't register layers for you, you have to do it "
"yourself somewhere in the boilerplate code::"
msgstr ""

#: ../../views/more_view_examples.rst:3
msgid "Tutorial: Overriding Viewlets"
msgstr ""

#: ../../views/more_view_examples.rst:5
msgid ""
"This tutorial [1]_ describes two simple examples of overriding viewlets. To "
"learn more about views and viewlets, see the Developer Manual section on "
"`Views and Viewlets`_"
msgstr ""

#: ../../views/more_view_examples.rst:9
msgid "Overriding the Logo"
msgstr ""

#: ../../views/more_view_examples.rst:11
msgid ""
"In this example, we override the logo for the site. I assume you have a "
"theme product named my.theme with an IThemeSpecific interface."
msgstr ""

#: ../../views/more_view_examples.rst:13
msgid ""
"Create an entry in browser/configure.zcml of your theme to override the "
"viewlet.::"
msgstr ""

#: ../../views/more_view_examples.rst:24
msgid ""
"Create a template file named logo.pt inside the browser directory that "
"displays your logo image. It could contain something as simple as this.::"
msgstr ""

#: ../../views/more_view_examples.rst:34
msgid ""
"Add your logo image to the browser/images directory of your theme. In this "
"example, ++resource++my.theme.images/my_logo.png points to a file named "
"my_logo.png inside the theme's browser/images resource directory."
msgstr ""

#: ../../views/more_view_examples.rst:38
msgid "Overriding the Title"
msgstr ""

#: ../../views/more_view_examples.rst:40
msgid ""
"In this example we override the view class associated with the title "
"viewlet. I assume you have a theme product with an IThemeSpecific interface."
msgstr ""

#: ../../views/more_view_examples.rst:42
msgid ""
"Create an entry in browser/configure.zcml of your theme to override the view"
" class.::"
msgstr ""

#: ../../views/more_view_examples.rst:52
msgid ""
"Create a class named TitleViewlet inside browser/common.py of your theme "
"containing code to return the appropriate title.::"
msgstr ""

#: ../../views/more_view_examples.rst:65
msgid "Discussion"
msgstr ""

#: ../../views/more_view_examples.rst:68
msgid "Overriding the logo"
msgstr ""

#: ../../views/more_view_examples.rst:70
msgid ""
"To override a viewlet in Plone, you need to know which viewlet to override. "
"Using @@manage-viewlets is helpful here. It shows you all the viewlet "
"managers on a page and the viewlets they contain."
msgstr ""

#: ../../views/more_view_examples.rst:72
msgid ""
"You can add /@@manage-viewlets to any url in your site and see the active "
"viewlets there. Something like::"
msgstr ""

#: ../../views/more_view_examples.rst:76
msgid ""
"Using this shows us that the logo is in the plone.logo Viewlet within the "
"plone.portalheader ViewletManager"
msgstr ""

#: ../../views/more_view_examples.rst:80
msgid ""
"Viewlets are defined in the plone/app/layout/viewlets/configure.zcml file "
"within the eggs area of your buildout. Looking inside that configure.zcml "
"file we see::"
msgstr ""

#: ../../views/more_view_examples.rst:90
msgid "Here's our overriding entry from above to compare::"
msgstr ""

#: ../../views/more_view_examples.rst:101
msgid ""
"The name is the same as the item we are overriding. Notice that we give the "
"full path to the manager, and that we are reusing the class. We also declare"
" the name and location of our overriding template file, use our theme's "
"interface, and set a permission."
msgstr ""

#: ../../views/more_view_examples.rst:105
msgid "Overriding the title"
msgstr ""

#: ../../views/more_view_examples.rst:107
msgid ""
"Here is TitleViewlet from plone.app.layout. It has the page title on the "
"left and the portal title on the right, with an emdash in between.::"
msgstr ""

#: ../../views/more_view_examples.rst:124
msgid ""
"Here is an example for comparison that switches page title and portal title,"
" and separates them with a pipe. The only differences are on the last "
"line.::"
msgstr ""

#: ../../views/more_view_examples.rst:141
msgid ""
"More information about the title tag can be found at the `HTML Head Title`_ "
"page which is part of the `Plone Theme Reference`_."
msgstr ""

#: ../../views/more_view_examples.rst:144
msgid "http://plone.org/author/spanky"
msgstr ""

#: ../../views/viewlets.rst:3
msgid "Viewlets"
msgstr ""

#: ../../views/viewlets.rst:7
msgid ""
"Viewlets are parts of the page in Plone page rendering process. You can "
"create, hide and shuffle them freely."
msgstr ""

#: ../../views/viewlets.rst:15
msgid ""
"Viewlets are view snippets which will render a part of the HTML page. "
"Viewlets provide conflict-free way to contribute new user-interface actions "
"and HTML snippets to Plone pages."
msgstr ""

#: ../../views/viewlets.rst:19
msgid ""
"Each viewlet is associated with a viewlet manager. To add viewlets to your "
"HTML code you first need to add them to a viewlet manager, which allows you "
"to shuffle viewlets around through-the-web."
msgstr ""

#: ../../views/viewlets.rst:23
msgid "What viewlets do"
msgstr ""

#: ../../views/viewlets.rst:25
msgid "Viewlets are managed using /@@manage-viewlets page"
msgstr ""

#: ../../views/viewlets.rst:27
msgid "Viewlets can shown and hidden through-the-web"
msgstr ""

#: ../../views/viewlets.rst:29
msgid ""
"Viewlets can be reordered (limited to reordering within container in Plone "
"3.x)"
msgstr ""

#: ../../views/viewlets.rst:31
msgid ""
"Viewlets can be registered and overridden in a theme specific manner "
":doc:`using layers </views/layers>`"
msgstr ""

#: ../../views/viewlets.rst:33
msgid "Viewlets have update() and render() methods"
msgstr ""

#: ../../views/viewlets.rst:35
msgid ""
"Viewlets should honour `zope.contentprovider.interfaces.IContentProvider "
"call contract "
"<http://svn.zope.org/zope.contentprovider/trunk/src/zope/contentprovider/interfaces.py?rev=98212&view=auto>`_."
msgstr ""

#: ../../views/viewlets.rst:37
msgid "A viewlet can be configured so that it is only available for:"
msgstr ""

#: ../../views/viewlets.rst:39
msgid "a certain interface, typically a content type (``for=`` in ZCML)"
msgstr ""

#: ../../views/viewlets.rst:41
msgid "a certain view (``view=`` in ZCML)"
msgstr ""

#: ../../views/viewlets.rst:45
msgid ""
"`Plone 4 Viewlet and viewlet manager reference "
"<http://plone.org/documentation/manual/theme-"
"reference/elements/elementsindexsunburst4>`_"
msgstr ""

#: ../../views/viewlets.rst:47
msgid ""
"`ZCML viewlet definition "
"<http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_browser/viewlet/index.html>`_."
msgstr ""

#: ../../views/viewlets.rst:49
msgid "http://pypi.python.org/pypi/zope.viewlet/"
msgstr ""

#: ../../views/viewlets.rst:52
msgid "Finding viewlets"
msgstr ""

#: ../../views/viewlets.rst:54
msgid ""
"There are two through-the-web tools to start looking what viewlets are "
"available on your installation. The available viewlets may depend on "
"installed Plone version and installed add-ons."
msgstr ""

#: ../../views/viewlets.rst:57
msgid ""
"The ``portal_view_customizations`` tool in ZMI will show you viewlet "
"registrations (and the viewlet managers they are registered for). As with "
"views, you can hover over the viewlet name to see where it is registered in "
"a tool tip."
msgstr ""

#: ../../views/viewlets.rst:59
msgid ""
"To discover the name of a particular viewlet, you can use the @@manage-"
"viewlets view, e.g. http://localhost:8080/plone/@@manage-viewlets."
msgstr ""

#: ../../views/viewlets.rst:62
msgid "Creating a viewlet"
msgstr ""

#: ../../views/viewlets.rst:64
msgid "A viewlet consists of"
msgstr ""

#: ../../views/viewlets.rst:66
msgid "Python class"
msgstr ""

#: ../../views/viewlets.rst:68
msgid "Page template (.pt) file"
msgstr ""

#: ../../views/viewlets.rst:70
msgid ""
"A :doc:`browser layer </views/layers>` defining which add-on product must be"
" installed, so that the viewlet is rendered"
msgstr ""

#: ../../views/viewlets.rst:72
msgid ""
"A related Grok or ZCML directives to register the viewlet to a correct "
"viewlet manager with a correct layer"
msgstr ""

#: ../../views/viewlets.rst:76
msgid "Re-using code from a View"
msgstr ""

#: ../../views/viewlets.rst:78
msgid ""
"In the case where you might want a Viewlet and View to share the same code, "
"remember that the View instance is available in the Viewlet under the "
"``view`` attribute."
msgstr ""

#: ../../views/viewlets.rst:82
msgid ""
"Thus, you can use ``self.view`` to get the view, and then use its methods."
msgstr ""

#: ../../views/viewlets.rst:86
msgid "Stock viewlets"
msgstr ""

#: ../../views/viewlets.rst:88
msgid ""
"These can be found in `plone.app.layout.viewlet module "
"<https://github.com/plone/plone.app.layout/blob/master/plone/app/layout/viewlets/configure.zcml>`_."
msgstr ""

#: ../../views/viewlets.rst:90
msgid ""
"The language selector lives in `plone.app.i18n.locales.browser "
"<https://github.com/plone/plone.app.i18n/blob/master/plone/app/i18n/locales/browser/configure.zcml>`_,"
" but it is a *view*. Don't know why."
msgstr ""

#: ../../views/viewlets.rst:94
msgid "Creating a viewlet using Grok"
msgstr ""

#: ../../views/viewlets.rst:96
msgid ""
":doc:`Grok framework </components/grok>` allows you to register a viewlet "
"easily using Python directives."
msgstr ""

#: ../../views/viewlets.rst:98
msgid ""
"It is recommended that you use :doc:`Dexterity ZopeSkel add-on product code "
"skeleton </getstarted/paste>` where you add this code."
msgstr ""

#: ../../views/viewlets.rst:101
msgid "Create *yourcomponent.app/yourcomponent/app/browser/viewlets.py*::"
msgstr ""

#: ../../views/viewlets.rst:145
msgid ""
"Then create folder ``yourcomponent.app/yourcomponent/app/browser/templates``"
" where you add the related ``javascripthead.pt``:"
msgstr ""

#: ../../views/viewlets.rst:155
msgid ""
"http://vincentfretin.ecreall.com/articles/using-five.grok-to-add-viewlets"
msgstr ""

#: ../../views/viewlets.rst:158
msgid "Creating a viewlet manager"
msgstr ""

#: ../../views/viewlets.rst:160
msgid ""
"Viewlet managers contain viewlets. A viewlet manager is itself a Zope 3 "
"interface which contains an OrdereredViewletManager implementation. "
"OrderedViewletManagers store the order of the viewlets in the site database "
"and provide the fancy /@@manage-viewlets output."
msgstr ""

#: ../../views/viewlets.rst:165
msgid ""
"A viewlet manager can be rendered in a page template code using the "
"following expression::"
msgstr ""

#: ../../views/viewlets.rst:169
msgid ""
"Each viewlet manager allows you to shuffle viewlets inside a viewlet "
"manager. This is done by using ``/@@manage-viewlets`` view. These settings "
"are stored in the site database, so a good practice is to export "
"``viewlets.xml`` using ``portal_setup`` and then include the necessary bits "
"of this ``viewlets.xml`` with your add-on installer so that when your add-on"
" is installed, the viewlet configuration is changed accordingly."
msgstr ""

#: ../../views/viewlets.rst:178
msgid ""
"You cannot move viewlets between viewlet managers. I know it sucks, but life"
" is hard and Plone is harder. Hide viewlets in one manager using /@@manage-"
"viewlets and viewlets.xml export, then re-register the same viewlet to a new"
" manager."
msgstr ""

#: ../../views/viewlets.rst:183
msgid ""
"Viewlet managers are based on `zope.viewlet.manager.ViewletManager "
"<http://svn.zope.org/zope.viewlet/trunk/src/zope/viewlet/manager.py?rev=113069&view=auto>`_"
" and `plone.app.viewletmanager.manager.OrderedViewletManager "
"<https://github.com/plone/plone.app.viewletmanager/blob/master/plone/app/viewletmanager/manager.py>`_."
msgstr ""

#: ../../views/viewlets.rst:188
msgid ""
"http://grok.zope.org/doc/current/reference/components.html?highlight=viewlet#grok.ViewletManager"
msgstr ""

#: ../../views/viewlets.rst:190
msgid ""
"http://svn.zope.org/zope.viewlet/trunk/src/zope/viewlet/viewlet.py?rev=113069&view=auto"
msgstr ""

#: ../../views/viewlets.rst:192
msgid ""
"http://plone.org/documentation/manual/theme-"
"reference/elements/viewletmanager/anatomy/"
msgstr ""

#: ../../views/viewlets.rst:197
msgid "Creating a viewlet manager: Grok way"
msgstr ""

#: ../../views/viewlets.rst:199
msgid ""
"Recommended if you want to keep the number of files and lines of XML and "
"Python to a minimum."
msgstr ""

#: ../../views/viewlets.rst:201
msgid "An example here for related Python code::"
msgstr ""

#: ../../views/viewlets.rst:206
msgid "Creating a viewlet manager: ZCML way"
msgstr ""

#: ../../views/viewlets.rst:208
msgid "For those who want to write XML."
msgstr ""

#: ../../views/viewlets.rst:210
msgid ""
"Usually viewlet managers are dummy interfaces and the actual implementation "
"comes from ``plone.app.viewletmanager.manager.OrderedViewletManager``."
msgstr ""

#: ../../views/viewlets.rst:213
msgid ""
"In this example we put two viewlets in a new viewlet manager so that we can "
"properly CSS float then and close this float."
msgstr ""

#: ../../views/viewlets.rst:218
msgid ""
"This example uses extensive Python module nesting: "
"plonetheme.yourtheme.browser.viewlets is just too deep. You really don't "
"need to do some many levels, but the orignal plone3_theme paster templates "
"do it in bad way. One of Python golden rules is that flat is better than "
"nested. You can just dump everything to the root of your "
"plonetheme.yourtheme package."
msgstr ""

#: ../../views/viewlets.rst:224
msgid "In your ``browser/viewlets/manager.py`` or similar file add::"
msgstr ""

#: ../../views/viewlets.rst:235
msgid "Then in ``browser/viewlets/configure.zcml``::"
msgstr ""

#: ../../views/viewlets.rst:245
msgid ""
"Optionally you can include a template which renders some wrapping HTML "
"around viewlets. *browser/viewlets/headerbottomviewletmanager.pt*::"
msgstr ""

#: ../../views/viewlets.rst:263
msgid ""
"And then re-register some stock viewlets against your new viewlet manager in"
" *browser/viewlets/configure.zcml*::"
msgstr ""

#: ../../views/viewlets.rst:288
msgid ""
"Now, we need to render our viewlet manager somehow. One place to do it is in"
" a ``main_template.pt``, but because we need to add this HTML output to a "
"header section which is produced by *another* viewlet manager, we need to "
"create a new viewlet just for rendering our viewlet manager. Yo dawg - we "
"put viewlets in your viewlets so you can render viewlets!"
msgstr ""

#: ../../views/viewlets.rst:293
msgid "``browser/viewlets/headerbottom.pt``::"
msgstr ""

#: ../../views/viewlets.rst:300
msgid ""
"Only six files needed to change a bit of HTML code - welcome to the land of "
"productivity! On the top of this you also need to create a new "
"``viewlets.xml`` export for your theme."
msgstr ""

#: ../../views/viewlets.rst:303
msgid ""
"After all this ZCML typing you probably should just look the grok example "
"above."
msgstr ""

#: ../../views/viewlets.rst:307
msgid ""
"http://plone.org/documentation/manual/theme-"
"reference/elements/viewletmanager/override"
msgstr ""

#: ../../views/viewlets.rst:310
msgid "Viewlet behavior"
msgstr ""

#: ../../views/viewlets.rst:312
msgid "Viewlets have two important methods"
msgstr ""

#: ../../views/viewlets.rst:314
msgid "update() - set up all variables"
msgstr ""

#: ../../views/viewlets.rst:316
msgid ""
"render() - generate the resulting HTML code by evaluating the template with "
"context variables set up in update()"
msgstr ""

#: ../../views/viewlets.rst:318
msgid ""
"These methods should honour "
"`zope.contentprovider.interfaces.IContentProvider call contract "
"<http://svn.zope.org/zope.contentprovider/trunk/src/zope/contentprovider/interfaces.py?rev=98212&view=auto>`_."
msgstr ""

#: ../../views/viewlets.rst:320
msgid "See"
msgstr ""

#: ../../views/viewlets.rst:322
msgid ""
"http://svn.zope.org/zope.contentprovider/trunk/src/zope/contentprovider/interfaces.py?rev=98212&view=auto"
msgstr ""

#: ../../views/viewlets.rst:324
msgid ""
"https://github.com/plone/plone.app.layout/tree/master/plone/app/layout/viewlets/common.py"
msgstr ""

#: ../../views/viewlets.rst:328
msgid "Creating a viewlet using Python code and ZCML"
msgstr ""

#: ../../views/viewlets.rst:330
msgid ""
"Here is an example code which extends an existing Plone base viewlet (found "
"from plone.app.layout.viewlets.base package) and then puts this viewlet to a"
" one of viewlet managers using :doc:`ZCML </components/zcml>`."
msgstr ""

#: ../../views/viewlets.rst:333
msgid "Example Python code for viewlets.py::"
msgstr ""

#: ../../views/viewlets.rst:395
msgid ""
"Then a sample page template (like.pt). You can use TAL template variable "
"*view* to refer to your viewlet class instance::"
msgstr ""

#: ../../views/viewlets.rst:405
msgid "Registering a viewlet using ZCML"
msgstr ""

#: ../../views/viewlets.rst:407
msgid ""
"Example configuration ZCML snippets below. You usually <viewlet> to "
"*browser/configure.zcml* folder."
msgstr ""

#: ../../views/viewlets.rst:429
msgid "Conditionally rendering viewlets"
msgstr ""

#: ../../views/viewlets.rst:431
msgid "There are two primary methods to render viewlets only on some pages"
msgstr ""

#: ../../views/viewlets.rst:433
msgid ""
"Register viewlet against some marker interface or content type class - the "
"viewlet is rendered on this content type only. You can use :doc:`dynamic "
"marker interfaces </components/interfaces>` to toggle interface on some "
"individual pages through ZMI"
msgstr ""

#: ../../views/viewlets.rst:438
msgid "Hard-code a condition to your viewlet in Python code."
msgstr ""

#: ../../views/viewlets.rst:440
msgid ""
"Below is an example of overriding a render() method to conditionally render "
"your viewlet using Grok viewlets."
msgstr ""

#: ../../views/viewlets.rst:442
msgid "Viewlet code::"
msgstr ""

#: ../../views/viewlets.rst:496
msgid "Page template code"
msgstr ""

#: ../../views/viewlets.rst:512
msgid ""
"Below is an example of overriding a render() method to conditionally render "
"your viewlet using Zope 3 viewlets::"
msgstr ""

#: ../../views/viewlets.rst:562
msgid "Rendering viewlet by name"
msgstr ""

#: ../../views/viewlets.rst:564
msgid ""
"Below is a complex example how to expose viewlets without going through a "
"viewlet manager."
msgstr ""

#: ../../views/viewlets.rst:566
msgid ""
"See `collective.fastview "
"<http://svn.plone.org/svn/collective/collective.fastview/trunk/>`_ for "
"updates and more information."
msgstr ""

#: ../../views/viewlets.rst:664
msgid "Rendering viewlets with accurate layout"
msgstr ""

#: ../../views/viewlets.rst:666
msgid ""
"Default viewlet managers render viewlets as HTML code string concatenation, "
"in the order of appearance. This is unsuitable to build complex layouts."
msgstr ""

#: ../../views/viewlets.rst:669
msgid ""
"Below is an example which defines master viewlet *HeaderViewlet* which will "
"place other viewlets into the manually tuned HTML markup below."
msgstr ""

#: ../../views/viewlets.rst:672
msgid "theme/browser/header.py::"
msgstr ""

#: ../../views/viewlets.rst:744
msgid "theme/browser/header_items.pt"
msgstr ""

#: ../../views/viewlets.rst:765
msgid "theme/browser/configure.zcml"
msgstr ""

#: ../../views/viewlets.rst:839
msgid "theme/browser/templates/portal_header.pt"
msgstr ""

#: ../../views/viewlets.rst:847
msgid "theme/browser/interfaces.py code::"
msgstr ""

#: ../../views/viewlets.rst:864
msgid ""
"We need to create this common.py file so we can tell Plone to render our "
"custom templates for these viewlets. Without this piece in place, our "
"viewlets will render with Plone defaults."
msgstr ""

#: ../../views/viewlets.rst:867
msgid "theme/browser/common.py code::"
msgstr ""

#: ../../views/viewlets.rst:886
msgid "Viewlets for one page only"
msgstr ""

#: ../../views/viewlets.rst:888
msgid ""
"Viewlets can be registered to one special page only using a marker "
"interface. This allow loading a page specific CSS files."
msgstr ""

#: ../../views/viewlets.rst:892
msgid ""
"`How to get a different look for some pages of a plone-site "
"<http://www.starzel.de/blog/how-to-get-a-different-look-for-some-pages-of-a"
"-plone-site>`_"
msgstr ""

#: ../../views/viewlets.rst:896
msgid "<head> viewlets"
msgstr ""

#: ../../views/viewlets.rst:898
msgid ""
"You can register custom Javascript or CSS files to HTML <head> section using"
" viewlets."
msgstr ""

#: ../../views/viewlets.rst:900
msgid ""
"Below is an head.pt which will be injected in <head>. This examples shows "
"how to dynamically generate ``<script>`` elements. Example is taken from "
"`mfabrik.like add-on "
"<https://svn.plone.org/svn/collective/mfabrik.like/trunk>`_."
msgstr ""

#: ../../views/viewlets.rst:908
msgid ""
"Then you register it against viewlet manager "
"``plone.app.layout.viewlets.interfaces.IHtmlHead``  in ``configure.zcml``"
msgstr ""

#: ../../views/viewlets.rst:921
msgid "viewlet.py code::"
msgstr ""

#: ../../views/viewlets.rst:961
msgid "Finding viewlets programmatically"
msgstr ""

#: ../../views/viewlets.rst:963
msgid ""
"Occasionaly, you may need to get hold of your viewlets in python code, "
"perhaps in tests.  Since the availability of a viewlet is ultimately "
"controlled by the viewlet manager to which it has been registered, using "
"that manager is a good way to go"
msgstr ""

#: ../../views/viewlets.rst:1005
msgid ""
"Since it is possible to register a viewlet for a specific content type and "
"for a browser layer, you may also need to use these elements in looking up "
"your viewlet"
msgstr ""

#: ../../views/viewlets.rst:1045
msgid "Poking viewlet registrations programmatically"
msgstr ""

#: ../../views/viewlets.rst:1047
msgid ""
"Below is an example how one can poke viewlets registration for a Plone site."
msgstr ""
