# SOME DESCRIPTIVE TITLE.
# Copyright (C) Plone community and other individual contributors
# This file is distributed under the same license as the Plone Developer Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Developer Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-09 14:22+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/adapters.rst:3
# 303adc52ed82464a8f4bf21bdb3b4f74
msgid "Adapters"
msgstr ""

#: ../../components/adapters.rst:8
#: ../../components/customizing_plone.rst:8
#: ../../components/events.rst:13
#: ../../components/genericsetup.rst:14
#: ../../components/grok.rst:14
#: ../../components/index.rst:6
#: ../../components/interfaces.rst:8
#: ../../components/utilities.rst:13
#: ../../components/zcml.rst:12
# 856dcf6ee41a49af8985a9a82be3d559
# 2456997529f94db98f1206859dae5b81
# 2008be615ed7438b911bf3bd5903e433
# 78b1ac371c1c44fb9c9fd9e27ba57061
# 71fd8792345c4583a7f8a3409a286350
# f71d151d15314cb28edf65f57fc5abf3
# 2545b836dfb44f01bfac459e1166d6cb
# 14caed9e2fd7424db3196072622df377
# 3336c699643d4b22ac801fb68ac12116
msgid "Introduction"
msgstr ""

#: ../../components/adapters.rst:10
# 4a0aea1b7e0846809009db11160234c8
msgid "Adapters make it possible to extend the behavior of a class without modifying the class itself. This allows more modular, readable code in complex systems where there might be hundreds of methods per class. Some more advantages of this concept are:"
msgstr ""

#: ../../components/adapters.rst:15
# 9bd8483206574f38af538ab79fc78367
msgid "The class interface itself is more readable (less visible clutter);"
msgstr ""

#: ../../components/adapters.rst:16
# 8b1ce3dc453c47a8a3327c47c13a0137
msgid "class functionality can be extended outside the class source code;"
msgstr ""

#: ../../components/adapters.rst:17
# 77e9a860b6024529b8a182f249e88fab
msgid "add-on products may extend or override parts of the class functionality. Frameworks use adapters extensively, because adapters provide easy integration points.  External code can override adapters to retrofit/modify functionality. For example: a theme product might want to override a searchbox viewlet to have a search box with slightly different functionality and theme-specific goodies."
msgstr ""

#: ../../components/adapters.rst:25
# 3c84302035a34fc3ada7184af7588863
msgid "The downside is that adapters cannot be found by \"exploring\" classes or source code. They must be well documented in order to be discoverable."
msgstr ""

#: ../../components/adapters.rst:28
# 836896d51beb4c928c995500782ca54e
msgid "Read more about adapters in the `zope.component README <http://docs.zope.org/zope.component/narr.html#adapters>`_."
msgstr ""

#: ../../components/adapters.rst:31
# 1b9ba2ef57b348a19eb4c9562da05b07
msgid "`Adapter ZCML <http://docs.zope.org/zope.component/zcml.html#adapter>`_."
msgstr ""

#: ../../components/adapters.rst:33
# cc8b6ebdb13c45b6ba9d1a083fae45c7
msgid "Adapters are matched by:"
msgstr ""

#: ../../components/adapters.rst:35
# a98c7625ec5b479797c96105208a7877
msgid "Provider interface (what functionality adapter provides)."
msgstr ""

#: ../../components/adapters.rst:36
# b327484edfb04bbe8b947d5d938b7d59
msgid "Parameter interfaces."
msgstr ""

#: ../../components/adapters.rst:38
# 1a40f31928fe410aae22872282fffcb2
msgid "There are two kinds of adapters:"
msgstr ""

#: ../../components/adapters.rst:40
# 1ab5e327e06f4f3fa6014a49722abb58
msgid "Normal adapters that take only one parameter."
msgstr ""

#: ../../components/adapters.rst:41
# de5e908b3582414eb8527f0adc799fbf
msgid "Multi-adapters take many parameters in the form of a tuple."
msgstr ""

#: ../../components/adapters.rst:44
# 394e9b011d324eeebf2bc94e5935c753
msgid "Example adapters users"
msgstr ""

#: ../../components/adapters.rst:46
# f9b6c17bc41f484dbaaafb84988ea5d0
msgid "http://plone.org/documentation/manual/theme-reference/buildingblocks/components/themespecific"
msgstr ""

#: ../../components/adapters.rst:49
# 18f4d24d4ca04a02aac7c6bb18e540e8
msgid "Registering an adapter"
msgstr ""

#: ../../components/adapters.rst:52
# dbcdc21bf29547fab82e8c4c044f96a7
msgid "Registering using ZCML"
msgstr ""

#: ../../components/adapters.rst:54
# 670adfe35dfd4546b97016b0e3fcc7a7
msgid "An adapter provides functionality to a class. This functionality becomes available when the interface is queried from the instance of class."
msgstr ""

#: ../../components/adapters.rst:57
# 5779889ddc2c4beeb4694ecab9359827
msgid "Below is an example how to make a custom \"image provider\". The image provider provides a list of images for arbitrary content."
msgstr ""

#: ../../components/adapters.rst:60
# e891d14c9a6c4f09bc998a5b8629d081
msgid "This is the image provider interface::"
msgstr ""

#: ../../components/adapters.rst:72
# 0923b1e7afe94a21a85ff38402b6e2b7
msgid "This is our content class::"
msgstr ""

#: ../../components/adapters.rst:82
# df8a169e38b2428c89b08a56b169a9c7
msgid "This is the adapter for the content class::"
msgstr ""

#: ../../components/adapters.rst:113
# 979d66a3ab444cf5b21dae894c70768c
msgid "Register the adapter for your custom content type ``MyShoppableItemType`` in the ``configure.zcml`` file of your product:"
msgstr ""

#: ../../components/adapters.rst:124
# 46e3d454e7f242c28302c067702ab148
msgid "Then we can query the adapter and use it. Unit testing example::"
msgstr ""

#: ../../components/adapters.rst:138
# d028de5ff8304ecbbe5dc83dbd6ac410
msgid "Registering using Python"
msgstr ""

#: ../../components/adapters.rst:140
# e0d4a5e2bfa94c749c9c2f48e25880ff
msgid "Register to *Global Site Manager* using ``registerAdapter()``."
msgstr ""

#: ../../components/adapters.rst:142
#: ../../components/events.rst:176
#: ../../components/genericsetup.rst:137
#: ../../components/interfaces.rst:61
#: ../../components/interfaces.rst:80
#: ../../components/interfaces.rst:162
#: ../../components/interfaces.rst:262
#: ../../components/interfaces.rst:286
#: ../../components/utilities.rst:150
#: ../../components/utilities.rst:188
# 1fec719060fd4261b8891f6a156c7d58
# 4d54f3d00da341379fc6da218b25e650
# 56ad335d11264baa972b40ee6e36482a
# e97451f8994049aab91b9b25cfb4b0c6
# b9196119239740309fde9722b9a7ae48
# 2461bbf4b19d4247ba88381ca2f200d8
# 59a48581437b4c638a55626e0ec8362d
# 7414fff4342e441d910203b445b40016
# dc2268d1bc4b48488017c2b49532e1b0
# 1dd230f270194189a7296e29a032e2e6
msgid "Example::"
msgstr ""

#: ../../components/adapters.rst:153
#: ../../components/grok.rst:32
#: ../../components/grok.rst:231
#: ../../components/index.rst:33
# b55d426d4a5b4e4197c5522c9c47e53b
# 6d7b1040ea914bbcb07d7127e69474ac
# 44bb2872c3ab450ab52a1ee647712a09
# 4da7712624d14e1c838b32e7b193591f
msgid "More info"
msgstr ""

#: ../../components/adapters.rst:155
# 8fd6718b7a724996864ade8a18316126
msgid "http://www.muthukadan.net/docs/zca.html#registration"
msgstr ""

#: ../../components/adapters.rst:158
# 92c3a40dcda448e89040903d658bb963
msgid "Generic adapter contexts"
msgstr ""

#: ../../components/adapters.rst:160
# 9a6c8e9753a34a2bb8ff518dd59a3660
msgid "The following interfaces are useful when registering adapters:"
msgstr ""

#: ../../components/adapters.rst:163
#: ../../components/interfaces.rst:34
# d9cb03d2020d46f89457df61da0d1259
# 81177b23d8224e95865fcb32155afd6f
msgid "``zope.interface.Interface``"
msgstr ""

#: ../../components/adapters.rst:163
# 4eec129c471748129c5e9e69cf056aeb
msgid "Adapts to any object"
msgstr ""

#: ../../components/adapters.rst:166
#: ../../components/interfaces.rst:41
# 8409e83095e34a82bdd8a43f23332f83
# 9345dfb910b74a14b9f46deb8405124b
msgid "``Products.CMFCore.interfaces.IContentish``"
msgstr ""

#: ../../components/adapters.rst:166
# 9bf80441039346e69b9ffd30d5784ad4
msgid "Adapts to any Plone content object"
msgstr ""

#: ../../components/adapters.rst:169
# 50e025403acf4ba5b71b75fc7b7163b8
msgid "``zope.publisher.interfaces.IBrowserView``"
msgstr ""

#: ../../components/adapters.rst:169
# 01257a1948c14479b078400640d71636
msgid "Adapts to any ``BrowserView(context, request)`` object"
msgstr ""

#: ../../components/adapters.rst:172
# 7b92cf5f528c41398dc8170d3c94d61b
msgid "Multi-adapter registration"
msgstr ""

#: ../../components/adapters.rst:174
# 3611086369844fe9835297ec2630d8d8
msgid "You can specify any number of interfaces in the ``<adapter for=\"\" />`` attribute. Separate them with spaces or newlines."
msgstr ""

#: ../../components/adapters.rst:177
# ea29b11fcf134a60ad9e2fb56138ffa4
msgid "Below is a view-like example which registers against:"
msgstr ""

#: ../../components/adapters.rst:179
# 37f7e7946a4142b6b335840875f3296a
msgid "any context (``zope.interface.Interace``);"
msgstr ""

#: ../../components/adapters.rst:180
# 894d0dad2bd34e539335a73dde6db484
msgid "HTTP request objects (``zope.publisher.interfaces.browser.IBrowserRequest``)."
msgstr ""

#: ../../components/adapters.rst:182
# 8c3aaccb05d54e18b5349268cea8ffff
msgid "Emulate view registration (context, request):"
msgstr ""

#: ../../components/adapters.rst:194
# e01824b1128f4c0caa629b0a64b4e4d3
msgid "Getting the adapter"
msgstr ""

#: ../../components/adapters.rst:196
# 77da1ae299a6423589f4039c920acb64
msgid "There are two functions that may be used to get an adapter:"
msgstr ""

#: ../../components/adapters.rst:198
# 9a837cd0ae204b3c9e33e0447390983c
msgid "``zope.component.getAdapter`` will raise an exception if the adapter is not found."
msgstr ""

#: ../../components/adapters.rst:201
# 8e1b8efb447c4330b6e1ded10c91b3e7
msgid "``zope.component.queryAdapter`` will return ``None`` if the adapter is not found."
msgstr ""

#: ../../components/adapters.rst:204
# 934c349431934c54bcf31b357772bb52
msgid "``getAdapter``/``queryAdapter`` arguments:"
msgstr ""

#: ../../components/adapters.rst:209
# a55056a3fdaf40f9957fd3b521faecd3
msgid "# Tuple consisting of: (*Object implementing the first interface*,"
msgstr ""

#: ../../components/adapters.rst:207
# fec97609409e4df8b6418fa2f18fb470
msgid "*object implementing the second interface*, ...) The interfaces are in the order in which they were declared in the ``<adapter for=\"\">`` attribute."
msgstr ""

#: ../../components/adapters.rst:211
# 682f57ffedd841b299fcd096ddb6aa81
msgid "# Adapter marker interface."
msgstr ""

#: ../../components/adapters.rst:213
# cf5c8e5d808243b1998790d6ea273025
msgid "Example registration:"
msgstr ""

#: ../../components/adapters.rst:227
# 2ca548933e8d480ea8f06f31ca8b67b2
msgid "Corresponding query code, to look up an adapter implementing the interfaces::"
msgstr ""

#: ../../components/adapters.rst:247
# e214b026efc248d1ab1a28c418da4ca2
msgid "You cannot get adapters on module-level code during import, as the Zope Component Architecture is not yet initialized."
msgstr ""

#: ../../components/adapters.rst:252
# d8d31db9ce674f9eb27354e87be45dbd
msgid "Listing adapter registers"
msgstr ""

#: ../../components/adapters.rst:254
# f82084b5a85e4e838abaedf203e1c333
msgid "The following code checks whether the ``IHeaderBehavior`` adapter is registered correctly::"
msgstr ""

#: ../../components/adapters.rst:265
# c3f32fb293cf46debc74f2693bfa9290
msgid "Alternative listing adapters"
msgstr ""

#: ../../components/adapters.rst:267
# 1d59575b020b4db3930dd336cb7c8ef0
msgid "Getting all multi-adapters (context, request)::"
msgstr ""

#: ../../components/adapters.rst:274
# be302da614134064a5b8c989a492d950
msgid "This does not list locally-registered adapters such as Zope views."
msgstr ""

#: ../../components/adapters.rst:278
# 148c37d3d4ca4798b3330c5af63b4477
msgid "Local adapters"
msgstr ""

#: ../../components/adapters.rst:280
# d391c0e0d0964f258aacd68a895ee752
msgid "Local adapters are effective only inside a certain container, such as a folder.  They use ``five.localsitemanager`` to register themselves."
msgstr ""

#: ../../components/adapters.rst:283
# ec702abdacc943e7b1c49df1f8d0b3c3
msgid "http://opkode.net/media/blog/schema-extending-an-object-only-inside-a-specific-folder"
msgstr ""

#: ../../components/customizing_plone.rst:3
# 85137b1ba50145f39326ed378b4f2f79
msgid "Customizing Plone"
msgstr ""

#: ../../components/customizing_plone.rst:10
# 93338b9d99da43289c0bf20ccce14ac8
msgid "Plone can be customized in two different ways, depending on which kind of component you are trying to change:"
msgstr ""

#: ../../components/customizing_plone.rst:13
# f0af49e034a443699ff13785f98d379b
msgid "Through-the-web."
msgstr ""

#: ../../components/customizing_plone.rst:15
# 44f512e2dbf146e3ab0a8cc2f6f38173
msgid "By add-on products."
msgstr ""

#: ../../components/customizing_plone.rst:17
# 8df5f749988f43bf99e1fbfdb51b0974
msgid "You should never edit files directly in an egg folder. Instead you usually create a customized version of the item you wish to modify and then configure Plone to use your customized version instead of the stock one."
msgstr ""

#: ../../components/customizing_plone.rst:23
# cb7e90b492a548bfa778eb1bf10f54b1
msgid "Through-the-web changes"
msgstr ""

#: ../../components/customizing_plone.rst:25
# 53dd5bba1e1c45449463852624d4d8d5
msgid "Minor configuration changes can be done through the web. These changes are effective immediately and don't require you to write any code or restart Zope application server. The downside is that since through-the-web changes don't have a source code \"recipe\" for what you did, the changes are not automatically repeatable. If you need to do the same changes for another site again, or you need heavily modify your site, you need go through manual steps to achieve the same customization."
msgstr ""

#: ../../components/customizing_plone.rst:35
# c0257be3c4184a4babfbc56d24c60935
msgid "Possible through-the-web changes are:"
msgstr ""

#: ../../components/customizing_plone.rst:37
# 09edd5446b9d468f8f09392ad6fcdda8
msgid "Site settings: E.g. adding/removing `content rules <http://plone.org/documentation/how-to/content-rules>`_"
msgstr ""

#: ../../components/customizing_plone.rst:39
# 64c05eebb5754c66b7292b50cb69c60b
msgid "Showing and hiding viewlets (parts of the page) using ``@@manage-viewlets``"
msgstr ""

#: ../../components/customizing_plone.rst:41
# a0bf48c8bba544e88fb66ecfbd7aa51e
msgid "Exporting and importing parts of the site configuration in ``portal_setup``"
msgstr ""

#: ../../components/customizing_plone.rst:43
# eec0bb9db0b04c8e80a670fbf6d3c517
msgid "Customizing viewlet templates in ``portal_view_customization``"
msgstr ""

#: ../../components/customizing_plone.rst:45
# 55f770d983fa4eec93ef5a65639843fc
msgid "Customize ``portal_skins`` layer theme files in portal_skins"
msgstr ""

#: ../../components/customizing_plone.rst:47
# 41b098c362e94947ba03d6152a0fecca
msgid "Uploading Javascript files, CSS files and images through Zope management interface and registering using ``portal_css`` and ``portal_javascripts``"
msgstr ""

#: ../../components/customizing_plone.rst:51
# 07264804e5c94cf5a2968d4c52ad030c
msgid "Through the code changes"
msgstr ""

#: ../../components/customizing_plone.rst:53
# 8c9c7b3a6fa641a6a1636423d4250aee
msgid "To expand Plone using Python, you have to create your own add-on product. Add-on products are distributed as packaged Python modules called eggs_. The recommended way is to use the paster_ command to generate an add-on product skeleton which you can use as a starting point for your development. Paster also contains useful subcommands, like ``addcontent``, which automate various Plone add-on development tasks."
msgstr ""

#: ../../components/customizing_plone.rst:61
# 5e0c3bc7796946a5a06f3402a75f12df
msgid "Another `paster tutorial <http://www.unc.edu/~jj/plone/>`_"
msgstr ""

#: ../../components/events.rst:3
# 686f56424bb7444583678f2fa58d219a
msgid "Events"
msgstr ""

#: ../../components/events.rst:5
#: ../../components/genericsetup.rst:5
#: ../../components/grok.rst:5
#: ../../components/utilities.rst:5
#: ../../components/zcml.rst:5
# 32e28c44dfc949b0ae19e793ec81f87e
# 63a8c28a933a412986c94b263311e6c0
# ca7843239b364b30b9c1cfd1a3479a2b
# 0c9f177f772441528d843b50879db64d
# e429863933f9416786b294cd9d5d1c8b
msgid "Description"
msgstr ""

#: ../../components/events.rst:7
# c9da883aefc64591ba1a4a127e12908e
msgid "How to add event hooks to your Plone code to perform actions when something happens on a Plone site."
msgstr ""

#: ../../components/events.rst:15
# fe60062553964a8c82d80e9e992a0ca1
msgid "This document briefly discusses event handling using the ``zope.event`` module. The Zope Component Architecture's `zope.event package <http://pypi.python.org/pypi/zope.event>`_ is used to manage subscribeable events in Plone."
msgstr ""

#: ../../components/events.rst:20
# 51a0a788b1914f888ed0d092d2ebf3fa
msgid "Some of the notable characteristics of the Plone event system are:"
msgstr ""

#: ../../components/events.rst:22
# f7c2fb74e1ab4828b07ae7c11575fe00
msgid "it is simple;"
msgstr ""

#: ../../components/events.rst:23
# a4b2a6e5cf144d01ba8e8f1a01aab361
msgid "subscriber calling order is not modifiable |---| you cannot set the order in which event handlers are called;"
msgstr ""

#: ../../components/events.rst:25
# dc5804d267b74e3f852cd800aa3c3ad7
msgid "events cannot be cancelled |---| all handlers will always get the event;"
msgstr ""

#: ../../components/events.rst:26
# 801c684e87e0427fb7877a3bc56743de
msgid "event handlers cannot have return values;"
msgstr ""

#: ../../components/events.rst:27
# 0a58d47ab2a440cfb2960253d64f7f3b
msgid "exceptions raised in an event handler will interrupt the request processing."
msgstr ""

#: ../../components/events.rst:30
#: ../../components/events.rst:123
# 852593603ebf4aa49269e76edc3133b2
# 5c8b981adf564734980bcae0ab169c60
msgid "For more information, see:"
msgstr ""

#: ../../components/events.rst:32
#: ../../components/events.rst:127
# e7c8b7283a524fac83378c3176731766
# 9882625d655e42b29766177a6b8e19d3
msgid "http://plone.org/products/dexterity/documentation/manual/five.grok/core-components/events"
msgstr ""

#: ../../components/events.rst:35
# 7728b1a5eb08441eac4898eae15ab071
msgid "Registering an event handler"
msgstr ""

#: ../../components/events.rst:37
# 903b017e5559468a9389a4781945bb86
msgid "Plone events can be scoped:"
msgstr ""

#: ../../components/events.rst:39
# d780f8b44b0f43a6a0936195f82ad846
msgid "*globally* (no scope)"
msgstr ""

#: ../../components/events.rst:40
# 61366bf14e794b99a33900a53a79933d
msgid "per *content type*"
msgstr ""

#: ../../components/events.rst:44
# af984541382341a1a1ff00c75aaf2ace
msgid "Example: Register an event-handler on your contenttype's creation"
msgstr ""

#: ../../components/events.rst:47
# 3ee34c74637245d6917351c3e96dfcf8
msgid "In your.product/your/product/configure.zcml insert::"
msgstr ""

#: ../../components/events.rst:56
# a034ff9eebe744d990751e70828ed880
msgid "The first line defines to which interface you want to bind the execution of your code, which means here, that the code will only be executed if the object is one of your contenttype's. If you want this to be interface-agnostic, insert an asterix as a wildcard instead."
msgstr ""

#: ../../components/events.rst:60
# 4284741a09fa47f7bdf2dea44b2f88a1
msgid "The second line defines the event on which this should happen, which is here 'IObjectInitializedEvent'. For more available possible events to be used as a trigger, see:: http://developer.plone.org/reference_manuals/external/plone.app.dexterity/advanced/event-handlers.html"
msgstr ""

#: ../../components/events.rst:64
# ff39d2b312e94678bb9b0f929ca4493d
msgid "The third line gives the path to the script that is supposed to be executed."
msgstr ""

#: ../../components/events.rst:66
# 8677362ff4cf4d9282315fa94c72c19c
msgid "Create your.product/your/product/your_python_file.py and insert::"
msgstr ""

#: ../../components/events.rst:72
# a5225bacba5b4b259c27745befd15824
msgid "For Dexterity-contenttype's and additional ZOPE-Illumination see also: http://developer.plone.org/reference_manuals/external/plone.app.dexterity/advanced/event-handlers.html"
msgstr ""

#: ../../components/events.rst:78
# e8cc65e1e7264862a69fa1ba352e502b
msgid "Subscribing using the ``grok`` API"
msgstr ""

#: ../../components/events.rst:82
# 47cab5f32e04413db2aee2a1af1c0d08
msgid "Since the release of Plone 4, this (grok) method is simpler."
msgstr ""

#: ../../components/events.rst:84
# 2899e05325a44d9da2e5c474f7d85368
msgid "Example subscription which subscribes a content type to add and edit events::"
msgstr ""

#: ../../components/events.rst:108
# ec0cb82af2664076bfe51badcab9926d
msgid "Example subscription which subscribes events without context::"
msgstr ""

#: ../../components/events.rst:125
# 8684a4c22a104f1ca7b8e84f8cbcd9f7
msgid ":doc:`Using Grok </components/grok>`"
msgstr ""

#: ../../components/events.rst:130
# 58b3cb3c21954e3cbad46c090c3554e4
msgid "Subscribing using ZCML"
msgstr ""

#: ../../components/events.rst:132
# 35713b5ac2b44188bbfbb7b229b418b2
msgid "Subscribing to a global event using :term:`ZCML`."
msgstr ""

#: ../../components/events.rst:141
# 02f484bb787a48c4937936afd4b8c620
msgid "For this event, the Python code in ``smartcard.py`` would be::"
msgstr ""

#: ../../components/events.rst:149
# ac566bf69f6349faaf2c744b352cbf4b
msgid "Custom event example subscribing to all ``IMyEvents`` when fired by ``IMyObject``::"
msgstr ""

#: ../../components/events.rst:158
# 30117fd88190481cbe8760f2216492ab
msgid "Life cycle events example::"
msgstr ""

#: ../../components/events.rst:169
# d517eb0735204316a58935dac4e74529
msgid "Subscribing using Python"
msgstr ""

#: ../../components/events.rst:171
# ec0a11fb42654bf08b29b498f047eea0
msgid "The following subscription is valid through the process life cycle. In unit tests, it is important to clear test event handlers between the test steps."
msgstr ""

#: ../../components/events.rst:193
# fe790f9cf8b14ddeb9f6d051f25aaf8c
msgid "Firing an event"
msgstr ""

#: ../../components/events.rst:195
# fd2f5259c2044c31b09fea99e348eec8
msgid "Use ``zope.event.notify()`` to fire event objects to their subscribers."
msgstr ""

#: ../../components/events.rst:197
# 59d47cb01ea743dabb0160cf5b1afe52
msgid "Example of how to fire an event in unit tests::"
msgstr ""

#: ../../components/events.rst:207
# 50cb3ba61eb545f2a98bf05f9cd8bb6b
msgid "Event types"
msgstr ""

#: ../../components/events.rst:210
# ffc44e73259f41499397eb321cac3901
msgid "*Creation* events"
msgstr ""

#: ../../components/events.rst:214
# 85c5e5f688ce4603b7571cf0368a66b8
msgid "``Products.Archetypes.interfaces.IObjectInitializedEvent``"
msgstr ""

#: ../../components/events.rst:213
# 5d28ecc1e4524e7a9eebe416eec8fd95
msgid "is fired for an Archetypes-based object when it's being initialised; i.e.  when it's being populated for the first time."
msgstr ""

#: ../../components/events.rst:218
# a9cfa31421764a4780a135f692d98721
msgid "``Products.Archetypes.interfaces.IWebDAVObjectInitializedEvent``"
msgstr ""

#: ../../components/events.rst:217
# 332869bd8944484fa028b348a462a8e5
msgid "is fired for an Archetypes-based object when it's being initialised via WebDAV."
msgstr ""

#: ../../components/events.rst:222
# 7138407dfa62479e937b6e74dd4f53fc
msgid "``zope.lifecycleevent.IObjectCreatedEvent``"
msgstr ""

#: ../../components/events.rst:221
# e91da9153a6c414482f5d049ea6f3d9f
msgid "is fired for all Zopeish objects when they are being created (they don't necessarily need to be content objects)."
msgstr ""

#: ../../components/events.rst:226
# 3f744e30337643ef8f7ebf8f0feb2399
msgid "Archetypes and Zope 3 events might not be compatible with each other. Please see links below."
msgstr ""

#: ../../components/events.rst:229
# 599d79ee8efc40178ab4bd23e3812bc0
msgid "Other resources:"
msgstr ""

#: ../../components/events.rst:231
# e82e73c444ad410caab48f89ed833689
msgid "http://plone.org/documentation/manual/developer-manual/archetypes/other-useful-archetypes-features/how-to-use-events-to-hook-the-archetypes-creation-process"
msgstr ""

#: ../../components/events.rst:233
# 02dc2d37c68342f3a3803ec8146d100c
msgid "http://n2.nabble.com/IObjectInitializedEvent-tp4784897p4784897.html"
msgstr ""

#: ../../components/events.rst:237
# 3a9d24d8c4fb402b822e6e475003944e
msgid "*Modified* events"
msgstr ""

#: ../../components/events.rst:239
# 02c7224b7a0d476f96865c403da9b7e1
msgid "Two different content event types are available and might work differently depending on your scenario:"
msgstr ""

#: ../../components/events.rst:244
# f5295146454541ff86cbc67ac3669d2f
msgid "``Products.Archetypes.interfaces.IObjectEditedEvent``"
msgstr ""

#: ../../components/events.rst:243
# 9fadbb8bef1d4522a1b461ed9216eb22
msgid "called for Archetypes-based objects that are not in the creation stage any more."
msgstr ""

#: ../../components/events.rst:248
# 8660a03145434f49b4039d3c3ff9a302
msgid "``Products.Archetypes.interfaces.IObjectEditedEvent`` is fired after ``reindexObject()`` is called. If you manipulate your content object in a handler for this event, you need to manually reindex new values, or the changes will not be reflected in the ``portal_catalog``."
msgstr ""

#: ../../components/events.rst:254
# 919abdc074e543acb65dade41b5c8443
msgid "``zope.lifecycleevent.IObjectModifiedEvent``"
msgstr ""

#: ../../components/events.rst:254
# 83c939ade7754efb98d8c3077335eabd
msgid "called for creation-stage events as well, unlike the previous event type."
msgstr ""

#: ../../components/events.rst:257
# cf53c09b448c4c67a130c3fe77d0cc7c
msgid "``Products.Archetypes.interfaces.IWebDAVObjectEditedEvent``"
msgstr ""

#: ../../components/events.rst:257
# 178f19cc1449441691d9a45d9909b6e1
msgid "called for Archetypes-based objects when they are being edited via WebDAV."
msgstr ""

#: ../../components/events.rst:260
# 89f4867f9e2d4347928ef97aa82e0b12
msgid "``Products.Archetypes.interfaces.IEditBegunEvent``"
msgstr ""

#: ../../components/events.rst:260
# 666ac2a1647e4b2183d5471cb97dc7ed
msgid "called for Archetypes-based objects when an edit operation is begun."
msgstr ""

#: ../../components/events.rst:264
# 4d43765192c740239a765a09173c9982
msgid "``Products.Archetypes.interfaces.IEditCancelledEvent``"
msgstr ""

#: ../../components/events.rst:263
# 6d2f91c41b7a4d4f91b4346c2458a955
msgid "called for Archetypes-based objects when an edit operation is canceled."
msgstr ""

#: ../../components/events.rst:267
# c905cb5c5d644e3d84c241e60dfdb917
msgid "*Delete* events"
msgstr ""

#: ../../components/events.rst:269
# a34fd848af014bdfb8e9f26af99dd286
msgid "Delete events can be fired several times for the same object. Some delete event transactions are rolled back."
msgstr ""

#: ../../components/events.rst:272
# d7f1da0d000c4bd0bd2e26004a8a9a35
msgid "Read more about Delete events in `this discussion <http://plone.293351.n2.nabble.com/Event-on-object-deletion-td3670562.html>`_."
msgstr ""

#: ../../components/events.rst:275
# 79d721126b9c4244be92a3d9c72f1807
msgid "*Copy* events"
msgstr ""

#: ../../components/events.rst:278
# 693c558f012343d3934d1a2ff27e07f0
msgid "``zope.lifecycleevent.IObjectCopiedEvent``"
msgstr ""

#: ../../components/events.rst:278
# eac2024ae2c9460fa6bf67a06715ce3e
msgid "is triggered when an object is copied."
msgstr ""

#: ../../components/events.rst:281
# df1f6d18c86a4f97b92da22118216d6a
msgid "*Workflow* events"
msgstr ""

#: ../../components/events.rst:284
# 943f42d3461f49a48446987f0068d731
msgid "``Products.DCWorkflow.interfaces.IBeforeTransitionEvent``"
msgstr ""

#: ../../components/events.rst:284
# d64134fb06014b83b13140fb96804305
msgid "is triggered before a workflow transition is executed."
msgstr ""

#: ../../components/events.rst:287
# e872b7dd1ac64f2ba77b769f12f1b07a
msgid "``Products.DCWorkflow.interfaces.IAfterTransitionEvent``"
msgstr ""

#: ../../components/events.rst:287
# 2122cb93b4ba4fab8c379f46f3d66440
msgid "is triggered after a workflow transition has been executed."
msgstr ""

#: ../../components/events.rst:289
# 006aba73075d43cd9c31e92008147b86
msgid "The DCWorkflow events are low-level events that can tell you a lot about the previous and current states."
msgstr ""

#: ../../components/events.rst:295
# 7b2011ed758a4fe9a98f7cbf34c0d8d5
msgid "``Products.CMFCore.interfaces.IActionSucceededEvent``"
msgstr ""

#: ../../components/events.rst:293
# 615c7e31aaf04015bb4ae5f90a76b03a
msgid "this is a higher level event that is more commonly used to react after a workflow action has completed."
msgstr ""

#: ../../components/events.rst:298
# 4dbecd6bd45640fa9997cde30de03fca
msgid "*Zope startup* events"
msgstr ""

#: ../../components/events.rst:302
# f62c65ccf42c40e29559215273180e37
msgid "``zope.processlifetime.IProcessStarting``"
msgstr ""

#: ../../components/events.rst:301
# 1761e48a7af74efc871133b1c54f88af
msgid "is triggered after component registry has been loaded and Zope is starting up."
msgstr ""

#: ../../components/events.rst:306
# d579489419864036b5ac9641fc23ce31
msgid "``zope.processlifetime.IDatabaseOpened``"
msgstr ""

#: ../../components/events.rst:305
# 7144f72a42844b8380918a28302e5bb2
msgid "is triggered after the main ZODB database has been opened."
msgstr ""

#: ../../components/events.rst:309
# e84f23d99b8c4280a9e5f4544a34e8f3
msgid "Asynchronous event handling"
msgstr ""

#: ../../components/events.rst:311
# b7e8d821249849e0b016ca34fae0d0bf
msgid "http://stackoverflow.com/questions/15875088/running-plone-subscriber-events-asynchronously"
msgstr ""

#: ../../components/events.rst:314
#: ../../components/interfaces.rst:110
# f8f503d4787c495eb38f8bdcf8322ed1
# 1872a1530aac4bb3a7fe253a163f4e03
msgid "See also"
msgstr ""

#: ../../components/events.rst:316
# 252fbda2ef7946a1bc89617fd9a0ce7f
msgid "http://pypi.python.org/pypi/zope.event/3.4.1"
msgstr ""

#: ../../components/events.rst:318
# 331882c704df4740b58d3b071bea206b
msgid "http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_zope/subscriber/index.html"
msgstr ""

#: ../../components/events.rst:320
# 513cfcca65d34b6d93a5e78b76d8d17f
msgid "``zope.component.registry``"
msgstr ""

#: ../../components/genericsetup.rst:3
# 7680f9b650c14399859f736a48d1407c
msgid "Add-on installation and export framework: GenericSetup"
msgstr ""

#: ../../components/genericsetup.rst:7
# f47944afb58c49e1b3677740e5533e1b
msgid "GenericSetup is a framework to modify the Plone site during add-on product installation and uninstallation. It provides XML-based rules to change the site settings easily."
msgstr ""

#: ../../components/genericsetup.rst:16
# d43f5e4fbc6746ad9d582ed865b8716a
msgid "GenericSetup is an XML-based way to import and export Plone site configurations."
msgstr ""

#: ../../components/genericsetup.rst:18
# ba0f9fe9e4c945808a1a98036e4b479d
msgid "It is mainly used to prepare the Plone site for add-on products, by:"
msgstr ""

#: ../../components/genericsetup.rst:20
# 975be62e05b3437993ddd3c0eab5313f
msgid "registering CSS files,"
msgstr ""

#: ../../components/genericsetup.rst:21
# 2dae5dab97214e969bf9caa73ebf3dfc
msgid "registering Javascript files,"
msgstr ""

#: ../../components/genericsetup.rst:22
# d2163b5c539f4f7998c149e58d48c972
msgid "setting various properties,"
msgstr ""

#: ../../components/genericsetup.rst:23
# 2d3b660d6f4c4c0faa646ca5048d8edc
msgid "registering portlets,"
msgstr ""

#: ../../components/genericsetup.rst:24
# 334259611f2341ada7bf71418b6e74d5
msgid "registering portal_catalog search query indexes,"
msgstr ""

#: ../../components/genericsetup.rst:25
# 7ad65cac1a754bac92775027b057e65d
msgid "...and so on..."
msgstr ""

#: ../../components/genericsetup.rst:27
# 93734bfd032b4282b95f0cb45ea86fd7
msgid "GenericSetup is mostly used to apply add-on-specific changes to the site configuration, and to enable add-on-specific behavior when the add-on installer is run."
msgstr ""

#: ../../components/genericsetup.rst:31
# 05caf469e7a74b4bbd6c20ce76c466fd
msgid "GenericSetup XML files are usually in a ``profiles/default`` folder inside the add-on product."
msgstr ""

#: ../../components/genericsetup.rst:34
# 75addd41a76c4ed5a7e62417d4aa5057
msgid "All run-time configurable items, like viewlets order through ``/@@manage-viewlets`` page, are made repeatable using GenericSetup profile files."
msgstr ""

#: ../../components/genericsetup.rst:38
# 6dc58bef9b4c49579217fe5eb0f99c01
msgid "You do not need to hand-edit GenericSetup profile files. You can always change the configuration options through Plone or using the Zope Management Interface. Then you can export the resulting profile as an XML file, using the *Export* tab in the ``portal_setup`` ZMI tool."
msgstr ""

#: ../../components/genericsetup.rst:44
# f267e40ae50d421a9d63f8221d69849d
msgid "Directly editing XML profile files does not change anything on the site, even after Zope restart. This is because run-time configurable items are stored in the database. If you edit profile files, you need reimport edited files using the ``portal_setup`` tool or rerun the add-on product installer in Plone control panel. This import will read XML files and change Plone database accordingly."
msgstr ""

#: ../../components/genericsetup.rst:55
# 8ecf83c916f74046b0f422ea0ac8d31d
msgid "Difference between ZCML and GenericSetup"
msgstr ""

#: ../../components/genericsetup.rst:57
# 758fe433de0e4ce08025426e5d106cc8
msgid "ZCML changes affect loaded Python code in **all** sites inside Zope whereas GenericSetup XML files affect only one Plone site and its database. GenericSetup XML files are always database changes."
msgstr ""

#: ../../components/genericsetup.rst:62
# 521dcaff688b410b8036d7b48c9c5a3e
msgid "Relationship between ZCML and site-specific behavior is usually done using :doc:`layers </views/layers>`. ZCML directives, like viewlets and views, are registered to be active on a certain layer only using ``layer`` attribute. When GenericSetup XML is imported through ``portal_setup``, or the product add-on installer is run for a Plone site, the layer is activated for the particular site only, enabling all views registered for this layer."
msgstr ""

#: ../../components/genericsetup.rst:74
# 511c719b0aad4810b75f4b1f1b865411
msgid "The ``metadata.xml`` file (add-on dependency and version information) is read during Plone start-up. If this file has problems your add-on might not appear in the installer control panel."
msgstr ""

#: ../../components/genericsetup.rst:78
# f67bb87048dc4531b6437534ae86a8cd
msgid "`GenericSetup tutorial <http://plone.org/documentation/tutorial/genericsetup>`_"
msgstr ""

#: ../../components/genericsetup.rst:80
# 800a356860a74d88815c388386e9b222
msgid "`GenericSetup product page <http://pypi.python.org/pypi/Products.GenericSetup/1.4.5>`_."
msgstr ""

#: ../../components/genericsetup.rst:82
# e0f93ab7a1a149a4ac1de646990c69e2
msgid "`Source code <http://svn.zope.org/Products.GenericSetup/trunk/Products/GenericSetup/README.txt?rev=87436&view=auto>`_."
msgstr ""

#: ../../components/genericsetup.rst:0
# 931b373b57cf45df8a7b5cba103e891a
msgid "Todo"
msgstr ""

#: ../../components/genericsetup.rst:84
# 2950d4f737c9406591ca59b1dc24b17b
msgid "should the link be specifically to rev=87436?"
msgstr ""

#: ../../components/genericsetup.rst:88
# 2082c1f24f4a4ab7b6059e5da835b208
msgid "Creating a profile"
msgstr ""

#: ../../components/genericsetup.rst:90
# fb7904f26a49484a93a13c28afc3f5dc
msgid "You use ``<genericsetup>`` directive in your add-on product's ``configure.zcml``. The name for the default profile executed by the Plone add-on installer is \"default\". If you need different profiles for e.g. unit testing you can declare them here."
msgstr ""

#: ../../components/genericsetup.rst:95
# 8addde3db1bb479296a3e8f992ec4124
msgid "Profile XML files go in the ``profiles/default`` folder inside your add-on product."
msgstr ""

#: ../../components/genericsetup.rst:118
# 3a5210b27ea944f7973b1f314c4af881
msgid "Add-on-specific issues"
msgstr ""

#: ../../components/genericsetup.rst:120
# a9e0664617b0490ab77e03fc4de1440a
msgid "Add-on products may contain:"
msgstr ""

#: ../../components/genericsetup.rst:122
# 27a83de0d1fd49a7b71b8e379334d5bd
msgid "A default GenericSetup XML profile which is automatically run when the product is installed using the quick-installer. The profile name is \"default\"."
msgstr ""

#: ../../components/genericsetup.rst:126
# bf980e08db5e4fb8935cbbc7ff0e6c4d
msgid "Other profiles which the user may install using the ``portal_setup`` *Import* tab, or which can be manually enabled for unit tests."
msgstr ""

#: ../../components/genericsetup.rst:128
# 3aba54c266dc4e7988510fd27bfafb62
msgid "An \"Import various\" step, which runs Python code every time the GenericSetup XML profile is installed."
msgstr ""

#: ../../components/genericsetup.rst:130
# 46b0c8fdad6848c1b3169a429a86129b
msgid "For more information about custom import steps, see:"
msgstr ""

#: ../../components/genericsetup.rst:132
# 36ebc952fecd44cb8aa7aa1fc5087de2
msgid "http://n2.nabble.com/indexing-of-content-created-by-Generic-Setup-tp4454703p4454703.html"
msgstr ""

#: ../../components/genericsetup.rst:135
# 5070519bea2041978071f45972d195de
msgid "Listing available profiles"
msgstr ""

#: ../../components/genericsetup.rst:146
# 771f447ff99146ffa0b64fc99c6121e4
msgid "Results::"
msgstr ""

#: ../../components/genericsetup.rst:155
# e724051b18654e68b3bca1d92974ca33
msgid "Installing a profile"
msgstr ""

#: ../../components/genericsetup.rst:157
# 985d5ae890b54a0ba752cb4698934822
msgid "This is usually unit test specific question how to enable certain add-ons for unit testing."
msgstr ""

#: ../../components/genericsetup.rst:160
# 102e6dd6d0f647f988b085e2f76017f0
msgid "PloneTestCase.setupPloneSite"
msgstr ""

#: ../../components/genericsetup.rst:162
# 46d09368dda84d95899b8f7ab13fc227
msgid "See *Running add-on installers and extensions profiles for unit tests*."
msgstr ""

#: ../../components/genericsetup.rst:165
# 1230387d73e1461e852c8ac95eb72c49
msgid "Manually"
msgstr ""

#: ../../components/genericsetup.rst:167
# 5b8982706c6d46d086acdee77dc60aa7
msgid "You might want to install profiles manually if they need to be enabled only for certain tests."
msgstr ""

#: ../../components/genericsetup.rst:169
# 20876563fefc4c80ba320c0001ec5b8f
msgid "The profile name is in the format ``profile-${product name}:${profile id}``"
msgstr ""

#: ../../components/genericsetup.rst:171
# 26534176bc174bb6a9e8ec7feea5039f
msgid "Unit testing example::"
msgstr ""

#: ../../components/genericsetup.rst:177
#: ../../components/genericsetup.rst:358
# 8797339a4ec34599825ab87d666f9d49
# 37361451c7284732929c45304d36d531
msgid "Upgrade steps"
msgstr ""

#: ../../components/genericsetup.rst:179
# 5df9db6b5dba4c189129a8da61ecfa55
msgid "If you need to migrate data or settings on new add-on versions"
msgstr ""

#: ../../components/genericsetup.rst:181
# 2666e9f6c54a4e5392665da1be94db5d
msgid "http://stackoverflow.com/questions/15316583/how-to-define-a-procedure-to-upgrade-an-add-on"
msgstr ""

#: ../../components/genericsetup.rst:184
# 5cf411c3143c4bfdbd54865a04d44589
msgid "Uninstall profile"
msgstr ""

#: ../../components/genericsetup.rst:186
# c27f508f340a40e298bd2ef91004b481
msgid "For the theory, see: `<http://plone.org/documentation/kb/genericsetup/creating-an-uninstall-profile>`_"
msgstr ""

#: ../../components/genericsetup.rst:189
# e3775d23f6f84968bf7d10ae29eb484f
msgid "For an example, see the `collective.pdfpeek source code <http://svn.plone.org/svn/collective/collective.pdfpeek/trunk/collective/pdfpeek/profiles/>`_."
msgstr ""

#: ../../components/genericsetup.rst:193
# 8c9bfd74ef8448b6a005b6f27b94ba56
msgid "Dependencies"
msgstr ""

#: ../../components/genericsetup.rst:195
# 3347de5078da4153ad1660971fb2bfcc
msgid "GenericSetup profile can contain dependencies to other add-on product installers and profiles."
msgstr ""

#: ../../components/genericsetup.rst:197
# 1b38fab231e3441a8b8f1004b8e151bb
msgid "`More information about GenericSetup dependencies <http://plone.org/products/plone/roadmap/195/>`_."
msgstr ""

#: ../../components/genericsetup.rst:199
# 564d3b5c9c5f41b7944ee2e929a697f7
msgid "For example, if you want to declare dependency to *collective.basket* add-on product, so that it is automatically installed when your add-on installed you can use the declaration below. This way, you can be sure that all layers, portlets, etc. features which require database changes are usable from *collective.basket* add-on products when your add-on product is run."
msgstr ""

#: ../../components/genericsetup.rst:204
# e8580124a9b7450ea514affd139e70e3
msgid "``metadata.xml``:"
msgstr ""

#: ../../components/genericsetup.rst:216
# 3723e3757e94466393b8a0ba01db0494
msgid "*collective.basket* declares the profile in its configure.zcml:"
msgstr ""

#: ../../components/genericsetup.rst:231
# aa696740cbef4eeeaf199777f0bb6fb2
msgid "Unlike other GenericSetup XML files, ``metadata.xml`` is read on the start-up and this read is cached. Always restart Plone after editing ``metadata.xml``. If your ``metadata.xml`` file contains syntax errors or dependencies to a missing or non-existent product (e.g. due to a typo in a name) your add-on will disappear from the installation control panel."
msgstr ""

#: ../../components/genericsetup.rst:241
# e09f7b3558b24e9894e492e19fb9073c
msgid "The ``Products.*`` Python namespace needs to declare generic setup dependencies specially: You actually do not mention ``Products.xxx`` space."
msgstr ""

#: ../../components/genericsetup.rst:245
# c795fac35db14266890c7b6a1a14c6dc
msgid "To declare dependency to ``Products.Carousel``:"
msgstr ""

#: ../../components/genericsetup.rst:260
# a849783865694ce9adc5f633fc0d0c76
msgid "Custom installer code (``setuphandlers.py``)"
msgstr ""

#: ../../components/genericsetup.rst:262
# 5ca4819ef58f43748420c6098909fc46
msgid "Besides out-of-the-box XML steps which easily provide both install and uninstall, GenericSetup provides a way to run a custom Python code when your add-on product is installed and uninstalled. This is not very straightforward process, though."
msgstr ""

#: ../../components/genericsetup.rst:267
# c9ed88ceed33428298a76a025e6889b5
msgid "The best practice is to create a ``setuphandlers.py`` file which contains function ``setupVarious()`` which runs required Python code to make changes to Plone site object. This function is registerd as a custom ``genericsetup:importStep`` in XML."
msgstr ""

#: ../../components/genericsetup.rst:275
# 30d7560fbe7249d0bcca684320cca369
msgid "When you do custom ``importStep``\\s, remember to write uninstallation code as well."
msgstr ""

#: ../../components/genericsetup.rst:278
# 4ffbb1acb2a3483cba353bba7cad08a9
msgid "However, the trick is that all GenericSetup import steps, including your custom step, are run for *every* add-on product when they are installed. Thus, if your need to run code which is specific **during your add-on install only** you need to use a marker text file which is checked by GenericSetup context."
msgstr ""

#: ../../components/genericsetup.rst:285
# 2d4ac1ec69214ea2be410d04d6b79926
msgid "Also you need to register this custom import step in ``configure.zcml``"
msgstr ""

#: ../../components/genericsetup.rst:303
# 18ed61f6c305463596775d2862ac5e9c
msgid "``setuphandlers.py`` example"
msgstr ""

#: ../../components/genericsetup.rst:330
# 7054c3e6e6aa4f6cb630e62bfd90d024
msgid "And add a dummy text file ``your.package/your/package/profiles/default/your.package.marker.txt``::"
msgstr ""

#: ../../components/genericsetup.rst:335
#: ../../components/genericsetup.rst:346
#: ../../components/genericsetup.rst:544
# ff5b9198fe3942a5a5a1830e3b625b3f
# 9119f7bf6e504dbfa5afd5ca33f08566
# 1eacfe353a24465bb5e309d8fa33aa26
msgid "More information"
msgstr ""

#: ../../components/genericsetup.rst:337
# 23be560a3cd74683b2de37aad35318e1
msgid "http://keeshink.blogspot.com/2009/02/creating-portal-content-in.html"
msgstr ""

#: ../../components/genericsetup.rst:339
# 6cd5701e403c4950884ceeb9d34919cd
msgid "http://maurits.vanrees.org/weblog/archive/2009/12/catalog (unrelated, but contains pointers)"
msgstr ""

#: ../../components/genericsetup.rst:342
# b43a6ab1814447e1bb98b19eb897a57f
msgid "Overriding import step order"
msgstr ""

#: ../../components/genericsetup.rst:344
# 89d2756999714cae9b728785f879af82
msgid "You need ``import_steps.xml``."
msgstr ""

#: ../../components/genericsetup.rst:348
# 2f1ddee2ca5842f9913ef1591efb8f11
msgid "http://plone.293351.n2.nabble.com/Overriding-import-step-order-td2189638.html"
msgstr ""

#: ../../components/genericsetup.rst:350
# 3cea0dc6d1134821a9eda87d74cf5230
msgid "http://dev.communesplone.org/trac/browser/communesplone/urban/trunk/profiles/default/import_steps.xml?rev=5652"
msgstr ""

#: ../../components/genericsetup.rst:353
# bf9fca56b6a545a9a29f33832c4af462
msgid "Controlling the import step execution order"
msgstr ""

#: ../../components/genericsetup.rst:355
# 0034132208bf487593d426e34782ab8b
msgid "http://plone.293351.n2.nabble.com/indexing-of-content-created-by-Generic-Setup-td4454703.html"
msgstr ""

#: ../../components/genericsetup.rst:360
# 726be9db4ffc4ef4b3b9aad2903bd699
msgid "You can define upgrade steps to run code only when someone upgrades your product from version *x* to *y*."
msgstr ""

#: ../../components/genericsetup.rst:363
# c42c870fbf164b0588b37b71dd3439a9
msgid "As an example, let's say that the new version of YOUR.PRODUCT defines a *price* field on a content type *MyType* to be a string, but previously (version 1.1.  and earlier) it was a float. Code that uses this field and assumes it to be a float will break after the upgrade, so you'd like to automatically convert existing values for the field to string."
msgstr ""

#: ../../components/genericsetup.rst:369
# 7121f44757654dc9a193f0f1247ee29a
msgid "(Obviously, you could do this very quickly in a simple script, but having a GenericSetup upgrade step means non-technical people can do it as well. As it turns out, once you have the script, it's easy to put its code in an upgrade step.)"
msgstr ""

#: ../../components/genericsetup.rst:375
# af63590ba6e747bea34fc08ff2a4b02f
msgid "Increment profile version"
msgstr ""

#: ../../components/genericsetup.rst:377
# d01e98b8dc3b45a0bca3dcfdc65dbc99
msgid "First increase the number of the version in the ``profiles/default/metadata.xml``. This version number should be an integer. Package version are different because they add sens like the status of the addon: is it stable, is it in dev, in beta, which branch it is. A profile version indicate only that you have to migrate data in the database."
msgstr ""

#: ../../components/genericsetup.rst:384
# 2370a31b8fcc4738a1a340441fbdd2b0
msgid "Add upgrade step"
msgstr ""

#: ../../components/genericsetup.rst:386
# f7aa141cce5e4ff5a77fcd807440c3f2
msgid "Next we add an upgrade step:"
msgstr ""

#: ../../components/genericsetup.rst:408
# 78c0691812ee4b84a8fd8c2165bb4e9e
msgid "You can use a wildcard character for *source* to indicate an upgrade for any previous version. To run the upgrade step only when upgrading from a specific version, use that version's number."
msgstr ""

#: ../../components/genericsetup.rst:412
# 4ed6944c0da94e74bbd9879508a0f703
msgid "A *sortkey* can be used to indicate the order in which upgrade steps are run."
msgstr ""

#: ../../components/genericsetup.rst:416
# e0266d03b53b45fdb8ebe4cfddaca4ec
msgid "Add upgrade code"
msgstr ""

#: ../../components/genericsetup.rst:418
# 9b4959d359bf48f58074eca3b1f09ff7
msgid "The code for the upgrade method itself is best placed in a *upgrades.py* module::"
msgstr ""

#: ../../components/genericsetup.rst:459
# 12925b4c180a4dde9ca7b51f74f3c66f
msgid "Other examples of using generic setup to run import steps are below"
msgstr ""

#: ../../components/genericsetup.rst:461
# fb0e8b1c48dd42dfb56058654e667324
msgid "If you want to call types.xml use typeinfo::"
msgstr ""

#: ../../components/genericsetup.rst:465
# 57354860e2cc454d85650285efb228fe
msgid "If you want to call workflow.xml use workflow::"
msgstr ""

#: ../../components/genericsetup.rst:469
# 5d5969d646224e93a073bf3b462a04ee
msgid "The ids of the various default import steps are defined in the import_steps.xml of CMFDefault. visit it at http://svn.zope.org/CMF/branches/2.1/CMFDefault/profiles/default/import_steps.xml?logsort=date&rev=78624&view=markup"
msgstr ""

#: ../../components/genericsetup.rst:472
# f69f79aa88ae49e8b8ea3fc2b081ded0
msgid "XXX Fix the link above"
msgstr ""

#: ../../components/genericsetup.rst:474
# 4d6e9b63c4e644b79d291164a07b5189
msgid "After restarting Zope, your upgrade step should be visible in the ZMI: The *portal_setup* tool has a tab *Upgrades*. Select your product profile to see which upgrade steps Zope knows about for your product."
msgstr ""

#: ../../components/genericsetup.rst:478
# ce32fb7dfed645f1bd53f3cd14adba78
msgid "You can create many upgrade steps under one migration. This is useful when you want to have the ability to re-run some parts of the migration and make your code more re-useable (for example cook css resource of your theme)."
msgstr ""

#: ../../components/genericsetup.rst:482
# 90a2d9821772473ca4ba4735b0d7dd9f
msgid "Here is an example of many upgrade steps you can have to achieve on a site policy:"
msgstr ""

#: ../../components/genericsetup.rst:538
# 7b1e31caeb1e40ff8e85d089dd9d7546
msgid "Add-on product appears twice in the installer list"
msgstr ""

#: ../../components/genericsetup.rst:540
# e0b4cde203624a9493ff7cd673467d99
msgid "This happens if you are developing your own add-on and keep changing things. You have an error in your add-on product ZCML code which causes portal_quickinstaller to have two entries."
msgstr ""

#: ../../components/genericsetup.rst:546
# ca597724a5a442119176eaaaa0ac3f54
msgid "http://plone.293351.n2.nabble.com/Product-twice-in-quickinstaller-td5345492.html#a5345492"
msgstr ""

#: ../../components/genericsetup.rst:549
# 6141084d19c14e14851c248ce32830ab
msgid "Preventing uninstall"
msgstr ""

#: ../../components/genericsetup.rst:551
# d91b54520a294b17a5a47d5ae11fb816
msgid "You might want to prevent your add-on product uninstall for some reason."
msgstr ""

#: ../../components/genericsetup.rst:553
# 725d6367b7904dac9e4f47108b76d393
msgid "Example:"
msgstr ""

#: ../../components/genericsetup.rst:566
# 0bef48d2f1db4c2abc2b4199c2762a60
msgid "This example if for Extensions/install.py, old Plone 2 way of writing installers"
msgstr ""

#: ../../components/genericsetup.rst:571
# d6eb1cedd49e41668be654f2cfcd74dc
msgid "Plone GenericSetup Reference"
msgstr ""

#: ../../components/genericsetup.rst:574
# 0da72c43b6be4c1691481b7c2be707dc
msgid "portlets.xml"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.portlets-2.4.5-py2.7.egg/plone/app/portlets/exportimport/portlets.py:docstring of plone.app.portlets.exportimport.portlets:1
# b294008ec95d4ca6bf502bc5727a561f
msgid "When creating custom portlet managers, you will need to extend existing portlets to be addable to that manager: ::"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.portlets-2.4.5-py2.7.egg/plone/app/portlets/exportimport/portlets.py:docstring of plone.app.portlets.exportimport.portlets:8
# c49a0c291c27472b872417b772444700
msgid "You can also change the title and description of the portlet with the extend attribute: ::"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.portlets-2.4.5-py2.7.egg/plone/app/portlets/exportimport/portlets.py:docstring of plone.app.portlets.exportimport.portlets:17
# 91846730584b4bfb9ede04b08fe534bd
msgid "Remove a portlet definition using the 'remove' attribute so that it can no longer be added via @@manage-portlets. This does not remove any assignments: ::"
msgstr ""

#: ../../components/genericsetup.rst:579
# 2d84d3a94aa546b784a490c53de971cc
msgid "viewlets.xml"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.viewletmanager-2.0.4-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:1
# 53df3ea076ec4f8da5938b81765c8f8b
msgid "The following examples would all be added into the viewlets.xml file."
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.viewletmanager-2.0.4-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:3
# df9ac32bfd9e4faf8852a345947d38da
msgid "Re-order viewlets::"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.viewletmanager-2.0.4-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:11
# 23d2e848f6e8481b89048319b79c38c2
msgid "Move a viewlet using insert-before and insert-after (this will only affect the skinname that is specified, in this case 'My Custom Theme')::"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.viewletmanager-2.0.4-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:20
# 452edd57c5904da18352850e3ffe6b73
msgid "Hide a viewlet (here we hide the colophon for 'My Custom Theme')::"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.viewletmanager-2.0.4-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:27
# 7ccef8028ad34b9fb069667dc4a249a3
msgid "Unhide a specific viewlet using the remove attribute::"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.viewletmanager-2.0.4-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:34
# 2d13192170a640c08ea8f5d2d7389b41
msgid "Unhide all viewlets for a given manager using the purge attribute::"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.viewletmanager-2.0.4-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:39
# f48ff4982b694d10a150eecc93d6646d
msgid "Hide a viewlet for all skins::"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/plone.app.viewletmanager-2.0.4-py2.7.egg/plone/app/viewletmanager/exportimport/storage.py:docstring of plone.app.viewletmanager.exportimport.storage:45
# 1430e71d22704b3f98693e0f38321186
msgid "Pro Tip: Using skinname=\"*\" currently only works if the manager has already been registered in each skin (see Plone Trac ticket #7166)"
msgstr ""

#: ../../components/genericsetup.rst:584
# 3f78c6acd9ee4168b16facff3a24bb6b
msgid "cssregistry.xml"
msgstr ""

#: ../../components/genericsetup.rst:586
#: ../../components/genericsetup.rst:591
#: ../../components/genericsetup.rst:596
# 942ed63198f146bfa2e8b02f3e4bccd0
# 6bdca73c97ac47198dbe38142d357c57
# 9e333f154e264b88b49036d19d3eee9f
msgid "see :ref:`resourceregistries`"
msgstr ""

#: ../../components/genericsetup.rst:589
# 7dfce793282e4340838ca3ae8aa57487
msgid "jsregistry.xml"
msgstr ""

#: ../../components/genericsetup.rst:594
# aa60d602b8b3473984b6e6fbd22a6645
msgid "kssregistry.xml"
msgstr ""

#: ../../components/genericsetup.rst:601
# 6459dd24d38a4deaa01893c8c35691a6
msgid "Resource Registries"
msgstr ""

#: ../../components/genericsetup.rst:607
# 5d5de7fc344b4b17bafd2c186f6d89e4
msgid "Content Generation"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/Products.GenericSetup-1.7.4-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content:1
# 7cca07942fdc4661a34aea678520429f
msgid "Filesystem exporter / importer adapters."
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/Products.GenericSetup-1.7.4-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:1
# 1362cbb93f8542658a025840cbd1112a
msgid "Tree-walking exporter / importer for \"folderish\" types."
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/Products.GenericSetup-1.7.4-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:3
# 7f272756d5274e13992a51507d99c63c
msgid "Folderish instances are mapped to directories within the 'structure' portion of the profile, where the folder's relative path within the site corresponds to the path of its directory under 'structure'."
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/Products.GenericSetup-1.7.4-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:7
# 2235af7599714303aec6bd2029eff6dd
msgid "The subobjects of a folderish instance are enumerated in the '.objects' file in the corresponding directory.  This file is a CSV file, with one row per subobject, with the following wtructure::"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/Products.GenericSetup-1.7.4-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter:13
# 7b05e0cb8a52478f9982454f8ce1a970
msgid "Subobjects themselves are represented as individual files or subdirectories within the parent's directory."
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/Products.GenericSetup-1.7.4-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter.export:1
#: ../../../../../../../buildout-cache/python2.7/eggs/Products.GenericSetup-1.7.4-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter.listExportableItems:1
# 70747db612784ff68d9af1b3a2ccaaa1
# ab9c2721f3a04109b76ed1b226e38a85
msgid "See IFilesystemExporter."
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/Products.GenericSetup-1.7.4-py2.7.egg/Products/GenericSetup/content.py:docstring of Products.GenericSetup.content.FolderishExporterImporter.import_:1
# 9fa1fe5cb047417dbd2e4af575f1af26
msgid "See IFilesystemImporter."
msgstr ""

#: ../../components/genericsetup.rst:614
# 39b39bb52f9f4909815386a5aa94440a
msgid "Generic Setup files"
msgstr ""

#: ../../components/genericsetup.rst:617
# 2cba2c855e8a44ad96d22aaa3ff129e6
msgid "sharing.xml"
msgstr ""

#: ../../components/genericsetup.rst:619
# 4f0c8beb51e04ee38db0c39a20055981
msgid "The sharing.xml file let you add custom roles to the sharing tab. For reference, visit: :doc:`Local Roles </security/local_roles>`."
msgstr ""

#: ../../components/genericsetup.rst:623
# 70654d6b11644aa290e868328fb12955
msgid "tinymce.xml"
msgstr ""

#: ../../components/genericsetup.rst:626
# 9e36987030834181951bc0cdd0d68657
msgid "propertiestool.xml"
msgstr ""

#: ../../components/genericsetup.rst:627
# ab8aaa754b404fd5b03364ca440c4ca2
msgid "In the propertiestool.xml you can change all values of the portal_properties."
msgstr ""

#: ../../components/genericsetup.rst:629
# 6dfa24e9e04d4880902f888609dd3d6a
msgid "take a look at: http://plone.org/documentation/manual/developer-manual/generic-setup/reference/properties-ref"
msgstr ""

#: ../../components/genericsetup.rst:632
# d876651eb21e47098566655c2996a71e
msgid "metadata.xml"
msgstr ""

#: ../../components/genericsetup.rst:635
# 96a39cfaa8c74f12a36458ac707b9786
msgid "actions.xml"
msgstr ""

#: ../../components/genericsetup.rst:638
# 700e0121edca414bb24af95b069b9a80
msgid "skins.xml"
msgstr ""

#: ../../components/genericsetup.rst:641
# b2eceaf41a5b4ed0876861268337a1cc
msgid "workflows.xml"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/Products.DCWorkflow-2.2.4-py2.7.egg/Products/DCWorkflow/exportimport.py:docstring of Products.DCWorkflow.exportimport:1
# 70366e71ea254a9a87a61dc6651069d5
msgid "DCWorkflow export / import support."
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/Products.DCWorkflow-2.2.4-py2.7.egg/Products/DCWorkflow/exportimport.py:docstring of Products.DCWorkflow.exportimport:3
# f299a39c48914d41bfe4f8126245685b
msgid "$Id: exportimport.py 121521 2011-05-03 13:13:36Z erico_andrei $"
msgstr ""

#: ../../components/genericsetup.rst:646
# c9e81941de8c4000857043f2edee1781
msgid "repositorytool.xml"
msgstr ""

#: ../../../../../../../buildout-cache/python2.7/eggs/Products.CMFEditions-2.2.8-py2.7.egg/Products/CMFEditions/exportimport/repository.py:docstring of Products.CMFEditions.exportimport.repository.RepositoryToolXMLAdapter:1
# c8af28e23ebb4f34a92f54d7d0de1ddf
msgid "Mode in- and exporter for RepositoryTool."
msgstr ""

#: ../../components/genericsetup.rst:652
# 057c750b0384428c9f8415599b8f48d5
msgid "contentrules.xml"
msgstr ""

#: ../../components/genericsetup.rst:658
# 0c7935daf13a4fcf9d9fb2fe17c76e44
msgid "pluginregistry.xml"
msgstr ""

#: ../../components/genericsetup.rst:660
# c9e1f5eae9094279b9f88374bdd4b934
msgid "This configures PAS plugin orderings and active plugins. It isn't part of Plone itself, it is used by other frameworks and can be used in Plone with a little extra configuration."
msgstr ""

#: ../../components/genericsetup.rst:664
# 204e89a6a00546078be3a338205c8376
msgid "First, you need a monkey patch in your ``__init__.py``` to point the importer at where Plone keeps its PAS plugins."
msgstr ""

#: ../../components/genericsetup.rst:675
# 470e4093f9e54012a86437168b314836
msgid "Secondly, code to handle the import step needs to be activated in Plone:"
msgstr ""

#: ../../components/genericsetup.rst:686
# 2877c4f4110c406b92404860d72649c3
msgid "Now you can use ``pluginregistry.xml`` in your generic setup profiles:"
msgstr ""

#: ../../components/genericsetup.rst:733
# ef1d7de038d54015810e7dc4c457d484
msgid "Best Practices"
msgstr ""

#: ../../components/genericsetup.rst:735
# 04c53e245a9e4918891cc8e89e67e7ae
msgid "When importing items such as property sheets, make sure not to override other profile settings by setting the purge attribute to False. This will add the items listed to the property instead of resetting the property. Example:"
msgstr ""

#: ../../components/genericsetup.rst:747
# ddb7c6fbb0fe4825b341e3b21c55372f
msgid "Only use the configuration that you need. When you export your site's configuration, it will include things that you don't need. For example, if you needed to change only the 'Allow anonymous to view about' property, this is what your propertiestool.xml would look like:"
msgstr ""

#: ../../components/grok.rst:3
# c6f09abdd6ee43048ab737bfb0977b53
msgid "Grok framework"
msgstr ""

#: ../../components/grok.rst:7
# 01f7cb95602744f7aefb105b5ded8762
msgid "Using Grok framework in Plone programming. Grok provides  Dont-Repeat-Yourself API to create Zope 3 components easier."
msgstr ""

#: ../../components/grok.rst:16
# f72092cc7da546428f0e7bfd0d570288
msgid "Grok is a project to give sane, easy to use, API to Zope 3 systems. It exists as standalone, but Plone compatible port five.grok is available for Plone 3.3 and onwards."
msgstr ""

#: ../../components/grok.rst:19
# 9c4a0ad569374505944ec918a23c1cbf
msgid "Benefits over using pure Zope 3 APIs"
msgstr ""

#: ../../components/grok.rst:21
# d87896fd11384793a67475e27c2cee40
msgid "No ZCML files or XML sit-ups needed (except bootstrapping one configure.zcml file)"
msgstr ""

#: ../../components/grok.rst:23
# 2a388a5b6188438b98aa03fb017f92b3
msgid "More things are automatic and less explicit hand-written code needed. E.g. template file and view class are automatically matched."
msgstr ""

#: ../../components/grok.rst:25
# d8ccb1eec8b841cb9424b5de95df930b
msgid "Less code generation"
msgstr ""

#: ../../components/grok.rst:27
# 4285b3d125be472c8cb4b1a2513a39c9
msgid "Grok will automatically scan all .py files in your product and run registration code in them. This way you can use Python decorators and magical classes to perform tasks which before needed to have hand written registration code."
msgstr ""

#: ../../components/grok.rst:34
# 9acd02a178ba43ba830ae37bebe249c2
msgid "http://grok.zope.org/"
msgstr ""

#: ../../components/grok.rst:36
# feceedc633f54cb9bfa936ee5db479a9
msgid "http://pypi.python.org/pypi/five.grok"
msgstr ""

#: ../../components/grok.rst:39
# 37025a3b1d5a416fb387074e034afa2b
msgid "Tutorial"
msgstr ""

#: ../../components/grok.rst:41
# 727a6e1d7a1048c89bc6402cc527ca2b
msgid "http://plone.org/products/dexterity/documentation/manual/five.grok"
msgstr ""

#: ../../components/grok.rst:43
# cc7b32a74de946279d796186c4e76082
msgid "http://www.martinaspeli.net/articles/using-grok-techniques-in-plone"
msgstr ""

#: ../../components/grok.rst:46
# 87f28954e816488cb9db90529a984555
msgid "Using Grok in your package"
msgstr ""

#: ../../components/grok.rst:49
# 6b407c85757c42f5ac47accaac5f657c
msgid "configure.zcml - register your package for grokking"
msgstr ""

#: ../../components/grok.rst:51
# 42bdbe3ea40d40e5a30b337085dc7a4c
msgid "To enable grok'ing for your package:"
msgstr ""

#: ../../components/grok.rst:53
# 121e7c99ae014ac9a3eb442d6cbfe75b
msgid "The top-level ``configure.zcml`` must include the ``grok`` namespace and the ``grok:grok`` directive. You do not need to put this directive subpackages. This directive scans your package source tree recursively for grok'ed files."
msgstr ""

#: ../../components/grok.rst:58
# 0fe69d5696be411ca3213696dfc75e07
msgid "The package must be loaded using ``setup.py`` auto-include, NOT using a ``zcml =`` section in ``buildout.cfg``. Otherwise templates are not loaded."
msgstr ""

#: ../../components/grok.rst:62
# 3ba04e964e514f1d9b4470df606b0989
msgid "Optionally, add ``templates`` and ``static`` folders to your package root."
msgstr ""

#: ../../components/grok.rst:64
# 211df75d5ff74570832f62ca20015dd7
msgid "You still need to include subpackages for old-fashioned :term:`ZCML` configurations."
msgstr ""

#: ../../components/grok.rst:67
# 5ab372aa15674bdea89a64d8bb94330a
msgid "Example"
msgstr ""

#: ../../components/grok.rst:90
# 14d0a21dc63f4ac4a047ee6bfa30a321
msgid "If you are using components from other packages you might also want to add"
msgstr ""

#: ../../components/grok.rst:96
# 9d7ed53afc15440ebc51258d92f08f2e
msgid "This makes the ``configure.zcml`` and thus Python code of all modules listed in ``setup.py`` *install_requires* section is loaded before your module is being processed."
msgstr ""

#: ../../components/grok.rst:101
# ee72e2760f3e402ca8e33001c2672d24
msgid "setup.py - include five.grok package dependency for download"
msgstr ""

#: ../../components/grok.rst:103
# ea55c9184a0d4d1890ef1c2a6c3d287b
msgid "You still need to get ``five.grok`` package to your buildout."
msgstr ""

#: ../../components/grok.rst:105
# b34f17351358461794da76a636c24f63
msgid "Edit your Python egg ``setup.py`` file and list ``five.grok`` as dependency::"
msgstr ""

#: ../../components/grok.rst:109
# 568f0a0b7a2d4269a634cfabd688e348
msgid "Re-run buildout. Now buildout should download ``five.grok`` for PyPi and activate it for you."
msgstr ""

#: ../../components/grok.rst:111
# 776759956a254997ab28da821a2f3fe5
msgid "If you are using Plone 4.1 or older you also need `Dexterity extends = line pindowns in your buildout <http://plone.org/products/dexterity/documentation/how-to/install>`_. Otherwise you may get *Version Conflict* errors when running buildout."
msgstr ""

#: ../../components/grok.rst:115
# 46e6bcc5b85d4754baada8cda294ed02
msgid "Plone 4.3 migration and five.grok dependency"
msgstr ""

#: ../../components/grok.rst:117
# 6af05f7096a14c5d86212a5da638fe0d
msgid "Please see `Plone 4.2 -> 4.3 Dexterity upgrade guide <http://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-4.2-to-4.3/dexterity-optional-extras>`_ first."
msgstr ""

#: ../../components/grok.rst:120
# e96236bbcef84edf977f00b91d4a4825
msgid "Migrating Dexterity and z3c.forms to Plone 4.3"
msgstr ""

#: ../../components/grok.rst:122
# a4a1950421444f28a585ff9047bac742
msgid "Plone 4.3 ships with Dexterity. ``five.grok`` is a huge dependency with a lot of code of which maintenance cannot be guaranteed in the future (`See grok.zope.org <http://grok.zope.org>`_, `discussion <http://plone.293351.n2.nabble.com/The-grokless-madness-and-unable-to-create-a-simple-form-tp7564179p7564184.html>`_). Because Plone community cannot commit to maintain this code, but we still want to use the best goodies of grok based development, some compromises was made for Plone 4.3 regarding grok style forms and directives."
msgstr ""

#: ../../components/grok.rst:128
# bf6a765468c8448c96c528d2c4f574e0
msgid "You can include ``five.grok`` as a dependency, as you have done this far, but it is not going to be in Plone default installation in foreseeable future. Please see migration notes."
msgstr ""

#: ../../components/grok.rst:131
# 616e4faef2c3490c8a1a60eb1aed57a0
msgid "``grok()`` declarations, like ``grok.name()`` in classes are not supported by Plone 4.3 out of the box"
msgstr ""

#: ../../components/grok.rst:133
# 039efa420fca4cc788173ff22c612ec7
msgid "``plone.directives.form`` goodies distributed to two supported packages: ``plone.supermodel`` and ``plone.autoform``"
msgstr ""

#: ../../components/grok.rst:136
# 01e2685d9ec541b89b9610518ebd8166
msgid "To make your code Plone 4.3 compatible, grokless way do imports as following::"
msgstr ""

#: ../../components/grok.rst:144
# 01ab7b8dc3b94a0391b50aba7e2f51a5
msgid "And you can use them like::"
msgstr ""

#: ../../components/grok.rst:163
# 800ee8183ab2448e8d9cfd2362a7c92a
msgid "Migrating views from five.grok to plain Plone"
msgstr ""

#: ../../components/grok.rst:165
# ea684c3c4c9e484f9573e75b120c4341
msgid "If you further want to break the dependency with ``five.grok`` and get rid of ``grok.xxx()`` directives in your classes here are further dependency."
msgstr ""

#: ../../components/grok.rst:169
# 64023853cf48483797e4befd3c847c62
msgid "Remove ``five.grok`` from the dependency list of your egg and remove ``<grok:grok>`` ZCML directive in ``configure.zcml``."
msgstr ""

#: ../../components/grok.rst:171
# 5f7a0497802944cfb5ac7e70e6f60eb5
msgid "Remove ``from five import grok`` in all of your package modules."
msgstr ""

#: ../../components/grok.rst:173
# 987b8d40ebeb48b3a673eed06199090d
msgid "Manually :doc:`register static media folder of your egg </templates_css_and_javascripts/resourcefolders>`"
msgstr ""

#: ../../components/grok.rst:175
# 8d48666f90a346138021a3f1dcbace30
msgid "Declare views and forms using `configure.zcml <http://developer.plone.org/views/browserviews.html#creating-a-view-using-zcml>`_"
msgstr ""

#: ../../components/grok.rst:177
# 203b2de99edd4ceb812c8de9a493b7ed
msgid "Remove ``grok.templatedir()`` and map view classes to templates using ``<browser:page>`` ZCML directive."
msgstr ""

#: ../../components/grok.rst:179
# 71992d753a244ad9bc55b39e7685354a
msgid "Grok migration source example::"
msgstr ""

#: ../../components/grok.rst:194
# 3b5d3a6e8a0e45c0afdc281bff4a9068
msgid "ZCML migration ``configuration.zcml`` target example::"
msgstr ""

#: ../../components/grok.rst:216
# e5bbb27bf64648fda9e935937eb662ad
msgid "Forms handle ``update()`` themselves - this concerns only non-form views"
msgstr ""

#: ../../components/grok.rst:218
# 76786082276a4082a811760315150b05
msgid "If your view has ``update()`` method you need to call it manually in ``__call__()`` because ``BrowserView`` base class doesn't do this."
msgstr ""

#: ../../components/grok.rst:221
# ec77bbcebe53400d84a911b2b98c192e
msgid "class MyView(BrowserView):"
msgstr ""

#: ../../components/grok.rst:224
# ee8ddc82f1c84ba2b967cf3c1c7854db
msgid "def update(self):"
msgstr ""

#: ../../components/grok.rst:224
# 28a809fd5c964a45ae9c79484ef30250
msgid "..."
msgstr ""

#: ../../components/grok.rst:228
# 4269bdb934544784976e25f784664a36
msgid "def __call__(self):"
msgstr ""

#: ../../components/grok.rst:227
# d6930f0b2acd44ee91f8b7c7ae9849c9
msgid "self.update() return self.index()  # Or self.render() for grok.CodeView"
msgstr ""

#: ../../components/grok.rst:233
# 5ea1c5f0cf3e4a7c8296c32a6f5d50f2
msgid "Tutorials"
msgstr ""

#: ../../components/grok.rst:235
# 48f48a4912bf43c2a69fe0e81a10ab17
msgid "http://plone.org/products/dexterity/documentation/manual/five.grok/background/adding-five.grok-as-a-dependency"
msgstr ""

#: ../../components/grok.rst:237
# bdad283dcbe147f995b4822cb1b9ba51
msgid "Steps:"
msgstr ""

#: ../../components/grok.rst:239
# 1c7c2ea26b4a46b6a170c0075aa6b590
msgid "Add dependencies to your ``setup.py``."
msgstr ""

#: ../../components/grok.rst:241
# 76b1c1fe14a046e88fcf5d9eca5349a2
msgid "Edit ``buildout.cfg`` to include the good known version set."
msgstr ""

#: ../../components/grok.rst:243
# 3c27aafc2a0646378bea89393524f261
msgid "Add the ``grok`` :term:`ZCML` directive to ``configure.zcml``."
msgstr ""

#: ../../components/index.rst:3
# 8f2c7948b44242d2a3a876b3233cce67
msgid "Component architecture"
msgstr ""

#: ../../components/index.rst:8
# 4ea936e9578d41f989a54af2a657ef95
msgid "Plone logic is wired together by Zope 3 component architecture. It provides \"enterprise business logic\" engine for Plone."
msgstr ""

#: ../../components/index.rst:11
# 45bb8b4b1b624d2d81854a7a7f06865c
msgid "The architecture provides pluggable system :doc:`interfaces </components/interfaces>`, adapters, utilities and registries. The wiring of components is done on XML based language called :doc:`ZCML </components/zcml>`."
msgstr ""

#: ../../components/index.rst:17
# ae4f230716014416b4c10c1aa9502348
msgid "Grok - wrapper around Z3"
msgstr ""

#: ../../components/index.rst:19
# 99f44e11725e4a36bc8a91865b0fa45f
msgid "On Z3 component layer there exist higher level framework called :doc:`Grok </components/grok>` which gives you a way to automatic scan Python modules for decorators and directives without the need off manually writing ZCML code or Python to register your business logic."
msgstr ""

#: ../../components/index.rst:24
# 900f47dd829e46b8869cc0500a85c78e
msgid "Database drops using Generic setup"
msgstr ""

#: ../../components/index.rst:26
# 9745a8275bac44769a0fe81bf4b359f1
msgid "Zope 3 components act on Python codebase level which is shared by all sites in the same Zope application server process. When you install new add-ons to Plone site, the add-ons modify the site database using :doc:`GenericSetup </components/genericsetup>` framework. GenericSetup is mostly visible as */profiles/default* folder and its XML files in your add-on."
msgstr ""

#: ../../components/index.rst:35
# 91bd972aba19432688f21db81ff772af
msgid "http://www.muthukadan.net/docs/zca.html"
msgstr ""

#: ../../components/interfaces.rst:3
# 87f7c45b669c4c5ca6b00cf47aed93cd
msgid "Interfaces"
msgstr ""

#: ../../components/interfaces.rst:10
# f561948211144e90ac1d8e5e232b1c34
msgid "Interfaces define what methods an object provides. Plone extensively uses interfaces to define APIs between different subsystems. They provide a more consistent and declarative way to define bridges between two different things, when duck-typing is not enough."
msgstr ""

#: ../../components/interfaces.rst:16
# 37d9cb472506433b8e96e73d743b6161
msgid "An interface defines the shape of a hole where different pieces fit. The shape of the piece is defined by the interface, but the implementation details like color, material, etc. can vary."
msgstr ""

#: ../../components/interfaces.rst:20
# f4406745673943548d398096ec061b6d
msgid "See `zope.interface package README <http://pypi.python.org/pypi/zope.interface>`_."
msgstr ""

#: ../../components/interfaces.rst:23
# f69b85b28b674a5ab4afc139bd78eaf2
msgid "Common interfaces"
msgstr ""

#: ../../components/interfaces.rst:25
# d5c810d9acd34f39802e73e64e003738
msgid "Some interfaces are commonly used throughout Plone."
msgstr ""

#: ../../components/interfaces.rst:27
# 3db2237fe173453595239d9c2a99b3f5
msgid "The usual use case is that a :doc:`context directive for a view </views/browserviews>` is provided, specifying where the view is available (e.g. for which content types)."
msgstr ""

#: ../../components/interfaces.rst:33
# b04090b402f24e1285a2887d89c2c479
msgid "Base class of all interfaces. Also used as a ``*`` wildcard when registering views, meaning that the view applies on every object."
msgstr ""

#: ../../components/interfaces.rst:37
# f5a90730df5f4df691bb7ae4929cc7e9
msgid "All *content* items on the site. In the site root, this interface excludes Zope objects like ``acl_users`` (the user folder) and ``portal_skins`` which might otherwise appear in the item listing when you iterate through the root content."
msgstr ""

#: ../../components/interfaces.rst:44
# 3e188432e5bd4d2296d829cf47f8b60b
msgid "``Products.CMFCore.interfaces.IFolderish``"
msgstr ""

#: ../../components/interfaces.rst:44
# b9c74b4c534d475dae14510f6b180f43
msgid "All *folders* in the site."
msgstr ""

#: ../../components/interfaces.rst:47
# 7a189ed3ea9a464fa80e0a211bb53bc8
msgid "``Products.CMFCore.interfaces.ISiteRoot``"
msgstr ""

#: ../../components/interfaces.rst:47
# 253ee21107824ddabebf150ce3b0ff1f
msgid "The Plone site root object."
msgstr ""

#: ../../components/interfaces.rst:53
# 598e4804ea434a43a3930ce5aea8d144
msgid "``plone.app.layout.navigation.interfaces import INavigationRoot``"
msgstr ""

#: ../../components/interfaces.rst:50
# e2b66bc190e54780a3b188424f06c719
msgid "Navigation top object - where the breadcrumbs are anchored. On multilingual sites, this is the top-level folder for the current language."
msgstr ""

#: ../../components/interfaces.rst:56
# bdd1873febbf4bdba399baec50c0cbc5
msgid "Implementing one or multiple interfaces"
msgstr ""

#: ../../components/interfaces.rst:58
# 9daa1a299b5e4ac783ec91fbcee3ff9d
msgid "Use ``zope.interface.implements()`` in your class body. Multiple interfaces can be provided as arguments."
msgstr ""

#: ../../components/interfaces.rst:73
# ccc2fe00148641c9a80769fd20a156c3
msgid "Removing parent class interface implementations"
msgstr ""

#: ../../components/interfaces.rst:75
# 870ecffbeec74ac98d3741a2e5a6d83f
msgid "``implementsOnly()`` redeclares all inherited interface implementations. This is useful if you, for example, want to make :doc:`z3c.form </forms/z3c.form>` widget bindings more accurate."
msgstr ""

#: ../../components/interfaces.rst:85
# 91f23bb996db4b4eab6026ecb7405d5b
msgid "Checking whether object provides an interface"
msgstr ""

#: ../../components/interfaces.rst:88
# 295142d8a5194b5d9a1cdefce1291f7d
msgid "``providedBy``"
msgstr ""

#: ../../components/interfaces.rst:90
# 0be78f0fbe3740ab83b07b8bb31adbf7
msgid "In Python you can use code::"
msgstr ""

#: ../../components/interfaces.rst:100
# 69119cf41c8445b49d9783a3bdf17a97
msgid "``plone_interface_info``"
msgstr ""

#: ../../components/interfaces.rst:102
# 0452080207f9400d9641195e52a1c70a
msgid "In page templates you can use ``plone_interface_info`` helper view::"
msgstr ""

#: ../../components/interfaces.rst:112
# ea2eadb1599641f2a85b1eabf25753ce
msgid "https://github.com/plone/plone.app.layout/tree/master/plone/app/layout/globals/interface.py"
msgstr ""

#: ../../components/interfaces.rst:116
# dcb2c8688f434191845c5768df6a6e72
msgid "Interface resolution order"
msgstr ""

#: ../../components/interfaces.rst:118
# 539e482ae29b4f63a9c11a2cc1a2f72f
msgid "Interface resolution order (IRO) is the list of interfaces provided by the object (directly, or implemented by a class), sorted by priority."
msgstr ""

#: ../../components/interfaces.rst:121
# d90c643dd9b3484f9137077b501b5dc5
msgid "Interfaces are evaluated from zero index (highest priority) to the last index (lowest priority)."
msgstr ""

#: ../../components/interfaces.rst:124
# b017963e416b4d9f8a6112c82da54393
msgid "You can access this information for the object for debugging purposes using a magical attribute::"
msgstr ""

#: ../../components/interfaces.rst:131
# 08f49cdd34984150898eda91a13c2307
msgid "Since adapter factories are *dynamic* (adapter interfaces not hardcoded on the object), the object can still adapt to interfaces which are not listed in ``__iro__``."
msgstr ""

#: ../../components/interfaces.rst:137
# 367bf17255ff47d49652e82f40824a0d
msgid "Getting interface string id"
msgstr ""

#: ../../components/interfaces.rst:139
# 299622076cf247ddb96b1c23cef74a92
msgid "The interface id is stored in the ``__identifier__`` attribute."
msgstr ""

#: ../../components/interfaces.rst:141
# ecdab0bc79174653866ac2c64f6a4d58
msgid "Example file ``yourpackage/interfaces.py``::"
msgstr ""

#: ../../components/interfaces.rst:152
# 19b7b589cca441cbb4993f153ce2a2b5
msgid "Note that this attribute does not respect import aliasing."
msgstr ""

#: ../../components/interfaces.rst:154
# 1fbadd6e541548aba0396bc4074d3890
msgid "Example: ``Products.ATContentTypes.interfaces.IATDocument.__identifier__`` is ``Products.ATContentTypes.interfaces.document.IATDocument``."
msgstr ""

#: ../../components/interfaces.rst:158
# ea2be23f73244d84bac2bc5a61bb00aa
msgid "Getting interface class by its string id"
msgstr ""

#: ../../components/interfaces.rst:160
# 182ecedb88b14475bfa0d4eeabfdc7d4
msgid "Use the `zope.dottedname`_ package."
msgstr ""

#: ../../components/interfaces.rst:176
# bd064f19f4e34226880dd284198dd5ae
msgid "Applying interfaces for several content types"
msgstr ""

#: ../../components/interfaces.rst:178
# 0cf828b9aa9e4c7480487138a6bc2961
msgid "You can apply marker interfaces to content types at any time."
msgstr ""

#: ../../components/interfaces.rst:180
# 3e6fc1c605ce497ba22e28d337fea536
msgid "Example use cases:"
msgstr ""

#: ../../components/interfaces.rst:182
# 276b9845b92a4f1eb870042d0bc1acec
msgid "You want to assign a viewlet to a set of particular content types."
msgstr ""

#: ../../components/interfaces.rst:184
# cb2c8dc4385c41ff85d780eb396aba4c
msgid "You want to enable certain behavior on certain content types."
msgstr ""

#: ../../components/interfaces.rst:188
# 0c8a4ebfb82846beacbbfdf8d26323df
msgid "A marker interface is needed only when you need to create a common nominator for several otherwise unrelated classes. You can use one existing class or interface as a context without explicitly creating a marker interface. Places accepting ``zope.interface.Interface`` as a context usually accept a normal Python class as well (``isinstance`` behavior)."
msgstr ""

#: ../../components/interfaces.rst:195
# 1220d25528ea42d5941c042bf51a83b3
msgid "You can assign the marker interface for several classes in ZCML using a ``<class>`` declaration. Here we're assigning ``ILastModifiedSupport`` to documents, events and news items:"
msgstr ""

#: ../../components/interfaces.rst:215
# 857f650de5d7463eae6f6320b3c5a95e
msgid "Then we can have a viewlet for these content types only using the following (grok example)::"
msgstr ""

#: ../../components/interfaces.rst:232
# ba0627635c594b4593d2500e1a5c796a
msgid "Related:"
msgstr ""

#: ../../components/interfaces.rst:234
# 715d867c6231445ca94f294e399dcc92
msgid "`zope.dottedname`_ allows you to resolve dotted names to Python objects manually"
msgstr ""

#: ../../components/interfaces.rst:238
# a6bba6b2a77e44c68e9774b3ef9d335e
msgid "Dynamic marker interfaces"
msgstr ""

#: ../../components/interfaces.rst:240
# 125ad3d27746463eb03c3cee24c805c5
msgid "Zope allows to you to dynamically turn on and off interfaces on any content objects through the :term:`ZMI`. Browse to any object and visit the :guilabel:`Interfaces` tab."
msgstr ""

#: ../../components/interfaces.rst:244
# 28a6a7ad14914f158ded2be8b242e7a6
msgid "Marker interfaces might need to be explicitly declared using the :term:`ZCML` ``<interface>`` directive, so that Zope can find them:"
msgstr ""

#: ../../components/interfaces.rst:254
# 839f591338ea4e94b3ec9a5565e689f9
msgid "The interface dotted name must refer directly to the interface class and not to an import from other module, like ``__init__.py``."
msgstr ""

#: ../../components/interfaces.rst:258
# 799baf747fb2467bbefddf9f51cb89b0
msgid "Setting dynamic marker interfaces programmatically"
msgstr ""

#: ../../components/interfaces.rst:260
# b980a23d6a824028a62bbb0c86daa731
msgid "Use the ``mark()`` function from `Products.Five`_."
msgstr ""

#: ../../components/interfaces.rst:270
# e73edd6bcb884ef6abe71f42fc3d46d8
msgid "This marking persists with the object: it is not temporary."
msgstr ""

#: ../../components/interfaces.rst:272
# 8f8af4c2b92746f9a9045eae9b199d1f
msgid "Under the hood: ``mark()`` delegates to ``zope.interface.directlyProvides()`` |---| with the result that a persistent object (e.g. content item) has a reference to the interface class you mark it with in its ``__provides__`` attribute; this attribute is serialized and loaded by ZODB like any other reference to a class, and `zope.interface`_ uses object specification descriptor magic (just like it does for any other object, persistent or not) to resolve provided interfaces."
msgstr ""

#: ../../components/interfaces.rst:283
# 6f024f6a59f6421ba647616a132d9485
msgid "To remove a marker interface from an object, use the ``erase()`` function from `Products.Five`_."
msgstr ""

#: ../../components/interfaces.rst:294
# 6210a72856be4e9daaf16502af92560c
msgid "Tagged values"
msgstr ""

#: ../../components/interfaces.rst:296
# ee35ea37b1cb4225aa0f9a567bd9220d
msgid "Tagged values are arbitrary metadata you can stick on ``zope.interface.Interface`` subclasses. For example, the `plone.autoform`_ package uses them to set form widget hints for `zope.schema`_ data model declarations."
msgstr ""

#: ../../components/utilities.rst:3
# 3c79650abc444848b3523ee482796976
msgid "Utilities"
msgstr ""

#: ../../components/utilities.rst:7
# 2a814881b70b4be3919a10afcc75b485
msgid "Utility design pattern in Zope 3 allows easily overridable singleton class instances for your code."
msgstr ""

#: ../../components/utilities.rst:15
# 4d7cc058068248669971c7ce4e419e33
msgid "Utility classes provide site-wide utility functions."
msgstr ""

#: ../../components/utilities.rst:17
# 4024bb7af1ae426fa75b7ee2168c1d80
msgid "They are registered by marker interfaces."
msgstr ""

#: ../../components/utilities.rst:19
# 4108e2dfe474400999599637c8bf92e2
msgid "Site customization logic or add-on products can override utilities for enhanced or modified functionality"
msgstr ""

#: ../../components/utilities.rst:22
# 44c6ad7cb0af4f2694b6ee36317ace8d
msgid "Utilities can be looked up by name or interface"
msgstr ""

#: ../../components/utilities.rst:24
# 3894eea565e64c5bae159513f7a29f3e
msgid "Compared to \"plain Python functions\", utilities provide the advantage of being plug-in points without need of :doc:`monkey-patching </misc/monkeypatch>`."
msgstr ""

#: ../../components/utilities.rst:28
# 3ab303630a7547aabea4ddfcc20f151c
msgid "Read more in"
msgstr ""

#: ../../components/utilities.rst:30
# 9016c50726f04f8db52d45f9e2ca3743
msgid "http://plone.org/products/dexterity/documentation/manual/five.grok/core-components/utilities"
msgstr ""

#: ../../components/utilities.rst:32
# 7492ffa58cc247dfa23d20166cbec264
msgid "`zope.component documentation <http://apidoc.zope.org/++apidoc++/Code/zope/component/README.txt/index.html>`_."
msgstr ""

#: ../../components/utilities.rst:35
# d315d9e4b56743c5af60fa56e8da61b2
msgid "Local and global utilities"
msgstr ""

#: ../../components/utilities.rst:37
# f813b0b7dfec41d4b5eb381adb91647d
msgid "Utilities can be"
msgstr ""

#: ../../components/utilities.rst:39
# 71b3df711c3f468c864930e7533ea197
msgid "*global* - registered during Zope start-up"
msgstr ""

#: ../../components/utilities.rst:41
# 3968207769b640a6b5a7f84b8d07a7af
msgid "*local* - registered during add-on installer for a certain site/content item"
msgstr ""

#: ../../components/utilities.rst:43
# 10c31900259f4f149a36fea4b0884053
msgid "Local utilities are registered to persistent objects. The context of local utilities is stored in a thread-local variable which is set during traversal. Thus, when you ask for local utilities, they usually come from a persistent registry set up in the Plone site root object."
msgstr ""

#: ../../components/utilities.rst:48
# 1471928fb6914b77ad6aa45319218a0c
msgid "Global utilities are registered in ZCML and affect all Zope application server and Plone site instances."
msgstr ""

#: ../../components/utilities.rst:51
# 33104e0bdaef48ffa817e51e76931cba
msgid "Some hints::"
msgstr ""

#: ../../components/utilities.rst:57
# afb475aabb9648539aba703d42707cfb
msgid "Registering a global utility"
msgstr ""

#: ../../components/utilities.rst:59
# 7ecc8f61e12b49328c5af47a6a4b2fad
msgid "A utility is constructed when Plone is started and ZCML is read. Utilities take no constructor parameters. If you need to use parameters like context or request, consider using views or adapters instead. Utilities may or may not have a name."
msgstr ""

#: ../../components/utilities.rst:64
# 29a57d4869244a8cbd6c7f4063c5a1ac
msgid "A utility can be provided by a function: the function is called and it returns the utility object."
msgstr ""

#: ../../components/utilities.rst:67
# 58806712f3504cd0959cfe30a0fca235
msgid "A utility can be provided by a class: the class ``__call__()`` method itself acts as an factory and returns a new class instance."
msgstr ""

#: ../../components/utilities.rst:70
# 42ebfa4950384213a330c309bf711132
msgid "ZCML example:"
msgstr ""

#: ../../components/utilities.rst:81
# 00c47b97cfe94fbe81ea2829998b760a
msgid "Python example (named utility)::"
msgstr ""

#: ../../components/utilities.rst:91
# 4d864700c3f44f55bfe30bb0f09ff096
msgid "The utility class \"factory\" is in its simplest form a class which implements the interface::"
msgstr ""

#: ../../components/utilities.rst:104
# afc5cb678576415abfb1f89ae6fa1fd0
msgid "Class is constructed / factory is run during the ZCML initialization."
msgstr ""

#: ../../components/utilities.rst:106
# e9315855e4034944b6ca87a9bb5b1b0d
msgid "To use this class::"
msgstr ""

#: ../../components/utilities.rst:115
# 5d32bacff9f4428181a002fec91baa7b
msgid "Registering a local utility"
msgstr ""

#: ../../components/utilities.rst:117
# 5f850d37b97b45978ddc90cff12b55be
msgid "http://plone.org/documentation/manual/developer-manual/generic-setup/reference/component-registry"
msgstr ""

#: ../../components/utilities.rst:119
# 6e5d6a2a88d44e21bf26ec6fe82ef3dd
msgid "http://davisagli.com/blog/registering-add-on-specific-components-using-z3c.baseregistry"
msgstr ""

#: ../../components/utilities.rst:121
# e5a41be5eccc462391aa3020393e991f
msgid "http://pypi.python.org/pypi/z3c.baseregistry"
msgstr ""

#: ../../components/utilities.rst:125
# 254fb39309514c82ba704836c7114f6d
msgid "Local utilities may be destroyed when the add-on product that provides them is reinstalled. Do not use them to store any data."
msgstr ""

#: ../../components/utilities.rst:129
# 93df675bd6c34b50b3749d9e5a42be16
msgid "http://markmail.org/thread/twuhyldgyje7p723"
msgstr ""

#: ../../components/utilities.rst:132
# 235c6c33f9a44855983fa3c4d5c1f955
msgid "Overriding utility"
msgstr ""

#: ../../components/utilities.rst:134
# 085345ddb40c4ebdb6df1a3edeea441f
msgid "If you want to override any existing utility you can re-register the utility in the ``overrides.zcml`` file in your product."
msgstr ""

#: ../../components/utilities.rst:138
# e351eb50a5134ab5ba076d4c8b6f93ca
msgid "Getting a utility"
msgstr ""

#: ../../components/utilities.rst:140
# 1333b236062f43f98c44853095e7dd11
msgid "There are two functions:"
msgstr ""

#: ../../components/utilities.rst:143
# e0c625c6ffc045ce9f08e1c037801dff
msgid "``zope.component.getUtility``"
msgstr ""

#: ../../components/utilities.rst:143
# ebb24b06f1cd47739b82edf36a851187
msgid "will raise an exception if the utility is not found."
msgstr ""

#: ../../components/utilities.rst:146
# 7cb3bc5e49f34342b9cd7f3c4ad80480
msgid "``zope.component.queryUtility``"
msgstr ""

#: ../../components/utilities.rst:146
# d1c1d74e69c748f5a65e80c8e3e00c8b
msgid "will return ``None`` if the utility is not found."
msgstr ""

#: ../../components/utilities.rst:148
# c7376f5d8ccb4486ae2d23b6231125af
msgid "Utility query parameters are passed to the utility class constructor."
msgstr ""

#: ../../components/utilities.rst:160
# d33c6b37ad6e490eada1e75c50b637af
msgid "You cannot use ``getUtility()`` on Python module level code during import, as the Zope Component Architecture is not yet initialized at that time. Always call ``getUtility()`` from an HTTP request end point or after Zope has been started."
msgstr ""

#: ../../components/utilities.rst:166
# 6632498907b54c97a64288d2dab6a134
msgid "Query local + global utilities:"
msgstr ""

#: ../../components/utilities.rst:168
# 74cc6c48196440a79e6590d237eea09d
msgid "``zope.component.queryUtility()`` for local utilities, with global fallback."
msgstr ""

#: ../../components/utilities.rst:170
# 4ae9853ca7894327b0c4583981af4be2
msgid "Query only global utilities::"
msgstr ""

#: ../../components/utilities.rst:178
# 2d08a4c778184836bbd7059be05b7756
msgid "Due to Zope component architecture initialization order, you cannot call ``getUtility()`` in module-level Python code. Module-level Python code is run when the module is being imported, and Zope components are not yet set up at this point."
msgstr ""

#: ../../components/utilities.rst:184
# f38fd8ed748f455d97bcf22ec0172820
msgid "Getting all named utilities of one interface"
msgstr ""

#: ../../components/utilities.rst:186
# 87e7bbd163fb42f381b4579fd3773e4e
msgid "Use ``zope.component.getUtilitiesFor()``."
msgstr ""

#: ../../components/utilities.rst:205
# 1673954b95164f82993d7d4d9d5e0ad8
msgid "Unregistering utilities"
msgstr ""

#: ../../components/utilities.rst:207
# b25a855993c44ff8891ff74d19c13bcd
msgid "http://www.muthukadan.net/docs/zca.html#unregisterutility"
msgstr ""

#: ../../components/utilities.rst:210
# 408980f76cac45e9a4e8e1152ea0703b
msgid "Removing persistent local utilities"
msgstr ""

#: ../../components/utilities.rst:212
# cbb08c02901f498cb3389e3a200c5c23
msgid "http://plone.org/documentation/kb/manually-removing-local-persistent-utilities"
msgstr ""

#: ../../components/utilities.rst:213
# 6262feb13df045ce8e4f171ff27644a8
msgid "http://blog.fourdigits.nl/removing-a-persistent-local-utility"
msgstr ""

#: ../../components/utilities.rst:214
# 7682a89712834b95885fecbc13d74ccc
msgid "http://blog.fourdigits.nl/removing-a-persistent-local-utility-part-ii"
msgstr ""

#: ../../components/zcml.rst:3
# af3c9637e57144a7b4f720d6efb112d3
msgid "ZCML"
msgstr ""

#: ../../components/zcml.rst:7
# fe609af898044c3cbd0a99e110712065
msgid "What Plone programmers should know about ZCML."
msgstr ""

#: ../../components/zcml.rst:14
# 8960fd7196fa43b381faf092277c86df
msgid ":term:`ZCML` stands for the *Zope Configuration Mark-up Language*.  It is an XML-based language used to extend and plug into systems based on the Zope Component Architecture (:term:`ZCA`)."
msgstr ""

#: ../../components/zcml.rst:18
# 710751f2c2a948a89fd9488b8981c9ea
msgid "It provides:"
msgstr ""

#: ../../components/zcml.rst:20
# 3f972186e595424ab6cca6ae9232e25f
msgid "conflict resolution (e.g. two plug-ins cannot overlap);"
msgstr ""

#: ../../components/zcml.rst:21
# 795ed54d41db47e2b04ea498fcf20023
msgid "extensible syntax based on namespaces."
msgstr ""

#: ../../components/zcml.rst:23
# cc1c1b844b774dab9a2f284274760a22
msgid "Downsides of ZCML are:"
msgstr ""

#: ../../components/zcml.rst:25
# c433fecc7c414182a40fbbe70c7de818
msgid "it is cumbersome to write by hand;"
msgstr ""

#: ../../components/zcml.rst:26
# 3ce6415874014e86a58ad29538e7adaa
msgid "lack of end-user documentation."
msgstr ""

#: ../../components/zcml.rst:28
# 04134c01625c4da98813a71cdce77802
msgid "Plone uses ZCML to:"
msgstr ""

#: ../../components/zcml.rst:30
# 0d69e5c5bc764c01a2ddad523c3aa9b2
msgid "register components with various places in the system, both core and add-ons."
msgstr ""

#: ../../components/zcml.rst:35
# e1fd1efc4ce74534b49af66db5279d2c
msgid "Everything you can do in ZCML can also be done in Python code."
msgstr ""

#: ../../components/zcml.rst:37
# e4581605a60a44e7bf2acc0dbeb3a526
msgid "After developers found ZCML cumbersome, the :doc:`Grok framework </components/grok>` was created. Grok makes it possible use the ZCA without writing XML by enabling Python directives and function decorators to be used instead."
msgstr ""

#: ../../components/zcml.rst:42
# ce2fd1454b734952b443fa0297af5691
msgid "More info:"
msgstr ""

#: ../../components/zcml.rst:44
# 0c20c985c4e0479d8d19b7721d46fc8c
msgid "`ZCML reference <http://docs.zope.org/zope3/ZCML/@@staticmenu.html>`_ (does not include Plone specific directives)"
msgstr ""

#: ../../components/zcml.rst:46
# 253c2d123e9f42daa3e711f906e03943
msgid "http://docs.zope.org/zopetoolkit/codingstyle/zcml-style.html"
msgstr ""

#: ../../components/zcml.rst:49
# eb19e3d2d2914cddb2693e6ef8c46795
msgid "ZCML workflow"
msgstr ""

#: ../../components/zcml.rst:51
# bbce76c61e204b15a1ab9252ab77989d
msgid "Each Plone component (core, add-on) has a base ``configure.zcml`` in the package root.  This :term:`ZCML` file can include additional nested configuration files using the ``<include>`` directive."
msgstr ""

#: ../../components/zcml.rst:55
# 1ea43deaaeba4cf8b603386569f535d2
msgid "ZCML is always interpreted during Plone start-up."
msgstr ""

#: ../../components/zcml.rst:57
# e2c9d9c732404aeda98a0d68d021056b
msgid "Your :doc:`unit test </testing_and_debugging/unit_testing>` may need to manually include ZCML."
msgstr ""

#: ../../components/zcml.rst:60
# cf5331cdd8aa4d85bb4eb70d41517ac4
msgid ":doc:`Funny exception error messages occur if Plone is started in the production mode and ZCML was not properly read for all the packages </troubleshooting/exceptions>`"
msgstr ""

#: ../../components/zcml.rst:64
# 2c600a5f4e59493abe9458509dde6576
msgid "When Plone is started all ZCML files are read."
msgstr ""

#: ../../components/zcml.rst:66
# cb80951314cb4c12811236f495d8e12a
msgid "New way: Python egg ``setup.py`` file contains a `autoinclude <http://plone.org/products/plone/roadmap/247>`_ hint and is picked up automatically when all the packages are scanned."
msgstr ""

#: ../../components/zcml.rst:70
# 6d4094f7774041398370feb1ac344ea0
msgid "Old way: ZCML reference must be manually added to the ``zcml = section`` in ``buildout.cfg``"
msgstr ""

#: ../../components/zcml.rst:73
# e6dc31e0d52e42eaabb4122e07ff7b7d
msgid "If ZCML contains errors :doc:`Plone does not start up in the foreground </troubleshooting/basic>`"
msgstr ""

#: ../../components/zcml.rst:77
# 90436c0ef48a466d8680d745ae5999fe
msgid "Overrides"
msgstr ""

#: ../../components/zcml.rst:79
# d117731627fd4f88846ee11707a5403e
msgid "Besides layer overrides, ZCML provides more hardcore ways to override things in buildout. These overrides can also override utilities etc. and overrides take effect during ZCML parsing, not when site is run."
msgstr ""

#: ../../components/zcml.rst:84
# c2c4db6fce1441fabb7d86779febf1c8
msgid "Create ``overrides.zcml`` file in your egg to the same folder as ``configure.zcml``"
msgstr ""

#: ../../components/zcml.rst:86
# 9a312ba48d814f0ca50b5dc7dd2414e7
msgid "Syntax is 100% same as in ``configure.zcml``"
msgstr ""

#: ../../components/zcml.rst:88
# 54aeb13d56284ff3bef291a38b6851c0
msgid "Restart Plone."
msgstr ""

#: ../../components/zcml.rst:92
# 6731c6d9153c4a8788ee9dd3e8131853
msgid "Before Plone 3.3, ZCML directives could not be automatically picked up from eggs. To make Plone pick up the directions in ``overrides.zcml``, you'd have to add this line in ``buildout.cfg``::"
msgstr ""

#: ../../components/zcml.rst:100
# 45ecbf6007b843b59700f6e5d7cb0a42
msgid "Since Plone 3.3, the ``z3c.autoinclude`` plugin can do this (http://plone.org/products/plone/roadmap/247/)."
msgstr ""

#: ../../components/zcml.rst:105
# 1b9ebaf0db0e40148b0e84daff412c31
msgid "Specify files and code from another package"
msgstr ""

#: ../../components/zcml.rst:107
# e3c6ff4aedad4e1b9618132f79065d42
msgid "If you ever find yourself needing to use a template from another package, you can do so with using the configure tag which will then run the block of :term:`ZCML` in the context of that package."
msgstr ""

#: ../../components/zcml.rst:112
# f36d350b5490450d8a5256af94e82c3e
msgid "Here is an example of defining portlet manager to be defined in another manager::"
msgstr ""

#: ../../components/zcml.rst:136
# f38210e119d6421284ec31590234083e
msgid "Conditionally run :term:`ZCML`"
msgstr ""

#: ../../components/zcml.rst:138
# 60128bd78d954eaebefa8eaf6009cfac
msgid "You can conditionally run :term:`ZCML` if a certain package or feature is installed."
msgstr ""

#: ../../components/zcml.rst:141
# fabc164398a7484abfa413593a2580a6
msgid "First, include the namespace at the top of the :term:`ZCML` file::"
msgstr ""

#: ../../components/zcml.rst:150
# 6fd2836c049f44499204c0065afca357
msgid "Examples"
msgstr ""

#: ../../components/zcml.rst:152
# f7e7e843dc12425ea1f2b738e80d219b
msgid "conditionally run for package::"
msgstr ""

#: ../../components/zcml.rst:157
# 12cb9ef911aa4bb18daa4a552fe19fd0
msgid "conditionally run for feature::"
msgstr ""

