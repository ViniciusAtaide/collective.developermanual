# SOME DESCRIPTIVE TITLE.
# Copyright (C) Plone community and other individual contributors
# This file is distributed under the same license as the Plone Developer Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Developer Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-09 14:22+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../serving/ftp.rst:3
# a350e41595b34a6dbe4e1b21b5f60266
msgid "FTP"
msgstr ""

#: ../../serving/ftp.rst:5
# e968dd3ef2534c9fbfaadf204aa69301
msgid "Plone/Zope supports FTP in the default configuration."
msgstr ""

#: ../../serving/ftp.rst:7
# f8d9b0acb0d8440294ce146ccdcf7737
msgid "FTP support is not very well maintained. WebDAV protocol is recommended over FTP."
msgstr ""

#: ../../serving/ftp.rst:10
# c698f7e411654f39aa6157badc28e27b
msgid "Enabling FTP"
msgstr ""

#: ../../serving/ftp.rst:12
# 8e20d35d032a498ca24d3b1e51ffcb4b
msgid "`See zope2instance recipe <http://pypi.python.org/pypi/plone.recipe.zope2instance>`_."
msgstr ""

#: ../../serving/http_request_and_response.rst:3
# 9fb2431132cf4652990cc3a91e551882
msgid "HTTP request and response"
msgstr ""

#: ../../serving/http_request_and_response.rst:5
#: ../../serving/traversing.rst:5
#: ../../serving/webdav.rst:5
#: ../../serving/xmlrpc.rst:7
# fa1a345c65974bd3b3895dd2afd1152c
# 30f2c053c9a641cdb2645e28ec8f3843
# 3871a85093f34c3da21be2a3dd9453b5
# a3074b6eacf54ce28c057dbee156706a
msgid "Description"
msgstr ""

#: ../../serving/http_request_and_response.rst:7
# e6517f4284a24b96819d306f31fc6f3d
msgid "Accessing and manipulating Zope's HTTP request and response objects programmatically."
msgstr ""

#: ../../serving/http_request_and_response.rst:12
#: ../../serving/traversing.rst:15
#: ../../serving/webdav.rst:13
#: ../../serving/xmlrpc.rst:12
# 6e869a6123b14dca9f9a7f1ff73884ef
# c0a3ac6d147e4711baba355ef40a6031
# b94af1c1a53542299d13d51fd2ed874b
# b4716e22e2a84a69970de08ed5042254
msgid "Introduction"
msgstr ""

#: ../../serving/http_request_and_response.rst:14
# 29f0b50aaf154a9787899ec61bc806fb
msgid "This chapter explains the basics of Zope HTTP requests and responses:"
msgstr ""

#: ../../serving/http_request_and_response.rst:16
# a417beb86a384748b8fe5c2a208af991
msgid "request and response objects lifecycle;"
msgstr ""

#: ../../serving/http_request_and_response.rst:17
# 7bbfc9e99d1341c8b5a745110468e2ea
msgid "data which can be extracted from the request;"
msgstr ""

#: ../../serving/http_request_and_response.rst:18
# aaa22099210a4a4ab29323c7ccbfa4ed
msgid "data which can be placed on the response."
msgstr ""

#: ../../serving/http_request_and_response.rst:21
# b04122b30e0740bb84c0e69ac8215cc9
msgid "Lifecycle"
msgstr ""

#: ../../serving/http_request_and_response.rst:23
# b42632c3493243928fae9b50286b61dd
msgid "Unlike some other web frameworks, in Plone you do not explicitly create or return HTTP response objects.  A HTTP request object always has a HTTP response object associated with it, and the response object is created as soon as the request hits the webserver."
msgstr ""

#: ../../serving/http_request_and_response.rst:28
# 4a8d5ed50002496a81c69541611a84a6
msgid "The response is available for the whole lifetime of request processing.  This effectively allows you to set and modify response headers at any point in the code."
msgstr ""

#: ../../serving/http_request_and_response.rst:33
# 17fceae5d9ab4b3d8f5da4e7145a64d9
msgid "Webservers"
msgstr ""

#: ../../serving/http_request_and_response.rst:35
# cec9764327254531bdf9d453552b007a
msgid "Usually Plone runs on Zope's ZServer_ (based on Sam Rushing's Medusa_). Other alternatives are WSGI_ compatible web servers like Repoze_."
msgstr ""

#: ../../serving/http_request_and_response.rst:38
# 31acd3a323e34a2a90f94f59c35918f4
msgid "The web server will affect how your HTTP objects are constructed."
msgstr ""

#: ../../serving/http_request_and_response.rst:42
# 1cf317954e254b4882c774f91d63d6c3
msgid "HTTP Request"
msgstr ""

#: ../../serving/http_request_and_response.rst:44
# c2f27fb5917e49299980261d4f0639b7
msgid "All incoming HTTP requests are wrapped in Zope's ZPublisher_ HTTPRequest_ objects. This is a multi-mapping: it contains mappings for environment variables, other variables, form data, and cookies, but the keys of all these mappings can also be looked up directly on the request object (i.e. ``request['some_form_id']`` and ``request.form['some_form_id']`` are equivalent)."
msgstr ""

#: ../../serving/http_request_and_response.rst:51
# 59c9a80fcab54b3ba8423d90a2a83ea4
msgid "Usually your view function or instance will receive an HTTP request object, along with a traversed context, as its construction parameter."
msgstr ""

#: ../../serving/http_request_and_response.rst:54
# 9dbc5c4dc1764b6e971d15e7c7673495
msgid "You can access the request in your view::"
msgstr ""

#: ../../serving/http_request_and_response.rst:71
# 15c1f218ae9d4af9b21e8b62e422daa1
msgid "Request method"
msgstr ""

#: ../../serving/http_request_and_response.rst:73
# 93948e73afda48c9b6d839f909ac17fe
msgid "The request method (GET or POST) can be read::"
msgstr ""

#: ../../serving/http_request_and_response.rst:79
# 7461ead7e288486fad0908fe31db7a74
msgid "Request URL"
msgstr ""

#: ../../serving/http_request_and_response.rst:81
# a2453f5d1c094fd480c8ecdae6b8b6b5
msgid "To get the requested URL::"
msgstr ""

#: ../../serving/http_request_and_response.rst:86
# 2f8ee8f5271644469362845ce27fd43b
msgid "To get the URL of the served object use the following (this might be different from the requested URL, since Plone does all kinds of default page and default view magic)::"
msgstr ""

#: ../../serving/http_request_and_response.rst:95
# a8239774f968429189076f8e2b72be49
msgid "URLs, as accessed above, do not contain query string."
msgstr ""

#: ../../serving/http_request_and_response.rst:98
#: ../../serving/http_request_and_response.rst:244
# 249df4f77ea64dc6a4750fdd2160ec19
# a2a1887be54e4cb78b668191cf5c3c1b
msgid "Query string"
msgstr ""

#: ../../serving/http_request_and_response.rst:100
# 6d888d3556a3489fb599eed7cf2a74a5
msgid "The unparsed query string can be accessed."
msgstr ""

#: ../../serving/http_request_and_response.rst:102
# 0b4bfde99a1e4f6c916243fbae3424b5
msgid "E.g. if you go to ``http://localhost:8080/site?something=foobar``::"
msgstr ""

#: ../../serving/http_request_and_response.rst:107
# 5830de46281748228c3f1ef5b18c1d7f
msgid "If the query string is not present in the HTTP request, it is an empty string."
msgstr ""

#: ../../serving/http_request_and_response.rst:111
# 758617797fee4f9190b14ee3dc353f5f
msgid "You can also use the ``request.form`` dictionary to access parsed query string content."
msgstr ""

#: ../../serving/http_request_and_response.rst:115
# bc2a341021594e5ebb9c6df861c18062
msgid "Request path"
msgstr ""

#: ../../serving/http_request_and_response.rst:117
# 0ea5bfb241984dcfb770359924a5829e
msgid "The request URI path can be read from ``request.path``, which returns a list of path components.  ``request.path`` is a virtual path, and has the site id component removed from it."
msgstr ""

#: ../../serving/http_request_and_response.rst:121
#: ../../serving/http_request_and_response.rst:157
#: ../../serving/http_request_and_response.rst:184
#: ../../serving/http_request_and_response.rst:212
#: ../../serving/http_request_and_response.rst:703
#: ../../serving/traversing.rst:67
#: ../../serving/traversing.rst:91
#: ../../serving/traversing.rst:105
#: ../../serving/traversing.rst:126
#: ../../serving/traversing.rst:189
#: ../../serving/traversing.rst:229
#: ../../serving/traversing.rst:246
#: ../../serving/traversing.rst:272
#: ../../serving/traversing.rst:314
#: ../../serving/traversing.rst:341
#: ../../serving/traversing.rst:422
#: ../../serving/traversing.rst:613
#: ../../serving/xmlrpc.rst:16
# 1d39ad689c2741f3a1d9172613bfe921
# f559bbe3ff854ef5ab8faa002ec95954
# f19cddc5970c407e9d6fcada82db8561
# bf441144e497481d9d0e079d9b293354
# 1f99bc089ef1494f91535078455e3bc9
# 0fb72146d7c84ebda09f3fb6d35a7d6b
# 0a82d653ddb44ee1a385f7c4c994399a
# 46a92e4687cd442786d22be7ba280ddf
# c51c03bf7333412d8eeb72914656507d
# 8c0e36281c0144638705587ca920e896
# eadb923034294e5ea4423bd3ca4d80dc
# d835c89648924fcebed769f20d6ef065
# 63f7145ef8454ca79aec1d03e1be3239
# 8eed9da16aa34a5d9ff8995b38dfdad8
# 15e2065f78834b3a8af4006625075323
# 6055658824d940188240b0f857cbb6cd
# 15f9155df8d4494cb4f8eb6cbbd01400
# 0a2e51b0b9cf47e2afb3673629adac94
msgid "Example::"
msgstr ""

#: ../../serving/http_request_and_response.rst:125
# 9e8879ed1e74484a93e03fc156695f81
msgid "Other possible headers::"
msgstr ""

#: ../../serving/http_request_and_response.rst:0
#: ../../serving/http_request_and_response.rst:0
#: ../../serving/http_request_and_response.rst:0
#: ../../serving/traversing.rst:0
# 61969239366f4b2899f0e37bf6766696
# 8fea49ed01d646e7af7fb1aa4846d9fd
# e1783c6c87d047498c76581f2dfbbc2e
# 755851d4728446eea5a9489742b220bc
msgid "Todo"
msgstr ""

#: ../../serving/http_request_and_response.rst:130
# 2b29b3ac5685435585f4ac8cf14c4a05
msgid "What's the difference?"
msgstr ""

#: ../../serving/http_request_and_response.rst:133
# aec12b2976b64a27b76ea6b8375b08bb
msgid "``REQUEST_URI``"
msgstr ""

#: ../../serving/http_request_and_response.rst:135
# 8d3be5ade5e2472f966d7e24604086ab
msgid "To get the variable which corresponds to ``REQUEST_URI`` in e.g. PHP the following helps::"
msgstr ""

#: ../../serving/http_request_and_response.rst:148
#: ../../serving/http_request_and_response.rst:456
#: ../../serving/http_request_and_response.rst:541
# b1ceb55fa376478e959be888f8cc56f9
# 66c0cd0b07d340c2b21488edd3838757
# 6f1c38734225455995dfcd814357e626
msgid "For more information, see:"
msgstr ""

#: ../../serving/http_request_and_response.rst:150
# 121753c455f44fc480426f120444a291
msgid "http://www.teamrubber.com/blog/_serverrequest_uri-in-zope/"
msgstr ""

#: ../../serving/http_request_and_response.rst:152
# 91df562918324d8fb38ef33abfb254cc
msgid "http://www.doughellmann.com/PyMOTW/urlparse/index.html"
msgstr ""

#: ../../serving/http_request_and_response.rst:155
# ee25eadc6b474538a20d9904dcc60e1f
msgid "Request client IP"
msgstr ""

#: ../../serving/http_request_and_response.rst:176
# d7d91fe61c984c3e8a023d24ecd70059
msgid "For functional tests based on ``zope.testbrowser`` use the ``addHeader`` method to add custom headers to a browser."
msgstr ""

#: ../../serving/http_request_and_response.rst:180
# 4b2bf54581db4947868c3246022c8868
msgid "``GET`` variables"
msgstr ""

#: ../../serving/http_request_and_response.rst:182
# 0d6e05797adb442ca59a2a47f4d76203
msgid "HTTP ``GET`` variables are available in ``request.form`` if the ``REQUEST_METHOD`` was ``GET``."
msgstr ""

#: ../../serving/http_request_and_response.rst:191
# 972eef8bc1374e4fa70d435f7d09f8e8
msgid "``POST`` variables"
msgstr ""

#: ../../serving/http_request_and_response.rst:193
# 39135537de384f19a20c6721099bdd17
msgid "HTTP ``POST`` varibles are available in ``request.form``::"
msgstr ""

#: ../../serving/http_request_and_response.rst:197
# 93af1fa483714ea7b6b68125be3fc117
msgid "There is no difference in accessing ``GET`` and ``POST`` variables."
msgstr ""

#: ../../serving/http_request_and_response.rst:200
# fed75248104043fe88b8425171a4ca33
msgid "Request body"
msgstr ""

#: ../../serving/http_request_and_response.rst:201
# 89900f18be154816babed4b5ecf3675b
msgid "The request body can be retrieved from the HTTPRequest_ object by using the get method with the key ``BODY``::"
msgstr ""

#: ../../serving/http_request_and_response.rst:207
# 43d5417d67e9466db49ad5b88fa86bf1
msgid "HTTP headers"
msgstr ""

#: ../../serving/http_request_and_response.rst:209
# 6e720c59319e466fab56ec13f4ce0897
msgid "HTTP headers are available through ``request.get_header()`` and the ``request.environ`` dictionary."
msgstr ""

#: ../../serving/http_request_and_response.rst:219
# 1308353d33074eb1a4dbe0473e79efe9
msgid "Dumping all headers::"
msgstr ""

#: ../../serving/http_request_and_response.rst:224
# 2b1f8ccb26314fa59ffa14db53ebe98a
msgid "A simple ZMI Python script to dump all HTTP request headers::"
msgstr ""

#: ../../serving/http_request_and_response.rst:246
# 222fc895723d4460b1cfa89fc047eb2a
msgid "To access the raw HTTP ``GET`` query string::"
msgstr ""

#: ../../serving/http_request_and_response.rst:252
# 41b08c88ebf04478810585a4f3f0a775
msgid "Web environment"
msgstr ""

#: ../../serving/http_request_and_response.rst:254
# bbc2bc9c0dcd45e181f358acff8d016b
msgid "The web server exposes its own environment variables in ``request.other`` (ZServer_) or ``request.environ`` (Repoze_ and other WSGI_-based web servers)::"
msgstr ""

#: ../../serving/http_request_and_response.rst:264
# 348213dcfca74404a9a36d76907887b6
msgid "Hostname"
msgstr ""

#: ../../serving/http_request_and_response.rst:266
# 12f4109a9297419fad2f5e4c0560b5d9
msgid "Below is an example to get the HTTP server name in a safe manner, taking virtual hosting into account::"
msgstr ""

#: ../../serving/http_request_and_response.rst:293
# 867c5c21c0ae4247b1e9f60527ca0aed
msgid "See also"
msgstr ""

#: ../../serving/http_request_and_response.rst:295
# 27702648807043c18a0c7d4db0848e4b
msgid "http://httpd.apache.org/docs/2.1/mod/mod_proxy.html#x-headers"
msgstr ""

#: ../../serving/http_request_and_response.rst:297
# 0c003df1bbf4435bac4f46f4b8c68385
msgid "http://zotonic.googlecode.com/hg/doc/varnish.zotonic.vcl (X-Forwarded-Host)"
msgstr ""

#: ../../serving/http_request_and_response.rst:302
# c5bbfaf5f76849d181c3916eae087567
msgid "Request port"
msgstr ""

#: ../../serving/http_request_and_response.rst:304
# d2eda3dd5389443e8314f9de9f4db4bd
msgid "It is possible to extract the Zope instance port from the request.  This is useful e.g. for debugging purposes if you have multiple ZEO front ends running, and you want to identify them easily::"
msgstr ""

#: ../../serving/http_request_and_response.rst:312
# d0f4bcb81470451ba84efedb93b92a25
msgid "The ``SERVER_PORT`` variable returns the port number as a string, not an integer."
msgstr ""

#: ../../serving/http_request_and_response.rst:316
# 8cb42f0097274670a4eb9917bd5430fd
msgid "This port number is not the one visible to the external traffic (port 80, HTTP)"
msgstr ""

#: ../../serving/http_request_and_response.rst:319
# 63a0ea377e8a4d6e975727a487c7d0de
msgid "Published object"
msgstr ""

#: ../../serving/http_request_and_response.rst:321
# 51bc963bcbbd4c11b8e4aaa3c93d787e
msgid "``request[\"PUBLISHED\"]`` points to a view, method or template which was the last item in the traversing chain to be called to render the actual page."
msgstr ""

#: ../../serving/http_request_and_response.rst:324
# 35d57543e8d343f294b73a6bffbed4e9
msgid "To extract the relevant content item from this information you can do e.g. in the after publication hook::"
msgstr ""

#: ../../serving/http_request_and_response.rst:337
# c93bb196a224491290e229cdf0d369bc
msgid "You might also want to filter out CSS etc. requests"
msgstr ""

#: ../../serving/http_request_and_response.rst:339
# 02ad4d31e44246bdb7a1c427e50bbe77
msgid "Please note that ``request[PUBLISHED]`` is set after language negotiation and authentication"
msgstr ""

#: ../../serving/http_request_and_response.rst:341
# e8ab0623513f4bac981dcc51a4586410
msgid "`More complete example <https://github.com/miohtama/silvuple/blob/master/silvuple/negotiator.py>`_"
msgstr ""

#: ../../serving/http_request_and_response.rst:344
# 476467d188624de9aa197bb70c50befb
msgid "Flat access"
msgstr ""

#: ../../serving/http_request_and_response.rst:346
# 30529b77dc434f39afa0ae4901e2e430
msgid "``GET``, ``POST`` and web environment variables are flat mapped to the request object as a dictionary look up::"
msgstr ""

#: ../../serving/http_request_and_response.rst:356
# acfe18573e8d4d8394de1c57cf1979ec
msgid "Request mutability"
msgstr ""

#: ../../serving/http_request_and_response.rst:358
# 5c49b6c39c0540169bba61e5362a6347
msgid "Even if you can write and add your own attributes to HTTP request objects, this behavior is discouraged. If you need to create cache variables for request lifecycle use annotations_."
msgstr ""

#: ../../serving/http_request_and_response.rst:362
# d2b9f4c9f6ba4edbb098a259de956a4c
msgid "Add link to internal annotations examples when written."
msgstr ""

#: ../../serving/http_request_and_response.rst:366
# 693c9740a23c45f4b85d0099d3b8e1ed
msgid "Accessing HTTP request outside context"
msgstr ""

#: ../../serving/http_request_and_response.rst:368
# 08b97ae350b542d5a8c8bbf4db45ebe3
msgid "There are often cases where you would like to get hold of the HTTP request object, but the underlying framework does not pass it to you.  In these cases you have two ways to access the request object:"
msgstr ""

#: ../../serving/http_request_and_response.rst:372
# a0edfc6be7b34d53b4df116ee1b2a77a
msgid "Use *acquisition* to get the request object from the site root. When Plone site traversal starts, the HTTP request is assigned to current site object as the ``site.REQUEST`` attribute."
msgstr ""

#: ../../serving/http_request_and_response.rst:376
# f5b16f8f19644ca58b3f249cd979095e
msgid "Use http://pypi.python.org/pypi/five.globalrequest."
msgstr ""

#: ../../serving/http_request_and_response.rst:378
# 9d06f272bf174897be194a7c04d02bc7
msgid "Example of getting the request using acquisition::"
msgstr ""

#: ../../serving/http_request_and_response.rst:395
# 7e03fb48ab474e3cabbc5342db621d0f
msgid "zope.globalrequest.getRequest"
msgstr ""

#: ../../serving/http_request_and_response.rst:397
# 57421cd328114cd99f11c5b54e5ffed9
msgid "See"
msgstr ""

#: ../../serving/http_request_and_response.rst:399
# e5ae71cc40194b79b3b7d6d7e62e53ab
msgid "http://pypi.python.org/pypi/five.globalrequest"
msgstr ""

#: ../../serving/http_request_and_response.rst:403
# 5227ee16bd644ca8ac3f596f2e1541c1
msgid "HTTP response"
msgstr ""

#: ../../serving/http_request_and_response.rst:405
# 05734af57ce044ed99ea29242e21a033
msgid "Usually you do not return HTTP responses directly from your views. Instead, you modify the existing HTTP response object (associated with the request) and return the object which will be HTTP response payload."
msgstr ""

#: ../../serving/http_request_and_response.rst:409
# 1ea21b6ee55c4dccb13ad1201f63cf6c
msgid "The returned payload object can be:"
msgstr ""

#: ../../serving/http_request_and_response.rst:411
# a450911f62da4af1baab60f7003c9247
msgid "a string (str) 8-bit raw data; or"
msgstr ""

#: ../../serving/http_request_and_response.rst:412
# 1580e9e06e3a43f78542c43bdcec8f57
msgid "an iterable: the response is streamed, instead of memory-buffered."
msgstr ""

#: ../../serving/http_request_and_response.rst:415
# a0d7bf6100044ac6a5c12293ab94f9c4
msgid "Accessing response"
msgstr ""

#: ../../serving/http_request_and_response.rst:417
# 6054bbb2c2784a8cbb28129fea9a0df6
msgid "You can access the HTTP response if you know the request::"
msgstr ""

#: ../../serving/http_request_and_response.rst:433
# d904bcb38554473f9e25a55f8d1ec000
msgid "Response headers"
msgstr ""

#: ../../serving/http_request_and_response.rst:435
# b7b690c4632a4936b81815c5474bb78f
msgid "Use HTTPResponse_ ``setHeader()`` to set headers::"
msgstr ""

#: ../../serving/http_request_and_response.rst:442
# 2d5b1f6caeb54d088fccb8423a4ff2a0
msgid "Content disposition"
msgstr ""

#: ../../serving/http_request_and_response.rst:444
# 63e799e06d7241cbb2be7bef9f9af2f2
msgid "The ``Content-Disposition`` header is used to set the filename of a download. It is also used by Flash 10 to check whether Flash download is valid."
msgstr ""

#: ../../serving/http_request_and_response.rst:447
# 8e6e5ea17a32453aa3c3373c722596c3
msgid "Example of setting the download and downloadable filename::"
msgstr ""

#: ../../serving/http_request_and_response.rst:458
# b1ae22f36fe746828f4e901fd6381e1f
msgid "http://www.littled.net/new/2008/10/17/plone-and-flash-player-10/"
msgstr ""

#: ../../serving/http_request_and_response.rst:459
# 98315f7f2d0e4d0c85b4c7213ccd6d95
msgid "http://support.microsoft.com/kb/260519"
msgstr ""

#: ../../serving/http_request_and_response.rst:462
# 7ad4b82a557c4807a3027d97148ee06d
msgid "Return code"
msgstr ""

#: ../../serving/http_request_and_response.rst:464
# b4ba89b9020e4410b91176ae9c1a23a6
msgid "Use ``HTTPResponse.setStatus(self, status, reason=None, lock=None)`` to set HTTP return status (\"404 Not Found\", \"500 Internal Error\", etc.)."
msgstr ""

#: ../../serving/http_request_and_response.rst:467
# 07a4b5dee7594fedb00233a205a64774
msgid "If ``lock=True``, no further modification of the HTTPResponse status are allowed, and will fail silently."
msgstr ""

#: ../../serving/http_request_and_response.rst:471
# fd6c785d59b349a5ab13f0e85b8f4b10
msgid "Response body"
msgstr ""

#: ../../serving/http_request_and_response.rst:473
# f62d7d43d3ff4cb2aa55cf041f351680
msgid "You might want to read or manipulate the response body in the post-publication hook."
msgstr ""

#: ../../serving/http_request_and_response.rst:476
# 62850f3d457f466898a7c394f27eeb3e
msgid "The response body is not always a string or basestring: it can be a generator or iterable for blob data."
msgstr ""

#: ../../serving/http_request_and_response.rst:479
# ab9d5fbcdbee414aa314749d909e9ac9
msgid "The body is available as the ``response.body`` attribute."
msgstr ""

#: ../../serving/http_request_and_response.rst:481
# fd96e6f7ebc340e5855af703792bedca
msgid "You can change the body using setBody and locking it::"
msgstr ""

#: ../../serving/http_request_and_response.rst:486
# 0ef27ac5aed04021bf90dc5fe7a3522a
msgid "If ``lock=True``, no further modification of the HTTPResponse body are allowed, and will fail silently."
msgstr ""

#: ../../serving/http_request_and_response.rst:490
# 45080883d5da4e66ab944a4eadf83955
msgid "Redirects"
msgstr ""

#: ../../serving/http_request_and_response.rst:492
# 519b038132f14b67a54aab46aa7d82a1
msgid "**Real redirects**"
msgstr ""

#: ../../serving/http_request_and_response.rst:494
# b2da4b693d914e86a6a09a1b893eef47
msgid "Use the ``response.redirect()`` method::"
msgstr ""

#: ../../serving/http_request_and_response.rst:502
# ed6441e8dc67424d871fd60e7ad24df4
msgid "You can lock the status to not let other change the status later in the process ::"
msgstr ""

#: ../../serving/http_request_and_response.rst:507
# abc4ef15969d47e7949f9a13f4915204
msgid "**Javascript redirects**"
msgstr ""

#: ../../serving/http_request_and_response.rst:509
# 75246adf22ff4b9a93e2733646c620a2
msgid "You can invoke this Javascript redirect trick from a page template head slot in a hacky way"
msgstr ""

#: ../../serving/http_request_and_response.rst:521
# 3cba8af613b24d278ecc824fcb44df7b
msgid "Cookies"
msgstr ""

#: ../../serving/http_request_and_response.rst:523
# 68c5efc5180b4ad9b91f6678a085de89
msgid "See :doc:`cookies documentation </sessions/cookies>`."
msgstr ""

#: ../../serving/http_request_and_response.rst:526
# e90ba2072bd44feda20c997d97211d47
msgid "Middleware-like hooks"
msgstr ""

#: ../../serving/http_request_and_response.rst:528
# 5eefa17922364546b3cfa0eb5eb3b924
msgid "Plone does not have a middleware concept, as everything happens through traversal. Middleware behavior can be emulated with the *before traverse* hook. This hook can be installed on any persistent object in the traversing graph. The hook is persistent, so it is a database change and must be installed using custom GenericSetup Python code."
msgstr ""

#: ../../serving/http_request_and_response.rst:536
# b206780f29084c58b7e0b5e241178451
msgid "Before traverse hooks cannot create new HTTP responses, or return alternative HTTP responses.  Only exception-like HTTP response modification is supported, e.g. HTTP redirects. If you need to rewrite the whole response, the post-publication hook must be used."
msgstr ""

#: ../../serving/http_request_and_response.rst:543
# c9c8ece860934ad3b3b3b469cf11564d
msgid "http://blog.fourdigits.nl/changing-your-plone-theme-skin-based-on-the-objects-portal_type"
msgstr ""

#: ../../serving/http_request_and_response.rst:545
# f33b603918f4403dbc090a07a3346e81
msgid "http://zebert.blogspot.com/2008_01_01_archive.html"
msgstr ""

#: ../../serving/http_request_and_response.rst:547
# 4e17f4c00a1449228ebfcb521aa52ba7
msgid "http://svn.repoze.org/thirdparty/zopelib/branches/2.9.8/ZPublisher/tests/testBeforeTraverse.py"
msgstr ""

#: ../../serving/http_request_and_response.rst:549
# ecfea53f364244de967a9c1491804598
msgid "Examples:"
msgstr ""

#: ../../serving/http_request_and_response.rst:551
# 949c68cca8fe48f89bd3e0a0b3ad3e61
msgid "Redirector: https://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.mobile/gomobile/mobile/postpublication.py"
msgstr ""

#: ../../serving/http_request_and_response.rst:554
# 77a47d53c9ad4fc6a2f1c08291dde60e
msgid "Transform chain"
msgstr ""

#: ../../serving/http_request_and_response.rst:556
# 4ca82972f64645d9a7a8786a56a8182e
msgid "Transform chain is a hook into repoze.zope2 that allows third party packages to register a sequence of hooks that will be allowed to modify the response before it is returned to the browser."
msgstr ""

#: ../../serving/http_request_and_response.rst:559
# 0f284ac106334207977db78ab9a8d838
msgid "It is used e.g. by ``plone.app.caching``."
msgstr ""

#: ../../serving/http_request_and_response.rst:561
#: ../../serving/xmlrpc.rst:107
# 17b4e52865f74b3bacc5db25c3435729
# 859ba94647bf44999393030304151898
msgid "More information"
msgstr ""

#: ../../serving/http_request_and_response.rst:563
# 051b4dab03b0477a9a4490a5d7277d13
msgid "http://pypi.python.org/pypi/plone.transformchain"
msgstr ""

#: ../../serving/http_request_and_response.rst:566
# 208dae4cb4794f6997aba6906b22d6dd
msgid "Post-publication hook"
msgstr ""

#: ../../serving/http_request_and_response.rst:568
# e86b9dce1c474f399eb8fee6b4350f86
msgid "The post-publication hook is run when:"
msgstr ""

#: ../../serving/http_request_and_response.rst:570
# 788eddc2973e4d6bbba8c9cea36d767d
msgid "the context object has been traversed;"
msgstr ""

#: ../../serving/http_request_and_response.rst:571
# 03bc1c7f9ba846f18389f63773aff577
msgid "after the view has been called and the view has rendered the response;"
msgstr ""

#: ../../serving/http_request_and_response.rst:572
# 38c5e0679899459baaee512c66e1b937
msgid "before the response is sent to the browser;"
msgstr ""

#: ../../serving/http_request_and_response.rst:573
# d7363f0f35b548c7b410efdd539b8133
msgid "before the transaction is committed."
msgstr ""

#: ../../serving/http_request_and_response.rst:575
# c387d0d4e4d24781a2ef7eb03e42d566
msgid "This is practical for caching purposes: it is the ideal place to determine and insert caching headers into the response."
msgstr ""

#: ../../serving/http_request_and_response.rst:578
# 4608f18f4ca04d60b848bb45f9fa1fd3
msgid "Read more at the `plone.postpublicationhook package page <http://pypi.python.org/pypi/plone.postpublicationhook/>`_."
msgstr ""

#: ../../serving/http_request_and_response.rst:582
# 34a961e659ab4c4cb79f90221a33ac44
msgid "Custom redirect mappings"
msgstr ""

#: ../../serving/http_request_and_response.rst:584
# 40ea1a72d1314e44a5bbc15c8bfece06
msgid "Below is an example how you use :doc:`five.grok </components/grok>` to install an event handler which checks in the site root for a TTW Python script and if such exist it asks it to provide a HTTP redirect."
msgstr ""

#: ../../serving/http_request_and_response.rst:588
# e5a57525a3d2448a8932dc4943fc7488
msgid "This behavior allows you to write site-wide redirects easily"
msgstr ""

#: ../../serving/http_request_and_response.rst:590
# ae48d72575494fc0b12cc1aae1594f2f
msgid "In Python (thank god no Apache regular expressions)"
msgstr ""

#: ../../serving/http_request_and_response.rst:592
# 4372eb0efaeb4a48b5605af701948e8b
msgid "Redirects can access Plone content items"
msgstr ""

#: ../../serving/http_request_and_response.rst:594
# 7e4b786ec86c40a68e0b1ed29e486b02
msgid "You can easily have some redirects migrated from the old (non-Plone) sites"
msgstr ""

#: ../../serving/http_request_and_response.rst:596
# 70b683df2886462a87201e898a741dd5
msgid "``redirect.py`` - no modifications needed for your site, just copy-paste this to your Grok add-on folder. Remember to add ``url`` to *Parameter list* of the script on the script edit view::"
msgstr ""

#: ../../serving/http_request_and_response.rst:670
# 4557f38a0d3f4eefaec70f336c6efa58
msgid "Then an example ``redirect_handler`` script added through ZMI. Remember to add ``url`` to the *Parameter List* field of TTW interface::"
msgstr ""

#: ../../serving/http_request_and_response.rst:676
# f84f7a5c17d44a19b3bc3783a7802172
msgid "Or more complex example::"
msgstr ""

#: ../../serving/http_request_and_response.rst:701
# b20582ceb0e64c27ace1115c3fd88a12
msgid "Extracting useful information in the post-publication hook"
msgstr ""

#: ../../serving/http_request_and_response.rst:740
# f75f9ab4eeba46fcb39b31607a3ec930
msgid "Cross-origin resource sharing (CORS)"
msgstr ""

#: ../../serving/http_request_and_response.rst:742
# 4eacf49933674b2587a6c7f396d188dd
msgid "Complete."
msgstr ""

#: ../../serving/http_request_and_response.rst:744
# c963c909d93841098ca6d8df4366a3fe
msgid "http://enable-cors.org/"
msgstr ""

#: ../../serving/http_request_and_response.rst:746
# b3ce45b15b474c188e75968b801e1668
msgid "https://developer.mozilla.org/En/HTTP_access_control"
msgstr ""

#: ../../serving/index.rst:3
# d225b69792bd46afae526fa00dd2b87d
msgid "HTTP serving and traversing site data"
msgstr ""

#: ../../serving/index.rst:5
# 4db5bcf902454b2ea2441b5a7698d946
msgid "Serving content from your site to your users is effectively a mechanism to generate HTTP responses to HTTP requests."
msgstr ""

#: ../../serving/index.rst:8
# db895545eacb4804a7aa5fba8430b648
msgid "In Plone, answering to HTTP requests can be divided to three subproblems:"
msgstr ""

#: ../../serving/index.rst:10
# d81deeac4d8b4dbb861046613b83d0e2
msgid "managing the lifecycle of the HTTP request and response pair;"
msgstr ""

#: ../../serving/index.rst:11
# 6606016587114057a46f9b9231433d12
msgid "publishing, by traversing the request to the target object by its URI;"
msgstr ""

#: ../../serving/index.rst:12
# 6cee58adf7fd4c9c911cffcf6230ddf0
msgid "choosing different parts of the code depending on active layers."
msgstr ""

#: ../../serving/index.rst:14
# 9220b93a9d044e58b785d68bb4e84677
msgid "Plone and Zope 2 application servers support FTP, WebDAV and XML-RPC protocols besides plain HTTP."
msgstr ""

#: ../../serving/publishing.rst:3
# 97367fa1a12a4600a3f764a3db083b37
msgid "Publishing"
msgstr ""

#: ../../serving/publishing.rst:5
# 3638d9ed079942588d4b7cbf2d9b5cc6
msgid "To *publish* an object means to make it available in the Zope traversal graph and URLS."
msgstr ""

#: ../../serving/publishing.rst:8
# e2274b99245440578b362ec0760be3ec
msgid "A published object may have a reverse-mapping of object to path via ``getPhysicalPath()`` and ``absolute_url()`` but this is not always the requirement."
msgstr ""

#: ../../serving/publishing.rst:12
# 396c115c9b024e7480f8ad06f7a3052c
msgid "You can publish objects by providing a ``browser:page`` view which implements the ``zope.publisher.interfaces.IPublishTraverse`` interface."
msgstr ""

#: ../../serving/publishing.rst:16
# 42dad59b2be8494a97eddbf69c544a37
msgid "Example publishers"
msgstr ""

#: ../../serving/publishing.rst:18
# 29ff8ce1abed41089dd64d6dbe72a783
msgid "A widget to make specified files downloadable: `plone.formwidgets.namedfile.widget <https://github.com/plone/plone.formwidget.namedfile/tree/master/plone/formwidget/namedfile/widget.py>`_."
msgstr ""

#: ../../serving/traversing.rst:3
# e87e5fde2e784d169155332365c480f8
msgid "Traversing"
msgstr ""

#: ../../serving/traversing.rst:7
# b384a5523aed484586ac51b38ee79af5
msgid "Plone content is organized to a tree. Traversing means looking up content from this tree by path. When HTTP request hits a Plone server, Plone will traverse the corresponding content item and its view function by URI."
msgstr ""

#: ../../serving/traversing.rst:17
# c66f14b3f00743d49a0829c0a4e3b2ac
msgid "In Plone, all content is mapped to a single tree: content objects, user objects, templates, etc.  Even most object methods are directly mapped to HTTP-accessible URIs."
msgstr ""

#: ../../serving/traversing.rst:21
# 54c976ad0b48452fa9bedd34f796d3fe
msgid "Each object has a path depending on its location. :term:`Traversal` is a method of getting a handle on a persistent object in the ZODB object graph from its path."
msgstr ""

#: ../../serving/traversing.rst:25
# 87fd2d2e7d6b4dac924f984a3e209742
msgid "Traversal can happen in two places:"
msgstr ""

#: ../../serving/traversing.rst:27
# 5ecb781af2bd43e99236f408f4e1bfcd
msgid "When an HTTP request hits the server, the method on the object which will generate the HTTP response is looked up using traversal."
msgstr ""

#: ../../serving/traversing.rst:30
# 5b64ca6756054d3fa7b7062354202bb2
msgid "You can manually traverse the ZODB tree in your code to locate objects by their path."
msgstr ""

#: ../../serving/traversing.rst:33
# 35476726eaff402296803690f304d76d
msgid "When an HTTP request is being published the traversing happens in ``ZPublisher.BaseRequest.traverse``"
msgstr ""

#: ../../serving/traversing.rst:36
# 1b0c5034cbaa446c9382e1b6a9003328
msgid "http://svn.zope.org/Zope/trunk/src/ZPublisher/BaseRequest.py?rev=122282&view=auto"
msgstr ""

#: ../../serving/traversing.rst:38
# 66b6fe4eb3c245a391226ee891eab2b5
msgid "... but Zope includes other traversers, like ``unrestrictedTraverse()`` in the OFS module.  Different traversing methods behave differently and may fire different events."
msgstr ""

#: ../../serving/traversing.rst:43
# 70767e6e759e4e2bb5c47dca32919863
msgid "Object ids"
msgstr ""

#: ../../serving/traversing.rst:45
# 05533f414d1946eba53e9b86fbfc063c
msgid "Each content object has an id string which identifies the object in the parent container.  The id string is visible in the browser address bar when you view the object.  Ids are also visible in the Zope Management interface."
msgstr ""

#: ../../serving/traversing.rst:49
# 311abc5d4f16460c9151880059497df4
msgid "Besides id strings, the content objects have Unique Identifiers, or UID_, which do not change even if the object is moved or renamed."
msgstr ""

#: ../../serving/traversing.rst:52
# e044fce77cf944418b040e2d4403267a
msgid "Though it's technically possible for ids to contain spaces or slashes, this is seldom a good idea, as it complicates working with ids in various situations."
msgstr ""

#: ../../serving/traversing.rst:57
# 42c8504fe527487faa167df94b34b10c
msgid "Path"
msgstr ""

#: ../../serving/traversing.rst:59
# bab21e0851894dafa5ec25f939d20b86
msgid "The Zope *path* is the location of the object in the object graph. It is a sequence of id components from the parent node(s) to the child separated by slashes."
msgstr ""

#: ../../serving/traversing.rst:63
# ee5aa9a3e4e34c8bb828018f96b7e495
msgid "A path need not always be a sequence of object ids. During traversal, an object may consume subsequent path elements, interpreting them however it likes."
msgstr ""

#: ../../serving/traversing.rst:72
# 5a21113632f64c9a80c6a9f58b36756f
msgid "Exploring Zope application server"
msgstr ""

#: ../../serving/traversing.rst:74
# 00889b267864415dae6c39059b5335a0
msgid "You can use the Zope Management interface to explore the content of your Zope application server:"
msgstr ""

#: ../../serving/traversing.rst:77
# 66232daef2bb430098e44e0e229a9eb4
msgid "Sites"
msgstr ""

#: ../../serving/traversing.rst:79
# 96471270de2f4bb6b0c57e9d3f884b49
msgid "Folders within the sites"
msgstr ""

#: ../../serving/traversing.rst:81
# ad5d2d4f7944458c8b055d503c649369
msgid "...and so on"
msgstr ""

#: ../../serving/traversing.rst:83
# 8b690e52cc914e2bb99ef7ee6df2b80c
msgid "The ZMI does not expose individual attributes. It only exposes traversable content objects."
msgstr ""

#: ../../serving/traversing.rst:87
# a7628c1e1d8a4b438157440022886e38
msgid "Attribute traversing"
msgstr ""

#: ../../serving/traversing.rst:89
# a61c6ac302c84d2b987137145e6d36d8
msgid "Zope exposes child objects as attributes."
msgstr ""

#: ../../serving/traversing.rst:101
# e27496953eb343228761c30209bc9210
msgid "Container traversing"
msgstr ""

#: ../../serving/traversing.rst:103
# c5d918cca5e74c3b84c38613743fcf49
msgid "Zope exposes child objects as container accessor."
msgstr ""

#: ../../serving/traversing.rst:116
# a16afb2a8f404275976c7a5013f24de4
msgid "Traversing by full path"
msgstr ""

#: ../../serving/traversing.rst:118
# aa070fc9fbf34f4f9c953505e6a354b3
msgid "Any content object provides the methods ``restrictedTraverse()`` and ``unrestrictedTraverse()``.  See Traversable_."
msgstr ""

#: ../../serving/traversing.rst:121
# 230286f4512c4ac481a0dad6262fb7c4
msgid "**Security warning**: ``restrictedTraverse()`` executes with the privileges of the currently logged-in user.  An Unauthorized_ exception is raised if the code tries to access an object for which the user lacks the *Access contents information* and *View* permissions."
msgstr ""

#: ../../serving/traversing.rst:135
# f3f03f4feed04ec5bcaddd42de2bffcc
msgid "``restrictedTraverse()``/``unrestrictedTraverse()`` does not honor ``IPublishTraverse`` adapters. `Read more about the issue in this discussion <http://mail.zope.org/pipermail/zope-dev/2009-May/036665.html>`_."
msgstr ""

#: ../../serving/traversing.rst:141
# 9062963077384c1083c179dfa31aded3
msgid "Getting the object path"
msgstr ""

#: ../../serving/traversing.rst:143
# a0a96a1927584d4e90d6046a9686ba26
msgid "An object has two paths:"
msgstr ""

#: ../../serving/traversing.rst:145
# df363cae51904ee2842e6e42fa524011
msgid "The *physical path* is the absolute location in the current ZODB object graph. This includes the site instance name as part of it."
msgstr ""

#: ../../serving/traversing.rst:148
# 8121288aae01428c9c48d889541f4071
msgid "The *virtual path* is the object location relative to the Plone site root."
msgstr ""

#: ../../serving/traversing.rst:150
# eaa8d67ced664342b09c4e45a1ebbbf1
msgid "**Path mangling warning**: Always store paths as virtual paths, or persistently stored paths will corrupt if you rename your site instance."
msgstr ""

#: ../../serving/traversing.rst:153
# f227306697bc4b10a1a12363d6a1590c
msgid "See Traversable_."
msgstr ""

#: ../../serving/traversing.rst:156
# 98038cdef49c46c3aba947f5aaae8cac
msgid "Getting physical path"
msgstr ""

#: ../../serving/traversing.rst:158
# cd5c3c0692a44e109d3ece63e8e8ee82
msgid "Use ``getPhysicalPath()``. Example::"
msgstr ""

#: ../../serving/traversing.rst:163
# 5e57608d3a13462180fcc068e4f35ed5
msgid "Getting virtual path"
msgstr ""

#: ../../serving/traversing.rst:165
# e2f80cc4044e45ee8c56e355fb5785b8
msgid "For content items you can use ``absolute_url_path()`` from `OFS.Traversable <http://svn.zope.org/Zope/trunk/src/OFS/Traversable.py?rev=122638&view=auto>`_::"
msgstr ""

#: ../../serving/traversing.rst:170
# aba22ffeee9d45169545d945e8a8d250
msgid "Map physical path to virtual path using HTTP request object ``physicalPathToVirtualPath()``. Example::"
msgstr ""

#: ../../serving/traversing.rst:181
# a5c8890aa58b4d97bc5ed955b138d680
msgid "The virtual path is not necessarily the path relative to the site root, depending on the virtual host configuration."
msgstr ""

#: ../../serving/traversing.rst:185
# bb6410ec9326430fbe4bd4f781dc3c7c
msgid "Getting item path relative to the site root"
msgstr ""

#: ../../serving/traversing.rst:187
# 018bb8d2c9474f54b2fc51cfe8959572
msgid "There is no a direct, easy way to accomplish this."
msgstr ""

#: ../../serving/traversing.rst:216
# 375c0e4c05ef4f06b871e3eb0a7c2603
msgid "Getting canonical object (breadcrumbs, visual path)"
msgstr ""

#: ../../serving/traversing.rst:218
# 8b91479b5d39454488a2109dd91c634c
msgid "The visual path is presented in the breadcrumbs. It is how the site visitor sees the object path."
msgstr ""

#: ../../serving/traversing.rst:221
# ef95aeb1bda3491e856859abb676cb51
msgid "It may differ from the physical path:"
msgstr ""

#: ../../serving/traversing.rst:223
# 111dfba1f42241cd94caf4bff46e5e9f
msgid "The *default content item* is not shown in the visual path."
msgstr ""

#: ../../serving/traversing.rst:224
# c12e6c3dc496467ca8b5fa5caf633c7c
msgid "The *default view* is not shown in the visual path."
msgstr ""

#: ../../serving/traversing.rst:226
# efd72ffdfe1f43daa01be2c65e4d0c21
msgid "The canonical object is the context object which the user sees from the request URL:"
msgstr ""

#: ../../serving/traversing.rst:236
# 7b2601a02c8c4b7eab1d8255108a2a49
msgid "Getting object URL"
msgstr ""

#: ../../serving/traversing.rst:238
# 8ac4bdd3ca954119add5f1dd08432e1f
msgid "Use ``absolute_url()``. See Traversable_."
msgstr ""

#: ../../serving/traversing.rst:240
# 9ff4cb47697048d9a4d78676073a56d3
msgid "**URL mangling warning**: ``absolute_url()`` is sensitive to virtual host URL mappings. ``absolute_url()`` will return different results depending on if you access your site from URLs http://yourhost/ or http://yourhost:8080/Plone.  Do not persistently store the result of ``absolute_url()``."
msgstr ""

#: ../../serving/traversing.rst:251
# dc6120a0fac34473a16f08e8309ef5af
msgid "Getting the parent"
msgstr ""

#: ../../serving/traversing.rst:253
# 3e97bfac0b4e4f7db3514737cc5e2ce7
msgid "The object *parent* is accessible is acquisition_ chain for the object is set."
msgstr ""

#: ../../serving/traversing.rst:256
# 4a4141d0f7444f409edfa34c33a4defc
msgid "Use ``aq_parent``::"
msgstr ""

#: ../../serving/traversing.rst:260
# ddadee714bb445e3830da7bca65fe0c0
msgid "The parent is defined as ``__parent__`` attribute of the object instance::"
msgstr ""

#: ../../serving/traversing.rst:264
# a433ef1645894761ba6f1db30a91297b
msgid "``__parent__`` is set when object's ``__of__()`` method is called::"
msgstr ""

#: ../../serving/traversing.rst:270
# 1eab242fa7d14f51b75fc6e0db7fa475
msgid "Getting all parents"
msgstr ""

#: ../../serving/traversing.rst:307
# f90640643c35497488a98ba9267be45a
msgid "Getting the site root"
msgstr ""

#: ../../serving/traversing.rst:309
# 4bd5750b8a63470ba2d80835d943a444
msgid "You can resolve the site root if you have the handle to any context object."
msgstr ""

#: ../../serving/traversing.rst:312
# 9d6e5994bad042afb3217d16a5907e7c
msgid "Using portal_url tool"
msgstr ""

#: ../../serving/traversing.rst:322
# 1ab8d0c0837a40d589d9e72fdfbc50b0
msgid "You can also do shortcut using acquisition::"
msgstr ""

#: ../../serving/traversing.rst:326
# 440308cc6b96402e8fe8eed4a7d5d8a5
msgid "Application code should use the ``getToolByName`` method, rather than simply acquiring the tool by name, to ease forward migration (e.g., to Zope3)."
msgstr ""

#: ../../serving/traversing.rst:331
# e9db35f70b934085ac0dfafda1322130
msgid "Using ``getSite()``"
msgstr ""

#: ../../serving/traversing.rst:333
# 6f0d7c746bad4b268006e272d46638bd
msgid "Site is also stored as a thread-local variable. In Zope each request is processed in its own thread. Site thread local is set when the request processing starts."
msgstr ""

#: ../../serving/traversing.rst:337
# 2799290db1da4ee9a7dfb7b370dd1650
msgid "You can use this method even if you do not have the context object available, assuming that your code is called after Zope has traversed the context object once."
msgstr ""

#: ../../serving/traversing.rst:347
# 52dadf78ee0d4a53b8265a7498c18dd2
msgid "Before Plone 4.3 getSite resided in zope.app.component.hooks. See http://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-4.2-to-4.3/referencemanual-all-pages"
msgstr ""

#: ../../serving/traversing.rst:350
# d31de4365119470c98ac800bb2d79a39
msgid "Due to the fact that Plone does not show the default content item as a separate object, the page you are viewing in the browser from the site root URL is not necessary the root item itself. For example, in the default Plone installation this URL internally maps to Page whose id is ``front-page`` and you can still query the actual parent object which is the site root."
msgstr ""

#: ../../serving/traversing.rst:357
# c337019e809440bd970050b573ecda91
msgid "If you need to traverse using user visible breadcrumbs, see how breadcrumbs viewlet code does it."
msgstr ""

#: ../../serving/traversing.rst:361
# 5085cd4898dd428cb15bf1cd58b672f5
msgid "Traversing back to the site root"
msgstr ""

#: ../../serving/traversing.rst:363
# ecfaff779c824b2eaeb730d725aeb43c
msgid "Sometimes ``getSite()`` or ``portal_url`` are not available, but you still have the acquisition chain intact. In these cases you can simply traverse parent objects back to the site root using ``aq_parent`` accessor::"
msgstr ""

#: ../../serving/traversing.rst:386
# a2ceedaea6564d8198f947970b95fcf8
msgid "Checking for the site root"
msgstr ""

#: ../../serving/traversing.rst:388
# 66f77272a68847b4859bc9c654393873
msgid "You can check if the current context object is Plone the site root::"
msgstr ""

#: ../../serving/traversing.rst:398
# b91a6a1ee9e44f4e83d818af607e39d7
msgid "Navigation root"
msgstr ""

#: ../../serving/traversing.rst:400
# f27f9c45cfbc431aa9028ec4768fe8dc
msgid "In Plone, the Plone site root is not necessarily the navigation root (one site can contain many navigation trees for example for the nested subsites)."
msgstr ""

#: ../../serving/traversing.rst:403
# 0979a58cb1064b7b90c3d3d8ad62028e
msgid "The navigation root check has the same mechanism as the site root check::"
msgstr ""

#: ../../serving/traversing.rst:412
# 8aa8c517b90d4870a9e0c3cff11904f3
msgid "More info"
msgstr ""

#: ../../serving/traversing.rst:414
# 6bcd8bb6b36f4e64963bb0868a24c0f1
msgid "http://plone.org/products/plone/roadmap/234"
msgstr ""

#: ../../serving/traversing.rst:417
# a4be610661cf4d61ba3901359c7de083
msgid "Getting Zope application server handle"
msgstr ""

#: ../../serving/traversing.rst:419
# f24c9493bc34440aaef833ff1ce80cde
msgid "You can also access other sites within the same application server from your code."
msgstr ""

#: ../../serving/traversing.rst:429
# 55d4c1ef30f84d10a8dee4517c39b8ff
msgid "Acquisition effect"
msgstr ""

#: ../../serving/traversing.rst:431
# 8f1ba9a4d41248a9939338e0bade0a6c
msgid "Sometimes traversal can give you attributes which actually do not exist on the object, but are inherited from the parent objects in the persistent object graph. See :term:`acquisition`."
msgstr ""

#: ../../serving/traversing.rst:436
# 9faf191030ed4d76a63f55d78ae22d85
msgid "Default content item"
msgstr ""

#: ../../serving/traversing.rst:438
# 3344a42c506c4536a82547e1c570b54f
msgid "Default content item or view sets some challenges for the traversing, as the object published path and internal path differ."
msgstr ""

#: ../../serving/traversing.rst:441
# bf7b5f2edf7f4ca08c4c5bd976535869
msgid "Below is an example to get the folder of the published object (parent folder for the default item) in page templates:"
msgstr ""

#: ../../serving/traversing.rst:451
# 4771543ad42143a7b7899157c9047901
msgid "More info:"
msgstr ""

#: ../../serving/traversing.rst:453
# 1dcbe693434c42d8bd1cc0ac36c5c243
msgid "See :doc:`plone_context_state helper </misc/context>`"
msgstr ""

#: ../../serving/traversing.rst:456
# cba13ae88a944a5a8052147c21e305f2
msgid "Checking if an item is the site front page"
msgstr ""

#: ../../serving/traversing.rst:458
# 7b11a89c0cc44c81b58883325f92083b
msgid "Example code below::"
msgstr ""

#: ../../serving/traversing.rst:478
# b5f6bbb7323b45259994f8bf36ff2a28
msgid "Custom traversal"
msgstr ""

#: ../../serving/traversing.rst:480
# 716907053bfb4b13a20d11cc8904ed9c
msgid "There exist many ways to make your objects traversable:"
msgstr ""

#: ../../serving/traversing.rst:482
# 9183bf373f094b0dbb7e58373d374420
msgid "``__getitem__()`` which makes your objects act like Python dictionary. This is the simplest method and recommended."
msgstr ""

#: ../../serving/traversing.rst:485
# 117b5a12d7164678988c133f39bcd76d
msgid "``IPublishTraverse`` interface. There is an example below and works for making nice urls and path munging."
msgstr ""

#: ../../serving/traversing.rst:488
# b008f634c03e4824b57f30e2ca0d4778
msgid "``ITraversable`` interface. You can create your own traversing hooks. ``zope.traversing.interfaces.ITraversable`` provides an interface traversable objects must provider. You need to register ``ITraversable`` as adapter for your content types.  This is only for publishing methods for HTTP requests."
msgstr ""

#: ../../serving/traversing.rst:494
# 7de78dc4b714433f8ea1bbd2a7389e6f
msgid "``__bobo_traverse__()`` which is an archaic method from the early 2000s."
msgstr ""

#: ../../serving/traversing.rst:496
# e40251e14d2947d6abc9ed3e86026f85
msgid "Zope traversal is a minefield. There are different traversers. One is the *ZPublisher traverser* which does HTTP request looks.  One is ``OFS.Traversable.unrestrictedTraverse()`` which is used when you call traverse from Python code. Then another case is ``zope.tales.expression.PathExpr`` which uses a really simple traverser."
msgstr ""

#: ../../serving/traversing.rst:502
# 19f44926bb8149788b7400ee3a6a3fd5
msgid "If an ``AttributeError`` is risen inside a ``traverse()`` function bad things happen, as Zope publisher specially handles this and raises a ``NotFound`` exception which will mask the actual problem."
msgstr ""

#: ../../serving/traversing.rst:506
# 275acf1861244942b37fa0a95cefec94
msgid "Example using ``__getitem__()``::"
msgstr ""

#: ../../serving/traversing.rst:542
# faa32fb85b0243b695c57481e8b346f5
msgid "Example using ``IPublishTraverse``::"
msgstr ""

#: ../../serving/traversing.rst:603
# eae21159abe443b186c49045f612d751
msgid "More information:"
msgstr ""

#: ../../serving/traversing.rst:605
# bec73b7bd48345d2932e7e82f59fd911
msgid "http://play.pixelblaster.ro/blog/archive/2006/10/21/custom-traversing-with-five-and-itraversable"
msgstr ""

#: ../../serving/traversing.rst:608
# 1784651896174507a78e74473d4583f8
msgid "Traverse events"
msgstr ""

#: ../../serving/traversing.rst:610
# 25bfce2c031541959be0ccc5cb334640
msgid "Use ``zope.traversing.interfaces.IBeforeTraverseEvent`` for register a traversing hook for Plone site object or such."
msgstr ""

#: ../../serving/traversing.rst:627
# 244f14bf1ce84ae9bdcb40b486cca48a
msgid "Use ``ZPublisher.BeforeTraverse`` to register traverse hooks for any objects."
msgstr ""

#: ../../serving/traversing.rst:630
# 4c13146ec0b149f6aa536a840d48efd8
msgid "Example - not sure if before travese hooks are persistent or not"
msgstr ""

#: ../../serving/traversing.rst:633
# d84dfbad2d6e40be8062d522457eebac
msgid "Advanced traversing with search conditions"
msgstr ""

#: ../../serving/traversing.rst:635
# a1ecb8335f144ed984d50c07495def55
msgid "All Plone content should exist in the :doc:`portal_catalog </searching_and_indexing/query>`.  Catalog provides fast query access with various indexes to the Plone content."
msgstr ""

#: ../../serving/traversing.rst:640
# 2a4d9f985ba1478397e061176050336a
msgid "Other resources"
msgstr ""

#: ../../serving/traversing.rst:642
# 6b85cbb5a62a489caa9ed7b5dd0651ec
msgid "See object publishing_."
msgstr ""

#: ../../serving/webdav.rst:3
# 20c103d4b2554f18a2749ff364937421
msgid "WebDAV"
msgstr ""

#: ../../serving/webdav.rst:7
# 9bbad2808aa349f3b521f80305e5beec
msgid "WebDAV is a protocol to manage your site directly from MS Windows Explorer and such.  Plone supports WebDAV without add-ons."
msgstr ""

#: ../../serving/webdav.rst:15
# df6bc3ec24d74a7d88df9cc71967b625
msgid "WebDAV is enabled by default. A Zope server listening on port 8080 will also accept WebDAV traffic on that port. (http://stackoverflow.com/questions/9127269/how-can-i-stop-people-accessing-a-plone-server-via-webdav)"
msgstr ""

#: ../../serving/webdav.rst:20
# c780af13434b46059fc7afa3f92a1b85
msgid "Enabling WebDAV on an extra port in Zope"
msgstr ""

#: ../../serving/webdav.rst:22
# c5641b1861714fea8ca3d842d50224b4
msgid "Modify your buildout configuration's client setup to add a webdav address:"
msgstr ""

#: ../../serving/webdav.rst:24
# 15c369e815e244f296c716ede7b782c5
msgid "Short ``buildout.cfg`` example::"
msgstr ""

#: ../../serving/webdav.rst:33
# cee8840e647745bcb49fecb8a86d6715
msgid "Alternative ``buildout.cfg`` configuration snippet which might be needed for some WebDAV clients::"
msgstr ""

#: ../../serving/webdav.rst:45
# fd7333a29e5c4a5ba578e51d7347184f
msgid "These snippets will be in the **generated** ``parts/instance/zope.conf`` after buildout has been re-run."
msgstr ""

#: ../../serving/webdav.rst:48
# 0b896c640c2b414c87feed0036207d8b
msgid "This will enable the WebDAV server on http://www.mydomain.com:1980/. Note that you cannot use this URL in your web browser, just in WebDAV clients. Using the web browser will give you an error message ``AttributeError: manage_FTPget``. You could also just run the WebDAV server on ``localhost`` with address 1980, forcing you to either use a WebDAV client locally or proxy WebDAV through Apache."
msgstr ""

#: ../../serving/webdav.rst:56
# c939c1d0945c4a918c1384efa094fd63
msgid "Disabling WebDAV"
msgstr ""

#: ../../serving/webdav.rst:58
# 3df8d7ec4dac42ea91e01d6557cef601
msgid "You can't disable WebDAV in Plone itself, it's tightly integrated in Zope. You could take away the \"Access WebDAV\" permission from everyone, but the Zope server will still answer each request."
msgstr ""

#: ../../serving/webdav.rst:62
# 16a5fe5393824ac28d2269b8023b3168
msgid "What you can do: Make your web server filter out the WebDAV commands. This will stop WebDAV requests from reaching your Zope server."
msgstr ""

#: ../../serving/webdav.rst:66
# e0c26781d4234edbacace44073d34f80
msgid "Nginx"
msgstr ""

#: ../../serving/webdav.rst:68
# 454c577c70b244b295766f6702861610
msgid "For nginx, this is done by adding::"
msgstr ""

#: ../../serving/webdav.rst:72
# 1922846940864454a44a1f0a869955bd
msgid "to the server block in your nginx.conf. (http://wiki.nginx.org/HttpDavModule)"
msgstr ""

#: ../../serving/webdav.rst:74
# c75757dd8d7443af9a8e8c70f0b0d0db
msgid "If you do not use the HttpDavModule, you can add::"
msgstr ""

#: ../../serving/webdav.rst:80
# 8d6ce197c76d4b70b46ea9c32661cbc8
msgid "to the location block."
msgstr ""

#: ../../serving/webdav.rst:83
# ddf396486f354e29a04aee72d9ce5c72
msgid "Apache"
msgstr ""

#: ../../serving/webdav.rst:85
# baf5c93353ee452484c51b54414707e3
msgid "For Apache, you can use the ``limit`` statement, see http://httpd.apache.org/docs/current/mod/core.html#limit"
msgstr ""

#: ../../serving/webdav.rst:89
# 586206862eec409194c0644b1d582beb
msgid "Supporting WebDAV in your custom content"
msgstr ""

#: ../../serving/webdav.rst:91
# 088df2f4d87f4802b7959f0d6e5f5a20
msgid "Please read more about it in the `Dexterity WebDAV manual <https://github.com/plone/plone.dexterity/tree/master/docs/WebDAV.txt>`_."
msgstr ""

#: ../../serving/webdav.rst:95
# 72efa7c4f3f54ccbaee6a0b4e5586a18
msgid "WebDAV notes"
msgstr ""

#: ../../serving/webdav.rst:97
# e4e05261359648c0b69293b00cb88641
msgid "WebDAV uses a number of HTTP verbs to perform different operations. The following notes describe how they are implemented in Zope 2 and Dexterity."
msgstr ""

#: ../../serving/webdav.rst:101
# 890317fa5010481cb5bd21c738846e45
msgid "Background"
msgstr ""

#: ../../serving/webdav.rst:103
# dbc336c4c22b4c2284875bb719a547fc
msgid "Basic WebDAV support can be found in the ``webdav`` package. This defines two base classes, ``webdav.Resource.Resource`` and ``webdav.Collection.Collection``.  ``Collection`` extends ``Resource``. These are mixed into item and container content objects, respectively."
msgstr ""

#: ../../serving/webdav.rst:108
# 98581dd6455a48fe9a59d8cc4782d77a
msgid "The webdav package also defines the ``NullResource`` object. A ``NullResource`` is a kind of placeholder, which supports the HTTP verbs ``HEAD``, ``PUT``, and ``MKCOL``."
msgstr ""

#: ../../serving/webdav.rst:112
# 45592a024cae4b26a60cc9fc11ef31f1
msgid "Containers based on ``ObjectManager`` (including those in Dexterity) will return a ``NullResource`` if they cannot find the requested object and the request is a WebDAV request."
msgstr ""

#: ../../serving/webdav.rst:116
# 91cad9b99d01417cb0b3d55dafac87ad
msgid "The ``zope.filerepresentation`` package defines a number of interfaces which are intended to help manage file representations of content objects. Dexterity uses these interfaces to allow the exact file read and write operations to be overridden without subclassing."
msgstr ""

#: ../../serving/webdav.rst:122
# 14261135817142a9b2f8970bb9ac8021
msgid "``HEAD``"
msgstr ""

#: ../../serving/webdav.rst:124
# 3fb2074d00c945e4b9cb2a4169e2adc9
msgid "A ``HEAD`` request retrieves headers only."
msgstr ""

#: ../../serving/webdav.rst:126
# 40178af6faf24cada2289946bb0a3334
msgid "``Resource.HEAD()`` sets ``Content-Type`` based on ``self.content_type()``, ``Content-Length`` based on ``self.get_size()``, ``Last-Modified`` based on ``self._p_mtime``, and an ETag based on ``self.http__etag()``, if available."
msgstr ""

#: ../../serving/webdav.rst:130
# 7f5ac432a94147258c53e82e95f6a885
msgid "``Collection.HEAD()`` looks for ``self.index_html.HEAD()`` and returns its value if that exists. Otherwise, it returns a ``405 Method Not Allowed`` response. If there is no ``index_html`` object, it returns ``404 Not Found``."
msgstr ""

#: ../../serving/webdav.rst:135
# 868d240d17244fefbe56f8c0ced447b9
msgid "``GET``"
msgstr ""

#: ../../serving/webdav.rst:137
# dfbca27e9f2a40cea1816277bbe8a874
msgid "A ``GET`` request retrieves headers and body."
msgstr ""

#: ../../serving/webdav.rst:139
# 228ca74b03804c399bc3bacd7966c410
msgid "Zope calls ``manage_DAVget()`` to retrieve the body. The default implementation calls ``manage_FTPget()``."
msgstr ""

#: ../../serving/webdav.rst:142
# ea991f182f844e56ae7a6bafd80a5570
msgid "In Dexterity, ``manage_FTPget()`` adapts ``self`` to ``IRawReadFile`` and uses its ``mimeType`` and ``encoding`` properties to set the ``Content-Type`` header, and its ``size()`` method to set ``Content-Length``."
msgstr ""

#: ../../serving/webdav.rst:146
# 0c97e570ec0349ca88c53b0e89a00200
msgid "If the ``IRawReadFile`` adapter is also an ``IStreamIterator``, it will be returned for the publisher to consume directly. This provides for efficient serving of large files, although it does require that the file can be read in its entirety with the ZODB connection closed. Dexterity solves this problem by writing the file content to a temporary file on the server."
msgstr ""

#: ../../serving/webdav.rst:152
# 61e098432f7546efaf0fe537b98c7a0a
msgid "If the ``IRawReadFile`` adapter is not a stream iterator, its contents are returned as a string, by calling its ``read()`` method. Note that this loads the entire file contents into memory on the server."
msgstr ""

#: ../../serving/webdav.rst:156
# 8c58b9404eb74ce8ac46d186ac2e6f06
msgid "The default ``IRawReadFile`` implementation for Dexterity content returns an :RFC:`2822` style message document. Most fields on the object and any enabled behaviours will be turned into UTF-8 encoded headers. The primary field, if any, will be returned in the body, also most likely encoded as an UTF-8 encoded string. Binary data may be base64 encoded instead."
msgstr ""

#: ../../serving/webdav.rst:162
# 8ccfefed1e3144bfb050ca9bd0fc896b
msgid "A type which wishes to override this behaviour can provide its own adapter. For example, an image type could return the raw image data."
msgstr ""

#: ../../serving/webdav.rst:166
# a43fcebd7dc44b80970efaf95a02eb3f
msgid "``PUT``"
msgstr ""

#: ../../serving/webdav.rst:168
# 7950a7e796424b279504e6ef4a87552f
msgid "A ``PUT`` request reads the body of a request and uses it to update a resource that already exists, or to create a new object."
msgstr ""

#: ../../serving/webdav.rst:171
# 9c1dc146428c429880b8d8527467a63a
msgid "By default ``Resource.PUT()`` fails with ``405 Method Not Allowed``. That is, it is not by default possible to ``PUT`` to a resource that already exists. The same is true of ``Collection.PUT()``."
msgstr ""

#: ../../serving/webdav.rst:175
# 6a95b0272d0b4df6a7e5930f8eb5c5d3
msgid "In Dexterity, the ``PUT()`` method is overridden to adapt self to ``zope.filerepresentation.IRawWriteFile``, and call its ``write()`` method one or more times, writing the contents of the request body, before calling ``close()``. The ``mimeType`` and ``encoding`` properties will also be set based on the value of the ``Content-Type`` header, if available."
msgstr ""

#: ../../serving/webdav.rst:181
# 62c062673c5b4b00be0b113af8edc4e9
msgid "The default implementation of ``IRawWriteFile`` for Dexterity objects assumes the input is an :RFC:`2822` style message document. It will read header values and use them to set fields on the object or in behaviours, and similarly read the body and update the corresponding primary field."
msgstr ""

#: ../../serving/webdav.rst:186
# 7830f5bbe1c64d4f9a5b8c014f2f59e5
msgid "``NullResource.PUT()`` is responsible for creating a new content object and initialising it (recall that a ``NullResource`` may be returned if a WebDAV request attempts to traverse to an object which does not exist). It sniffs the content type and body from the request, and then looks for the ``PUT_factory()`` method on the parent folder."
msgstr ""

#: ../../serving/webdav.rst:192
# 2d7bdccf5d2249ff93500657372fe63e
msgid "In Dexterity, ``PUT_factory()`` is implemented to look up an ``IFileFactory`` adapter on self and use it to create the empty file. The default implementation will use the ``content_type_registry`` tool to determine a type name for the request (e.g. based on its extension or MIME type), and then construct an instance of that type."
msgstr ""

#: ../../serving/webdav.rst:198
# 97dc561cc9a54f739826a3d03f5d1ac6
msgid "Once an instance has been constructed, the object will be initialised by calling its ``PUT()`` method, as above."
msgstr ""

#: ../../serving/webdav.rst:201
# 02af7194b0ca4b86a9fe7be3e561ecd9
msgid "Note that when content is created via WebDAV, an ``IObjectCreatedEvent`` will be fired from the ``IFileFactory`` adapter, just after the object has been constructed. At this point, none of its values will be set. Subsequently, at the end of the ``PUT()`` method, an ``IObjectModifiedEvent`` will be fired. This differs from the event sequence of an object created through the web. Here, only an ``IObjectCreatedEvent`` is fired, and only *after* the object has been fully initialised."
msgstr ""

#: ../../serving/webdav.rst:210
# a238ceda528c4a2898559a062f6ea9f8
msgid "``DELETE``"
msgstr ""

#: ../../serving/webdav.rst:212
# 1fb01fc2d732430291a949836f98ec24
msgid "A ``DELETE`` request instructs the WebDAV server to delete a resource."
msgstr ""

#: ../../serving/webdav.rst:214
# 6ca90d0dcc084a7db567f9651e9a551f
msgid "``Resource.DELETE()`` calls ``manage_delObjects()`` on the parent folder to delete an object."
msgstr ""

#: ../../serving/webdav.rst:217
# 2f84a4136d2440ddaeeb922fb16efdeb
msgid "``Collection.DELETE()`` does the same, but checks for write locks of all children of the collection, recursively, before allowing the delete."
msgstr ""

#: ../../serving/webdav.rst:221
# 3041c2b0619440bd9a6d9e9ecf2f2945
msgid "``PROPFIND``"
msgstr ""

#: ../../serving/webdav.rst:223
# 85d97ad445794faca94beb9ac993f638
msgid "A ``PROPFIND`` request returns all or a set of WebDAV properties. WebDAV properties are metadata used to describe an object, such as the last modified time or the author."
msgstr ""

#: ../../serving/webdav.rst:227
# f0e88d287c8c4e14af1ccc841c74e23a
msgid "``Resource.PROPFIND()`` parses the request and then looks for a ``propertysheets`` attribute on self."
msgstr ""

#: ../../serving/webdav.rst:230
# 0b628e67d1bd49078060c2e7f031f280
msgid "If an ``allprop`` request is received, it calls ``dav__allprop()``, if available, on each property sheet. This method returns a list of name/value pairs in the correct WebDAV XML encoding, plus a status."
msgstr ""

#: ../../serving/webdav.rst:234
# 78400a3a1fa94163b24460a17586174d
msgid "If a ``propnames`` request is received, it calls ``dav__propnames()``, if available, on each property sheet. This method returns a list of property names in the correct WebDAV XML encoding, plus a status."
msgstr ""

#: ../../serving/webdav.rst:238
# 87deadacdd2b41e8a842d38ff40f86db
msgid "If a ``propstat`` request is received, it calls ``dav__propstats()``, if available, on each property sheet, for each requested property. This method returns a property name/value pair in the correct WebDAV XML encoding, plus a status."
msgstr ""

#: ../../serving/webdav.rst:243
# e3712a7ef47144aead63d712681e4566
msgid "The ``PropertyManager`` mixin class defines the ``propertysheets`` variable to be an instance of ``DefaultPropertySheets``. This in turn has two property sheets, ``default``, a ``DefaultProperties`` instance, and ``webdav``, a ``DAVProperties`` instance."
msgstr ""

#: ../../serving/webdav.rst:248
# 0c126aa6808f4fb5914c41e3307f1e6b
msgid "The ``DefaultProperties`` instance contains the main property sheet. This typically has a ``title`` property, for example."
msgstr ""

#: ../../serving/webdav.rst:251
# d2a300fb255a43f19a4e6a154d210350
msgid "``DAVProperties`` will provides various core WebDAV properties. It defines a number of read-only properties: ``creationdate``, ``displayname``, ``resourcetype``,  ``getcontenttype``, ``getcontentlength``, ``source``, ``supportedlock``, and ``lockdiscovery``. These in turn are delegated to methods prefixed with ``dav__``, so e.g. reading the ``creationdate`` property calls ``dav__creationdate()`` on the property sheet instance. These methods in turn return values based on the property manager instance (i.e. the content object). In particular:"
msgstr ""

#: ../../serving/webdav.rst:260
# 86a57286d5944fd7a22686bf59b738c4
msgid "``creationdate``"
msgstr ""

#: ../../serving/webdav.rst:261
# 09844d34403643f5b581329d53627261
msgid "returns a fixed date (January 1st, 1970)."
msgstr ""

#: ../../serving/webdav.rst:262
# 202914ab225e4ae8a19eab10d6f3b250
msgid "``displayname``"
msgstr ""

#: ../../serving/webdav.rst:263
# 7a9f312eff8e4512a17c77b3770087f5
msgid "returns the value of the ``title_or_id()`` method"
msgstr ""

#: ../../serving/webdav.rst:264
# 6646dd17423340e69f0187f2cc5192b2
msgid "``resourcetype``"
msgstr ""

#: ../../serving/webdav.rst:265
# 0fd6242fcb8846148d09fc7b0119684d
msgid "returns an empty string or <n:collection/>"
msgstr ""

#: ../../serving/webdav.rst:266
# c3c1a4849d8d4b8292822ddbd97d8f28
msgid "``getlastmodified``"
msgstr ""

#: ../../serving/webdav.rst:267
# fb6cf33f3e6243688ac521e8c998f4e4
msgid "returns the ZODB modification time"
msgstr ""

#: ../../serving/webdav.rst:271
# a19ceb722c49435db0d0dd7b6a9b6098
msgid "``getcontenttype``"
msgstr ""

#: ../../serving/webdav.rst:269
# a2bbf757f3cf4e41af55c400ae6d27cd
msgid "delegates to the ``content_type()`` method, falling back on the ``default_content_type()`` method. In Dexterity, ``content_type()`` is implemented to look up the ``IRawReadFile`` adapter on the context and return the value of its ``mimeType`` property."
msgstr ""

#: ../../serving/webdav.rst:277
# 8cd4473c9d444fcaa5d9cfd49f0bd23a
msgid "``getcontentlength``"
msgstr ""

#: ../../serving/webdav.rst:274
# 90d40089259849a08adcf96f6ea5a39a
msgid "delegates to the ``get_size()`` method (which is also used for the \"size\" column in Plone folder listings). In Dexterity, this looks up a ``zope.size.interfaces.ISized`` adapter on the object and calls ``sizeForSorting()``. If this returns a unit of ``'bytes'``, the value portion is used. Otherwise, a size of 0 is returned."
msgstr ""

#: ../../serving/webdav.rst:279
# df1b0c007f4947b8b226c3fa3003996a
msgid "``source``"
msgstr ""

#: ../../serving/webdav.rst:280
# 6777eb72266f411782d6ebec9d5d4335
msgid "returns a link to ``/document_src``, if that attribute exists"
msgstr ""

#: ../../serving/webdav.rst:281
# 9c7c66013d0c4c41a055fdf92ac3ea59
msgid "``supportedlock``"
msgstr ""

#: ../../serving/webdav.rst:282
# 0df9e69583f84afaa1a1c128d376e557
msgid "indicates whether ``IWriteLock`` is supported by the content item"
msgstr ""

#: ../../serving/webdav.rst:284
# 0de05910025047798252bc77cf8e0f94
msgid "``lockdiscovery``"
msgstr ""

#: ../../serving/webdav.rst:284
# e251c05138154c1796ba31ea54b0f66d
msgid "returns information about any active locks"
msgstr ""

#: ../../serving/webdav.rst:286
# f3e898efe3e64499ab76b2c7a7863b52
msgid "Other properties in this and any other property sheets are returned as stored when requested."
msgstr ""

#: ../../serving/webdav.rst:289
# 7351bc12767e492bbd593b028492c77b
msgid "If the ``PROPFIND`` request specifies a depth of 1 or infinity (i.e. the client wants properties for items in a collection), the process is repeated for all items returned by the ``listDAVObjects()`` methods, which by default returns all contained items via the ``objectValues()`` method."
msgstr ""

#: ../../serving/webdav.rst:297
# 5d4e473b6615479ca5d58ac3a5c3a95f
msgid "``PROPPATCH``"
msgstr ""

#: ../../serving/webdav.rst:299
# 7afd184dd103484cac89d5d22c7c53ad
msgid "A ``PROPPATCH`` request is used to update the properties on an existing object."
msgstr ""

#: ../../serving/webdav.rst:301
# d2736d93ca0e4062a4d178d259f03768
msgid "``Resource.PROPPATCH()`` deals with the same types of properties from property sheets as ``PROPFIND()``. It uses the ``PropertySheet`` API to add or update properties as appropriate."
msgstr ""

#: ../../serving/webdav.rst:306
# 0ce4328ea6904697a9184e87c1c9173a
msgid "``MKCOL``"
msgstr ""

#: ../../serving/webdav.rst:308
# f1475fb2bd4744caac32314fcc53ede2
msgid "A ``MKCOL`` request is used to create a new collection resource, i.e. create a new folder."
msgstr ""

#: ../../serving/webdav.rst:311
# 085d74805f8746f7a8afa585465b4975
msgid "``Resource.MKCOL()`` raises 405 Method Not Allowed, because the resource already exists (remember that in WebDAV, the ``MKCOL`` request, like a ``PUT`` for a new resource, is sent with a location that specifies the desired new resource location, not the location of the parent object)."
msgstr ""

#: ../../serving/webdav.rst:316
# 64d659d372ae4c01a664edbcb10c7652
msgid "``NullResource.MKCOL()`` handles the valid case where a ``MKCOL`` request has been sent to a new resource. After checking that the resource does not already exist, that the parent is indeed a collection (folderish item), and that the parent is not locked, it calls the ``MKCOL_handler()`` method on the parent folder."
msgstr ""

#: ../../serving/webdav.rst:322
# 3a41e6dabf434ba881145573b87756f2
msgid "In Dexterity, ``MKCOL()_handler`` is overridden to adapt self to an ``IDirectoryFactory`` from ``zope.filerepresentation`` and use this to create a directory. The default implementation simply calls ``manage_addFolder()`` on the parent. This will create an instance of the ``Folder`` type."
msgstr ""

#: ../../serving/webdav.rst:328
# f57245cbed6f4902baca3d4ad0a89057
msgid "``COPY``"
msgstr ""

#: ../../serving/webdav.rst:330
# 401d962263fb453f8cb01b924bebdfc4
msgid "A ``COPY`` request is used to copy a resource."
msgstr ""

#: ../../serving/webdav.rst:332
# 3a28d11f649f4ae9aaade85491bade8a
msgid "``Resource.COPY()`` implements this operation using the standard Zope content object copy semantics."
msgstr ""

#: ../../serving/webdav.rst:336
# a59c28c5131f428ab309e921733a104c
msgid "``MOVE``"
msgstr ""

#: ../../serving/webdav.rst:338
# 65e7cf43171446478b8dd3aabae7f103
msgid "A ``MOVE`` request is used to relocate or rename a resource."
msgstr ""

#: ../../serving/webdav.rst:340
# 76d9ea28e80a47b7890bc77e1573452c
msgid "``Resource.MOVE()`` implements this operation using the standard Zope content object move semantics."
msgstr ""

#: ../../serving/webdav.rst:344
# 739720cdf4504632a962bfd9013e0133
msgid "``LOCK``"
msgstr ""

#: ../../serving/webdav.rst:346
# 30ec349c5c3143e99305755fc110996e
msgid "A ``LOCK`` request is used to lock a content object."
msgstr ""

#: ../../serving/webdav.rst:348
# ddb2769a35714ec681912aca56ce5bcd
msgid "All relevant WebDAV methods in the ``webdav`` package are lock aware. That is, they check for locks before attempting any operation that would violate a lock."
msgstr ""

#: ../../serving/webdav.rst:353
# f340abd1dd63482e926cf2790f653cae
msgid "Also note that ``plone.locking`` uses the lock implementation from the ``webdav`` package by default."
msgstr ""

#: ../../serving/webdav.rst:356
# 9c74efacd6724a65ae5469eeff8c7155
msgid "``Resource.LOCK()`` implements locking and lock refresh support."
msgstr ""

#: ../../serving/webdav.rst:358
# 1334ffc9cab44f4d856559dcff95a2b4
msgid "``NullResource.LOCK()`` implements locking on a ``NullResource``. In effect, this means locking the name of the non-existent resource. When a ``NullResource`` is locked, it is temporarily turned into a ``LockNullResource`` object, which is a persistent object set onto the parent (remember that a ``NullResource`` is a transient object returned when a child object cannot be found in a WebDAV request)."
msgstr ""

#: ../../serving/webdav.rst:366
# 5729d0053fde4fdd8dcb95fed4546e5e
msgid "``UNLOCK``"
msgstr ""

#: ../../serving/webdav.rst:368
# af2e7b553ff74acf8cf653bc599164c3
msgid "An ``UNLOCK`` request is used to unlock a locked object."
msgstr ""

#: ../../serving/webdav.rst:370
# 54dcb91fe0b048029a0af9edd3be9921
msgid "``Resource.UNLOCK()`` handles unlock requests."
msgstr ""

#: ../../serving/webdav.rst:372
# a2060c4eedff4dc1894d296805473f8a
msgid "``LockNullResource.UNLOCK()`` handles unlocking of a ``LockNullResource``. This deletes the ``LockNullResource`` object from the parent container."
msgstr ""

#: ../../serving/webdav.rst:376
# 4847b4e8618649a4b31aa09de84a7642
msgid "Fields on container objects"
msgstr ""

#: ../../serving/webdav.rst:378
# c0480a5cb5154d7bbc5b9e2ae6d49656
msgid "When browsing content via WebDAV, a container object (folderish item) will appear as a folder. Most likely, this object will also have content in the form of schema fields. To make this accessible, Dexterity containers expose a pseudo-file with the name '_data', by injecting this into the return value of ``listDAVObjects()`` and adding a special traversal hook to allow its contents to be retrieved."
msgstr ""

#: ../../serving/webdav.rst:385
# e1c70fa6f0d04b66a372dacf1e90436d
msgid "This pseudo-file supports ``HEAD``, ``GET``, ``PUT``, ``LOCK``, ``UNLOCK``, ``PROPFIND`` and ``PROPPATCH`` requests (an error will be raised if the user attempts to rename, copy, move or delete it). These operate on the container object, obviously. For example, when the data object is updated via a ``PUT`` request, the ``PUT()`` method on the container is called, by default delegating to an ``IRawWriteFile`` adapter on the container."
msgstr ""

#: ../../serving/xmlrpc.rst:3
# 26d88540f7084d4da0145477e7616bb3
msgid "XML-RPC"
msgstr ""

#: ../../serving/xmlrpc.rst:9
# 5d448191e092414eb94acf3349cd216f
msgid "Using XML-RPC remote call protocol to manipulate Plone site."
msgstr ""

#: ../../serving/xmlrpc.rst:14
# bd730c0589dc46a4859a0507eab606aa
msgid "Zope provides transparent XML-RPC support for any traversable object."
msgstr ""

#: ../../serving/xmlrpc.rst:26
#: ../../serving/xmlrpc.rst:61
# 1809a27a52ef4a038ce50d9ec34a55ba
# 17b4525c3b4d4a9eb52ee791d4891aef
msgid "Zope object handles are not transferable across function call boundaries. Thus, you can only call functions with primitive arguments. If you need to call function with object arguments you need to create server side helper code first."
msgstr ""

#: ../../serving/xmlrpc.rst:31
# e5683373dcca4742b94d1b004595260e
msgid "For more information see"
msgstr ""

#: ../../serving/xmlrpc.rst:33
# d97e912a32b04d6780d73680c0ac4149
msgid "transmogrifier.ploneremote"
msgstr ""

#: ../../serving/xmlrpc.rst:36
# cac2fab2f2ce4dbd85b986c335c3706a
msgid "Authentication"
msgstr ""

#: ../../serving/xmlrpc.rst:38
# 274c4b82069040c186c3c3e2b92c5e51
msgid "The simplest way to authenticate the user for XML-RPC calls is to embed HTTP Basic Auth data to URL::"
msgstr ""

#: ../../serving/xmlrpc.rst:49
# a9a54072e66842e188e214989a3dc1d3
msgid "ZPublisher client"
msgstr ""

#: ../../serving/xmlrpc.rst:51
# 4e84dfa1d8944e608e9f49717be0f3d6
msgid "XML-RPC does not marshal objects reliable between remote calls. Getting the real remote object can be done with ZPublisher.Client.Object."
msgstr ""

#: ../../serving/xmlrpc.rst:56
# dc1eecc789b74794ad6763e0610d2fc2
msgid "This approach works only for Python clients and needs Zope libraries available at the client side."
msgstr ""

#: ../../serving/xmlrpc.rst:66
# aa43475dae514e14bb4ef3d174726c6e
msgid "http://svn.zope.org/Zope/tags/ajung-final-zpt-integration-before-merge-savepoint/utilities/load_site.py?rev=67269&view=auto"
msgstr ""

#: ../../serving/xmlrpc.rst:68
# 536406429e3d48d888f40fc651a18147
msgid "http://maurits.vanrees.org/weblog/archive/2009/10/lighting-talks-friday#id2"
msgstr ""

#: ../../serving/xmlrpc.rst:72
# 5dcef65bee314d8589318aac7c2eb7d1
msgid "Web Services API for Plone (wsapi4plone)"
msgstr ""

#: ../../serving/xmlrpc.rst:74
# d16f2378430a4367be832766b496178b
msgid "This is an add-on product exposes more methods available through Zope's XML-RPC api."
msgstr ""

#: ../../serving/xmlrpc.rst:77
# 6739c554705647cc82d6f641b9518c73
msgid "http://plone.org/products/wsapi4plone.core"
msgstr ""

#: ../../serving/xmlrpc.rst:80
# 4cbb08d2b3aa45c9b8c3142503361a95
msgid "Importing an Image Using WSAPI"
msgstr ""

#: ../../serving/xmlrpc.rst:82
# de3fe5cb5a494a2fbc590995612b62da
msgid "In the following example we retrieve, from the 'Pictures' folder, an image called 'red-wine-glass.jpg', post it to a folder called 'ministries' and give it the name 'theimage'."
msgstr ""

#: ../../serving/xmlrpc.rst:100
# 5a7ec3c70d10453195896c95199e7565
msgid "For more information see `wsapi4plone.core <http://plone.org/products/wsapi4plone.core/>`_ add-on product adds XML-RPC operations support for Plone."
msgstr ""

#: ../../serving/xmlrpc.rst:109
# c70d5c3315b94f9596b26766d1925e38
msgid "http://www.zope.org/Members/Amos/XML-RPC"
msgstr ""

