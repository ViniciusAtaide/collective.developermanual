# SOME DESCRIPTIVE TITLE.
# Copyright (C) Plone community and other individual contributors
# This file is distributed under the same license as the Plone Developer Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Developer Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-09 14:22+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../testing_and_debugging/boilerplate_tests.rst:3
# c18d8a57473945d08d84df5e988e7ce3
msgid "Boilerplate tests"
msgstr ""

#: ../../testing_and_debugging/boilerplate_tests.rst:5
# 08a85ace759f4532b46b77018759d313
msgid "These are test snippets useful for common use cases."
msgstr ""

#: ../../testing_and_debugging/boilerplate_tests.rst:8
# 91633e05206e4c6ebba9ba0a739050a3
msgid "See http://plone.org/documentation/manual/developer-manual/testing/writing-a-plonetestcase-unit-integration-test to learn about PloneTestCase helper methods."
msgstr ""

#: ../../testing_and_debugging/boilerplate_tests.rst:12
# 55b9c165b4e04b2d99a0bf93cdc5c199
msgid "Test portal title::"
msgstr ""

#: ../../testing_and_debugging/boilerplate_tests.rst:18
# 520fb7ad0c0f413794a4d3914f55c83c
msgid "Test if view is protected::"
msgstr ""

#: ../../testing_and_debugging/boilerplate_tests.rst:29
# 32893ca7d3b245ff87bb67b1fd6659bb
msgid "Test if object exists in folder::"
msgstr ""

#: ../../testing_and_debugging/boilerplate_tests.rst:35
# 4631bfec1f7d44449819c1ae12c0a9be
msgid "Javascript registered::"
msgstr ""

#: ../../testing_and_debugging/boilerplate_tests.rst:43
# 35d437122d64451c87594c49d69b7724
msgid "CSS registered::"
msgstr ""

#: ../../testing_and_debugging/boilerplate_tests.rst:51
# 3240703677b148769527d14e394f7151
msgid "Test that a certain skin layer is present in portal_skins::"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:3
# 07a2843a50344d8fbf1e29e3ed2eac2e
msgid "Clean uninstall"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:5
#: ../../testing_and_debugging/functional_testing.rst:5
#: ../../testing_and_debugging/logging.rst:5
#: ../../testing_and_debugging/pdb.rst:5
# b65994aa43494f5c915e94e7dc6387be
# eeec938387f549f1af959741bf22c07e
# b4d46e22da084e6fb368010fc6531c98
# 98af339469c04b4687c11144ee72f6d0
msgid "Description"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:7
# 3fa0382214cd4727b4323d819771dc79
msgid "How to test that your Plone add-on uninstalls cleanly"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:12
#: ../../testing_and_debugging/functional_testing.rst:14
#: ../../testing_and_debugging/logging.rst:12
#: ../../testing_and_debugging/pdb.rst:13
#: ../../testing_and_debugging/unit_testing.rst:8
# 8b42e8a9ae874f4f8f04b3db02cbe202
# d01620e4abb646de941ae242ef58a91c
# fbc63b61c31e4cca8b3dd2d9a74461be
# 2ddf1cccf5b24da9abcb3b316c5d9407
# aaeb1ee8fd654b479ab5dcdc9f0d9084
msgid "Introduction"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:14
# 34b9d2f2f64644d58faa2dfcab8b489e
msgid "Clean uninstall means that removing your add-on does not leave Plone site to broken state. Sometimes damage might not be noticed immediately, causing great frustration for the users."
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:17
# 026af29f5e4b4cd9ae6e111118bf351c
msgid "Clean uninstall procedure is"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:19
# 3867099309364dcda3493eac5f756d78
msgid "Use ``Add on installer`` to uninstall any add-ons. This MUST remove all add-on Python objects from the site ZODB database"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:22
# acbb4ea07d6244a483c169e4c46a2832
msgid "Remove eggs from the buildout, rerun buildout"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:24
# 49f0eb2635c948578d5902c15eb68347
msgid "If there are any Python objects, which classes come from the removed egg, around the site cannot be exported or imported anymore. Also, Plone upgrade might fail."
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:29
# 0fa993c674bc496abcfb0653fe1785b5
msgid "Clean uninstall test procedure"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:31
# 91dfd548d3174bdebf6cc3d5f85eb3be
msgid "Manual procedure"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:33
# 1a870ed17c1b4afe8a7f2b94ec3b9568
msgid "Create a Plone site from buildout, with your add-on egg present"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:35
# 69506bf91e024746af30df3cf046bd67
msgid "Install your add-on"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:37
# edda0cbaac364b60bb5aaf5d7c981da0
msgid "Play around with add-on to make sure it stores all its data (settings, local utilities, annotations, etc.)"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:40
# a071ed2b24db4a399fdab2358c8dfdef
msgid "Uninstall add-on"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:42
# 0e765b50d37d436bbc2e9ba9f4c91aa4
msgid "Export Plone site through ZMI as zexp"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:44
# 7cdfe463108447b18453ce524626e6c9
msgid "Create another Plone site from vanilla buildout (no any add-ons installed)"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:46
# 9230e7bc67ae4dda9ad0f092dddd9208
msgid "Import .zexp"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:48
# d486a39a8e934caabd0086ac16ff569f
msgid "If .zexp does not contain any objects from your add-on egg, which is missing in vanilla Plone installation, your add-on installs cleanly"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:52
# b2564f8141294bc2b44ded336abac410
msgid "Example unit test"
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:54
# 1891d98ab8f04344bada4daba72b2236
msgid "This code shows how to test that certain :doc`annotations </components/annotations>` are correctly cleaned."
msgstr ""

#: ../../testing_and_debugging/clean_uninstall.rst:57
#: ../../testing_and_debugging/functional_testing.rst:130
#: ../../testing_and_debugging/functional_testing.rst:141
#: ../../testing_and_debugging/functional_testing.rst:154
#: ../../testing_and_debugging/functional_testing.rst:170
#: ../../testing_and_debugging/functional_testing.rst:181
#: ../../testing_and_debugging/functional_testing.rst:249
#: ../../testing_and_debugging/functional_testing.rst:263
#: ../../testing_and_debugging/functional_testing.rst:362
#: ../../testing_and_debugging/logging.rst:62
#: ../../testing_and_debugging/logging.rst:82
#: ../../testing_and_debugging/pdb.rst:56
#: ../../testing_and_debugging/pdb.rst:78
#: ../../testing_and_debugging/pdb.rst:224
#: ../../testing_and_debugging/unit_testing.rst:142
#: ../../testing_and_debugging/unit_testing.rst:306
# 7a539b53b72346ab892ed789717b41ee
# b34f7109b2484562ad6193fc5e0dcb83
# ebdd75850a8e40e4a08bbadb94ba28ba
# 4bab25ec653d468e8c3e90187cce09d6
# be9b73549b7648a68623ddfbacdd1d84
# c4ec2c09754047738a8b1f35d72f21be
# f7d14f44b22e4e8883100b88269d3b9b
# d63180ea388b40b0a2e1e250fc865ec3
# ef3cc299e3884ee8a3cf00bd29884273
# 5e42ca486efd4f21ba41236a8912c461
# cf155b3076734f7d9c441bf7a1f47be6
# 2080bc0b7f4247cdb8c53ba17072bb60
# 1e29d480b83e4bf999e24574d44d1f61
# e8abd5e3a040407c8a0e5e85cbc16b99
# a67a3cba78804a5b82bf756ed717e571
# 5a759578653b49ca8905fa0bf945ee4b
msgid "Example::"
msgstr ""

#: ../../testing_and_debugging/doctests.rst:3
# 201fe2c2ea3a49ee8377d78447e74b83
msgid "Doctests"
msgstr ""

#: ../../testing_and_debugging/doctests.rst:5
# 039d05657cc94005aca585ce0d2cc7a7
msgid "Doctests are way to do tests with interactive Python interpreter."
msgstr ""

#: ../../testing_and_debugging/doctests.rst:7
# 983a1bfde64f42128163630e020f309d
msgid "http://plone.org/documentation/tutorial/testing/doctests"
msgstr ""

#: ../../testing_and_debugging/doctests.rst:10
# 9d8bf2cb485d4cdc988dab303b202421
msgid "Doctests and pdb"
msgstr ""

#: ../../testing_and_debugging/doctests.rst:12
# 9b438ae35df748a79f3ca6056532edc0
msgid "Python debugger (pdb) works little differently when invoked from doctests."
msgstr ""

#: ../../testing_and_debugging/doctests.rst:14
# ff298bd7960c4020bd6fee6813b8c055
msgid "Your locals stack frame is not what you might expect and refers to doctests internals::"
msgstr ""

#: ../../testing_and_debugging/doctests.rst:19
# f71b7ff1424c4dcbbf1ddaaea44d7d6c
msgid "Corrective action is to go one level up in the stack::"
msgstr ""

#: ../../testing_and_debugging/doctests.rst:30
# 91b56ed43e0541d887eca11c6e9d6f6e
msgid "Interlude"
msgstr ""

#: ../../testing_and_debugging/doctests.rst:32
# b3c46e43efb5492d911f06d2355c5181
msgid "Interlude is a Python package, which you can use to start an interactive Python shell from doctests, bypassing the limitations described above."
msgstr ""

#: ../../testing_and_debugging/doctests.rst:35
# 74ab17b262e943d58dcb1d9f7b721d95
msgid "Just depend on 'interlude' and pass it via the globs dict to the doctest or import it from there::"
msgstr ""

#: ../../testing_and_debugging/doctests.rst:41
# fdc8d9e824974054912f93735f0a2035
msgid "When the testrunner passes interact, you'll get an interactive Python prompt."
msgstr ""

#: ../../testing_and_debugging/doctests.rst:43
# 6347b1543c6c4fb3b24db2ffa0311d53
msgid "For more information see: https://pypi.python.org/pypi/interlude"
msgstr ""

#: ../../testing_and_debugging/error_log.rst:3
# 01b74f5355984a378c0343ed384b0db8
msgid "Site error log service"
msgstr ""

#: ../../testing_and_debugging/error_log.rst:5
# 4edb585805f94fb68c5936e60d41c717
msgid "Plone sites contain error log service which is located as *error_log* in the site root. It logs site exceptions and makes the tracebacks accessible from Plone control panel and ZMI."
msgstr ""

#: ../../testing_and_debugging/error_log.rst:8
# 82f142be02c14f5ab7743009b4bf713f
msgid "The service is somewhat archaid and can log exceptions only, no plain error messages."
msgstr ""

#: ../../testing_and_debugging/error_log.rst:10
# 2c99b2d6c2ef43b58d29ab4db11f3268
msgid "`Site error log service source code <http://svn.zope.org/Zope/trunk/src/Products/SiteErrorLog/SiteErrorLog.py?rev=96315&view=auto>`_."
msgstr ""

#: ../../testing_and_debugging/error_log.rst:13
# 2838ac2f505d4db9bfdd2eed4e3b1971
msgid "Example how to add exceptions to error log"
msgstr ""

#: ../../testing_and_debugging/error_log.rst:0
# 309bc2b62a9140d0865d56d20ddd6e5a
msgid "Todo"
msgstr ""

#: ../../testing_and_debugging/error_log.rst:15
# 315abebcbb4f40a893d5b18313b45079
msgid "Complete \"Example how to add exceptions to error log\""
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:3
# 51d12e96ee594051bbec3e87825181c1
msgid "Functional testing"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:7
# de6c1faf282042b3bdfac9a02df9168c
msgid "Functional testing tool allows you to use scripted browser to load pages from your site and fill in forms automatically."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:16
# 2aa853de0b034f81aa4b8c452460199c
msgid "PloneTestCase product provides `FunctionalTestCase <https://github.com/plone/Products.PloneTestCase/tree/master/Products/PloneTestCase/PloneTestCase.py>`_ base class for functional testing. Unlike unit tests, functional tests simulate real HTTP requests with transaction life cycle."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:19
# f970703623e647f1b646b57687b3d540
msgid "Functional tests has different transaction for each browser.open() request"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:21
# c5e25697e4514396b210b84ef6ea7586
msgid "Functional tests do traversing and can check e.g. for cookie based permissions"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:23
# 72e1380625b64c4393659f8fb29b6fa4
msgid "Unit test method is executed in a single transaction and this might make impossible to test cache related behavior"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:27
# 47a588eda5564336ae03cec87e5ab1cf
msgid "Test browser"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:29
# 0ebe4f6b781b495d8c7dd2fc0b8695ec
msgid "Plone uses Products.Five.testbrowser as an browser emulator used in functional tests. It is based on zope.testbrowser package. You can find more information in the `zope.testbrowser docs home page <http://pypi.python.org/pypi/zope.testbrowser>`_. The API is described in `zope.testbrowser.interfaces (3.4 used by Plone 3) <http://svn.zope.org/zope.testbrowser/tags/3.4.2/src/zope/testbrowser/interfaces.py?rev=81337&view=markup>`_."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:35
# eeb6b479307c405a9ac2347f4ba3ab95
msgid "There also exists old `zc.testbrowser <http://pypi.python.org/pypi/zc.testbrowser>`_, which is a different package with similar name."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:38
# 6e6b12140bfc48e3ad71ba8b215cd2ef
msgid "All code assumes here is is executed in unit test context where self.portal is your unit test site instance."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:41
# 58a4ad8c933c4bd2aae410f1c62949ab
msgid "Recording tests"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:43
# 396ec77044be432c9716aca9b5587467
msgid "You can record functional tests through the browser. Think it as a Microsoft Word macro recoder kind of thing."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:45
# 0dd98f73eff142038206ba5e24f1fa17
msgid "http://plone.org/documentation/kb/testing/zope-testrecorder"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:47
# 7d7a0d6d3b9340aab5051675b22ad9e7
msgid "http://pyyou.wordpress.com/2008/04/11/how-to-install-zopetestrecorder-with-buildout/"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:49
# aff9fd3d86394e6287eb6c4ebfee47e8
msgid "http://pypi.python.org/pypi/zope.testrecorder"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:52
# e9beef5656ef448f9f60a994a1ab28c6
msgid "Functional test skeleton"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:54
# 1bcbc3e8950a4abb937acd1401e7ce9c
msgid "First see collective.testlayer package which does some of the things described below"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:57
# d4255d82b3fc4cc6acfc9c51508e48ce
msgid "http://pypi.python.org/pypi/collective.testcaselayer"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:59
# 6ecb66e2782c4ceda82415ee39bff9cd
msgid "Example code::"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:109
# abe70299302f45dea51c831248ae35ec
msgid "Preparing error logger"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:111
# 2cd80fb986a041cb90444837f175adfd
msgid "Since zope.testbrowser uses normal Plone paging mechanism, you won't get nice tracebacks to your console."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:113
# 40c96da32272433eb56fd700e7a0df7d
msgid "The following snippet allows you to extract traceback data from site.error_log utility and print it to the console. Put it to your afterSetUp()::"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:128
# b2f1d23c77454cfa9ac3d42ac089b6b8
msgid "Opening an URL"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:139
# 60240ce8bd79484e9429d9f2a9d2fae3
msgid "Logging in"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:152
# 21d4e30759274e0088cf85b33cca8ee2
msgid "Logout"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:165
# f96ca4e204994ac48807e59a62525863
msgid "Showing the contents from the last request"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:167
# ba7b3926bb8f4778b39cfe254135ce8f
msgid "After test browser has opened an URL its content can be read from browser.contents variable."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:175
# c372749b9d744ac99d06a91ae44cf92d
msgid "Getting a form handler"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:177
# a0cf1deef924407b8cdebc989ca09162
msgid "You can use testbrowser ``getForm()`` to access different forms on a page."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:179
# 1608bff99e6747bd91ff896ae4332365
msgid "Form look-up is available by ``name`` or ``index``."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:186
# 79be7f1e0b0341048a30e024abfc415c
msgid "Listing available form controls"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:188
# 41d54780c8d440e8b865475ca58fda19
msgid "You can do the following to know what content your form has eaten"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:190
# d2c1f839edc94faebc5c08abd3e4fdcd
msgid "the mechanize browser instance that is used through zope.testbrowser. zope.testbrowser internally uses a testbrowser provided by the mechanize package. The mechanize objects are saved in browser.mech_browser and as attributes on different other instances returned by zope.testbrowser. mechanize has a different, less convenient api, but also provides more options. To see a list of all controls in a for you can do e.g.::"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:205
# 372753f0c4ac4919a4abfa8fb7189f8a
msgid "... or one-liner ...::"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:209
# ca95ab9aae00401ea798042e6f8e96ff
msgid "the HTML page source code::"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:215
# 0adea6b6dd384b13a43da60dd1034982
msgid "Filling in a text field on  a page"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:217
# dc6cf3f27e6044e88e919f31bbe9ddf1
msgid "You can manipulate ``value`` of various form input controls."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:219
# a474edc96c3e4e9ca132d169182b8a84
msgid "Example how to submit Plone search page::"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:239
# 8675f032b92e4fe79608fb5e0dd10e0d
msgid "Selecting a checkbox"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:241
# 1cc46a367a714e62be2ab4e4a9dd6641
msgid "Checkboxes are usually presented as name:list style names::"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:247
# d2894a1fa8174a08915f3bf916581728
msgid "Clicking a button"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:254
# b1df1378aed8449694e4364e6cdf7438
msgid "If you have a form instance, you can use the submit action. To click on the Button labeled \"Log in\" in the login form, you do::"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:261
# 06eb2830d3544c5ab7e7429f2d48b9ff
msgid "Checking Unauthorized response"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:293
# 5aa93a63c6864c6db90366af4ee66d59
msgid "Another example where test browser / Zope 2 publisher where invalidly handling Unauthorized exception::"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:315
# 5befa6e71a844a18875efea439558586
msgid "Checking a HTTP response header"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:317
# 586ecaef4474458286a7067b7ed6af4b
msgid "Exaple:"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:319
# b8c9274de906452a9cb69f6c29c30ee2
msgid "self.assertEqual(self.browser.headers[\"Content-type\"], 'application/octet-stream')"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:322
# ec104d68ad7743188a4db46a95dcd32c
msgid "Checking HTTP exception"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:324
# 2c6b22bf2d1440839e02cfa716308067
msgid "Example how to check for HTTP 500 Internal Server Error::"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:340
# 429a7714644644148c972a2dc683e584
msgid "Setting test browser headers"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:342
# 7d048f19a7174c1cbe853cf1424ef73a
msgid "Headers must be passed to underlying PublisherMechanizeBrowser instance and test browser must be constructed based on this instance."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:347
# 28ef65cc4070441cbc4c28e74fe7f6d2
msgid "When passing parameters to PublisherMechanizeBrowser.addheaders HTTP prefix will be automatically added to header name."
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:351
# c9f9c93e3862447b96e874b0ab7764e6
msgid "Add header to browser"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:360
# 6c5c7353436241a992628846689023df
msgid "Setting user agent"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:398
# a1e0f99203994cf0afab6c08783cf251
msgid "For more information, see"
msgstr ""

#: ../../testing_and_debugging/functional_testing.rst:400
# 7bc1288ab196472c893d2791eecb2ed9
msgid "https://mail.zope.org/pipermail/zope3-users/2008-May/007871.html"
msgstr ""

#: ../../testing_and_debugging/index.rst:3
# 7289c25c03f2494aaef3203a6ea36849
msgid "Testing and debugging"
msgstr ""

#: ../../testing_and_debugging/index.rst:5
# 3e8af825cd01409695e9832180ec6546
msgid "This section contains tips how to test and debug your code."
msgstr ""

#: ../../testing_and_debugging/logging.rst:3
# 7634f5a8dc2a4b13a743ed28fc5bd937
msgid "Logging"
msgstr ""

#: ../../testing_and_debugging/logging.rst:7
# fea17d18611243f3a654751f433ad912
msgid "How to write log output from your Plone add-on program code"
msgstr ""

#: ../../testing_and_debugging/logging.rst:14
# 5e7370cede9341488cdc097ee717a5d9
msgid "`Python logging package <http://docs.python.org/library/logging.html>`_ is used to log from Plone."
msgstr ""

#: ../../testing_and_debugging/logging.rst:17
# 91adc687dc3d4abea6163ee5881acb9e
msgid "Log file location"
msgstr ""

#: ../../testing_and_debugging/logging.rst:19
# 984629a08a14464abde42d848452e8b9
msgid "By default, logs go to ``var/log`` folder under buildout."
msgstr ""

#: ../../testing_and_debugging/logging.rst:21
# 25812a434ae74888bac3fb39aafa64ca
msgid "If Zope instance is started in the foreground mode logs will be printed in the console (stdout)."
msgstr ""

#: ../../testing_and_debugging/logging.rst:24
# 6499a9a6ec1a47ce992f64938f9cab86
msgid "Plone log filename varies depending on the installation mode (Zope, ZEO cluster). But for each instance there are two log files"
msgstr ""

#: ../../testing_and_debugging/logging.rst:27
# 10f1cfa5e32a4a6ea0b88c52fd232a2b
msgid "Event logs (errors), normally called *instance.log*"
msgstr ""

#: ../../testing_and_debugging/logging.rst:29
# a16f1d7a03e249f2894b4b98eebb3100
msgid "HTTP request log (Apache compatible), normally called *Z2.log*"
msgstr ""

#: ../../testing_and_debugging/logging.rst:32
# ebcba6661650449c9d5b21f3356669bc
msgid "Viewing logs in real time"
msgstr ""

#: ../../testing_and_debugging/logging.rst:34
# 0e76b8288fb045c78e8ff0b12e62114a
msgid "UNIX'y way for your terminal."
msgstr ""

#: ../../testing_and_debugging/logging.rst:36
# 261501985064472cb7e7c81a8a1581ce
msgid "Open error log viewer using ``tail`` command (print content from file end) and wait for further file writes"
msgstr ""

#: ../../testing_and_debugging/logging.rst:43
# b33e81da7d1e44679e7fa384cb4f73a3
msgid "Press CTRL+C to abort."
msgstr ""

#: ../../testing_and_debugging/logging.rst:46
# 4fab8db43b78407e9cf1803947fecb03
msgid "Log level"
msgstr ""

#: ../../testing_and_debugging/logging.rst:48
# a01cf4f039f04f088e369c7b60a9d2a9
msgid "Default log level is ``INFO``. To enable more verbose logging, edit ``buildout.cfg``,"
msgstr ""

#: ../../testing_and_debugging/logging.rst:50
# 98a8af6b51964538911f804615319886
msgid "Change log level by editing ``[instance]`` section ``event-log-level``::"
msgstr ""

#: ../../testing_and_debugging/logging.rst:55
# 35e1c56c1b204cf9a777bd3de30d8c23
msgid "More information"
msgstr ""

#: ../../testing_and_debugging/logging.rst:57
# e3ea27e25bc14c4393d8bcb151a0a28f
msgid "http://pypi.python.org/pypi/plone.recipe.zope2instance"
msgstr ""

#: ../../testing_and_debugging/logging.rst:60
# bc3ba949148d4955ad56485e3550daaa
msgid "Logging from Python code"
msgstr ""

#: ../../testing_and_debugging/logging.rst:75
# b38b21c9b5f540c0ad24f1a314a01529
msgid "Logging from page templates and RestrictedPython scripts"
msgstr ""

#: ../../testing_and_debugging/logging.rst:77
# ec5bf0a88f6c4e7699f10c03b3e18e36
msgid "Python ``logging`` module doesn't provide Zope 2 security assertations and does not work in :doc:`RestrictedPython Python scripts </security/sandboxing>`."
msgstr ""

#: ../../testing_and_debugging/logging.rst:80
# 7b3fb3ec3c01474a92899db070b5d865
msgid "However, you can use ``context.plone_log()`` method logging in the sandboxed execution mode."
msgstr ""

#: ../../testing_and_debugging/logging.rst:87
# aebbde949bcc4dadbc63ab26e92cda93
msgid "Forcing log level and output"
msgstr ""

#: ../../testing_and_debugging/logging.rst:89
# 46cf5b9e0aa74947bb43593c36907634
msgid "The following snippet forces the log level of Python logging for the duration of the process by modifying the root logger object::"
msgstr ""

#: ../../testing_and_debugging/logging.rst:104
# 6ffc381d96a04359ab814c9aae3608f5
msgid "Temporarily capturing log output"
msgstr ""

#: ../../testing_and_debugging/logging.rst:106
# 893dbdcfc82946b0b4a79c3a36bb4bed
msgid "You can capture Python logging output temporarily to a string buffer. This is useful if you want to use logging module to record the status of long running operations and later show to the end user, who does not have access to file system logs, how the operation proceeded."
msgstr ""

#: ../../testing_and_debugging/logging.rst:112
# d15f4636ea9c4b639ddcd53018e2d383
msgid "Below is an Grok view code example."
msgstr ""

#: ../../testing_and_debugging/logging.rst:114
# 74ac825ca9cd4b15b5e8ebd1cdddc6c1
msgid "Example view code::"
msgstr ""

#: ../../testing_and_debugging/logging.rst:232
# 4619025b1a2e4dc2a1ab8111b9473109
msgid "The related page template"
msgstr ""

#: ../../testing_and_debugging/logging.rst:269
# d300f3ddec9d495b8a346f728b5409f8
msgid "transaction_note()"
msgstr ""

#: ../../testing_and_debugging/logging.rst:271
# cfb0a8e859314ec7a5a3accbbc413681
msgid "Leave a note on Zope's *History* tab."
msgstr ""

#: ../../testing_and_debugging/logging.rst:273
# 54b465d4f5a2497f9bda5e193aa43664
msgid "https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/utils.py#L382"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:3
# 72766e4be6b0479ea82f1876df03e128
msgid "Python debugging"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:7
# cb754359c2564d50b760988dc6f41646
msgid "Using Python command-line debugger (``pdb``) to debug Plone and Python applications."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:15
# a09753ed4fc641068bd8c10c63cac676
msgid "The Python debugger (``pdb``) is an interactive command-line debugger."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:17
# 195dabfc03d74e1086d84ca16cd09255
msgid "It is very limited in functionality, but it will work in every environment and type of console. Plone also has through-the-web-browser PBD debugging add-on products."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:23
# cbfe294758ee4781985a2cd030f43360
msgid "``pdb`` is not the same as the Python interactive shell. ``pdb`` allows you to step through the code, whilst the Python shell allows you just to inspect and manipulate objects."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:27
# ed75a6373f704b81a06894d637223918
msgid "If you wish to play around with Zope in interactive Python shell or run scripts instead of debugging (exceptions), please read :doc:`Command line </misc/commandline>` documentation."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:31
# 95e2bfe16f724dddaf91a1f60238182a
msgid "See also"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:33
# b30860693d044e28aeebcd14344fd571
msgid "http://plone.org/documentation/kb/using-pdb"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:35
# 2e3f421806644c7da5712efe8e7d532c
msgid "http://plone.org/documentation/kb/best-practices/debugging-plone"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:38
# 1860ec50d8a740c597f2a067eaf164ce
msgid "Using ``pdb``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:43
# 1b3c5cd3b2bb43c08fd7835348f153b1
msgid "# Go to your code and insert the statement ``import pdb; pdb.set_trace()`` at"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:41
# f519a3dbaee34baf8e692b94b197d4ef
msgid "the point where you want have a closer look.  Next time the code is run, the execution will stop there and you can examine the current context variables from a Python command prompt."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:46
# 886ed7ca35b245718bf81054be05762d
msgid "# After you have added ``import pdb; pdb.set_trace()`` to your code, stop"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:46
# 24cc2c4f498449049fe184875c262f3a
msgid "Zope and start it in the foreground using the ``bin/instance fg`` command."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:50
# 4ea128fc6c3d4fb0bee1fd6cb10f8720
msgid "# TextMate support for ``pdb`` can be found at"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:49
# 9f00d7eb3f25446b8c07d46508964501
msgid "`http://pypi.python.org/pypi/PdbTextMateSupport/0.3 <http://pypi.python.org/pypi/PdbTextMateSupport/0.3>`_."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:54
# 75fffca1b67e4425b3d56707609b63ea
msgid "# ``mr.freeze`` allows traces to be added without restarting:"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:53
# 5fbe5c5c63624bc69df24bab47f4d8ef
msgid "`http://pypi.python.org/pypi/mr.freeze <http://pypi.python.org/pypi/mr.freeze>`_."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:76
# 32afda626a414f5fadbbd9e478bac526
msgid "Pretty printing objects"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:113
# 9bb923f766d14751884687953cb7ff2a
msgid "Useful ``pdb`` commands"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:115
# 30d2d9dc3d8148939c3b8fb34e61bd68
msgid "Just type the command and hit enter."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:118
# 003d7d0d101c439488b5810de574984f
msgid "``s``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:118
# f40eef89a1c44790b6884418f2a077e0
msgid "step into, go into the function in the cursor"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:121
# 1a2388f6aae84033ae31a73db5e1e5bc
msgid "``n``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:121
# a1e6d28963cd4b699333d10bcecb86e3
msgid "step over, execute the function under the cursor without stepping into it"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:124
# f8418e7fb3ad43dc994bf721e71eeb04
msgid "``c``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:124
# dc6a0dc59fec41959d4ed891425cdedd
msgid "continue, resume program"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:127
# dcd92df8b2ff408e995809b012243180
msgid "``w``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:127
# 33627838701442cb8d4c172504506267
msgid "where am I? displays current location in stack trace"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:130
# f552d6afeaac4f8c968d431785579ada
msgid "``b``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:130
# 49cce6a9ef5547cb8c896e77a5485cc9
msgid "set breakpoint"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:133
# a6c6fc7b9c2943648cdeaecc8ee58ad2
msgid "``cl``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:133
# 120032bbc3364c92801f4e40db4b9e19
msgid "clear breakpoint"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:136
# f9542c1aa64340d4b61f379de8b92d19
msgid "``bt``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:136
# 89f3f40deb514fadad5a5b4bc488401d
msgid "print stack trace"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:139
# fed83e20dbd5496da31a46bcb170c20d
msgid "``up``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:139
# a9bca2f0337d4d05a430ad5cb347610e
msgid "go to the scope of the caller function"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:142
# 74f4bb93aeee43b6b306a67cdb6a5f35
msgid "``pp``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:142
# 179dd7bf7fa447448ceb258a10f4ce9d
msgid "pretty print object"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:146
# 05882ed2bff64840949740fd88a0397c
msgid "``until``"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:145
# db7f719c52924509ac69fd320d01959f
msgid "Continue execution until the line with the line number greater than the current one is reached or when returning from current frame"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:150
# 9019a6c50ad54aa5a099d72619e4c5bc
msgid "The ``until`` command (or ``unt``) is available only on Plone 4.x or superior as it is a new feature provided by the ``pdb`` module under Python 2.6."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:156
# 352ff8b571d447048e7656c121456427
msgid "Useful ``pdb`` snippets"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:158
# f43cfc002b674394b481cf7193fcbd7b
msgid "Output object's class::"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:162
# 6e9fe82b6d204d8081580ea7e4ecb22e
msgid "Output object attributes and methods::"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:166
# af59abee15cf48b88b7bc88a6f09fb49
msgid "Print local variables in the current function::"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:170
# e8d324330f1b4564b65a7bba281376b0
msgid "Dumping incoming HTTP GET or HTTP POST::"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:175
# 5b750e3fecaf4ac7aa2e6eb4fa804f89
msgid "Executing code on the context of the current stack frame::"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:187
# 566a366c93804149b79c6f80f441cc9d
msgid "The example above will modify the previous value of the variable ``my_tags`` in the current stack frame."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:192
# c96dd5d5e9b14b02a66011f46c88f992
msgid "Automatically start debugger when exception is raised (browser)"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:194
# e0500f95c47c48cf89ae653b7b045b81
msgid "You can start interactive through-the-browser Python debugger when your site throws an exception."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:197
# 9a0a6c433b6e406b94e280a19b8a8c49
msgid "Instead of getting \"We're sorry there seems to be an error...\" page you get a pdb prompt which allows you to debug the exception. This is also known as post-mortem debugging."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:201
# 1047e812f5984d70a1e458ff6f3d01ad
msgid "This can be achieved with ` `Products.PDBDebugMode`` add-on."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:203
# da6658c9cc6b45edac3acbed9d5478db
msgid "http://pypi.python.org/pypi/Products.PDBDebugMode"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:208
# 6b61bd2f78374f8b975441680b18adb5
msgid "PDBDebugMode is not safe to install on the production server due to sandbox security escape."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:213
# a72479d1f5444115a32295230992c1e8
msgid "Automatically start debugger when exception is raised (command line)"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:217
# 5c9fd63e2c6b4df9b2659981312319d1
msgid "This cannot be directly applied to a web server, but works with command line scripts."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:222
# f1cf79bf576549138242cfee9aaeb565
msgid "This does not work with Zope web server launch as it forks a process."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:228
# 2518c663066f455fa1564023c4730608
msgid "Hit ``c`` and ``enter`` to start the application. It keeps running, until an uncaught exception is raised. At this point, it falls back to the ``pdb`` debug prompt."
msgstr ""

#: ../../testing_and_debugging/pdb.rst:233
# 3b02247dece8417e807e84c0531278f8
msgid "For more information see"
msgstr ""

#: ../../testing_and_debugging/pdb.rst:235
# 4f66a5d08354485bbb32a5da3b446d06
msgid "http://docs.python.org/library/pdb.html"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:3
# 12547371daed47dfaef67b5c160c0e09
msgid "Unit testing"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:10
# 17936d7f1c2d4d998747fc381dc80252
msgid "Unit tests are automated tests created by the developer to ensure that the add-on product is intact in the current product configuration. Unit tests are regression tests and are designed to catch broken functionality over the code evolution."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:15
# 338cb4f3691f46d580d566d4f4c36fea
msgid "`Plone unit testing tutorial <http://plone.org/documentation/tutorial/richdocument/unit-testing>`_."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:18
# b16a56f5099d4c338f6728aef8617f11
msgid "Running unit tests"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:20
# f470fde505bb426faa5d90076b1822d6
msgid "Since Plone 4, it is recommended to use ``zc.testrunner``  to run the test suites.  You need to add it to your ``buildout.cfg``, so that the ``test`` command will be generated."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:38
# e8e483a1e59e490cb90aa6e76f5b958f
msgid "On Plone 3 you can run tests with the ``bin/instance test`` command, which corresponds ``bin/test``."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:42
# a96bee7fc3ae442286d2bd9a425de242
msgid "Running tests for one package:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:48
# 9671e6a74de04be08a0e920aa4cfeafc
msgid "Running tests for one test case:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:54
# 4c9197efc9bd48449842d002a89d6b70
msgid "Running tests for two test cases:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:60
# 5e093bb0f4f04ca19292ad91b16ed1c2
msgid "To drop into the pdb debugger after each test failure:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:66
# 27056c17e3d04b9aac6c35df1386305c
msgid "To exclude tests:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:72
# eec1ea0c954743da9dacc493c517fa35
msgid "To list tests that will be run:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:78
# e735b85341a74a619e6fada9d9469087
msgid "The following will run tests for *all* Plone add-ons: useful to check whether you have a set of component that function well together:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:87
# 7e4952ec48d64c9a96c8997f8a426d5b
msgid "The test runner does not give an error if you supply invalid package and test case name.  Instead it just simply doesn't execute tests."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:90
# e937558fc5db4866a05cd638cde06401
msgid "More information:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:92
# c9ae4998af88494992135db2b5796190
msgid "http://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-3-x-to-4.0/updating-add-on-products-for-plone-4.0/no-longer-bin-instance-test-use-zc.recipe.testrunner"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:95
# 49024c51d6614b17b8a20dc3d22a124c
msgid "AttributeError: 'module' object has no attribute 'test_suite'"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:97
# 1337765992654999b431130f8df2a8d6
msgid "If you get the above error message there are two potential reasons:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:99
# bedc6a879d8e4eba8e110f70256c80c2
msgid "You have both a ``tests.py`` file and a ``tests`` folder."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:101
# 5153caefb6734020b2fa348e0f5a412f
msgid "Old version: Zope version X unit test framework was updated not to need an explicit ``test_suite`` declaration in the ``test`` module any more. Instead, all subclasses of ``TestCase`` are automatically picked. However, this change is backwards incompatible. http://wiki.zope.org/zope2/HowToRunZopeUnitTests"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:108
# 0f0f5080aff249d1b1e3ea730e3b5f13
msgid "Test coverage"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:110
# 591a8330b6fc4778bc3dd600f00bf529
msgid "Zope test running can show how much of your code is covered by automatic tests:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:113
# 021c4025ba3a4ddeba3204b2f06a766c
msgid "http://plone.org/documentation/kb/testing/code-coverage"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:116
# ebd1b562d21f4f3ca0413596205da09a
msgid "Running tests against Python egg"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:118
# 800f4eba8cc4487ea3eb46930e17896e
msgid "You might need to add additional setup.py options to get your tests work"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:120
# 8245195e5a0c4f0eabf0b479fdbf8281
msgid "http://rpatterson.net/blog/running-tests-in-egg-buildouts"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:123
# a55c3a4033634c30a7ece4f6c213c04e
msgid "Creating unit tests"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:125
# 278c63ac41d942b6b6ac43e7a817ecc2
msgid "Pointers:"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:127
# dd84351fe9654521a7f84ed5462b1ba7
msgid "http://plone.org/documentation/kb/testing"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:129
# 817b2f61e0164907ac6eb810b09d1d63
msgid "http://pypi.python.org/pypi/plone.app.testing"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:131
# 7255fd1a97d4444cb1be750674fb60cb
msgid "http://pypi.python.org/pypi/Products.PloneTestCase"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:133
# 68dfff13e2064febb02d19a38d9964d7
msgid "http://www.zope.org/Members/shh/ZopeTestCaseWiki/ApiReference"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:136
# 53b118ec42964abcb604352580148746
msgid "For new test suites, it is recommended to use `plone.app.testing`."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:140
# 76d8563b488746d785e6b5ed1f971041
msgid "Base test class skeleton"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:189
# bd28f537037c432094be3e7ce3cf8541
msgid "Posing as different users"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:191
# 33a8213e305445fab659cd9323f323b1
msgid "There is a shortcut to privilege you from all security checks::"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:198
# 90aef4ac425d4c6ba16a387a59f24900
msgid "In Plone 4, using plone.app.testing, use::"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:196
# 54b429666aae45aa8173488f053bc567
msgid "from plone.app.testing import login ... login(self.portal, 'admin')"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:200
# 5bbb8a831432428ebb3422e6d9481651
msgid "where ``self`` is the test case instance."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:204
# 60aa2852b96b41468b3e122fa434f9bc
msgid "This privileges are effective only in the context where permissions are checked manually. They do not affect traversal-related permissions: looking up views or pages in unit test Python code.  For that kind of testing, use functional testing."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:210
# f54875fc49fa4ec98f3745bef4314bbd
msgid "Unit tests and themes"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:212
# 932fc99c13cb48b89f2cbc4da2e1c27f
msgid "If your test code modifies skin registries you need to force the skin data to be reloaded."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:215
# 37b6cfa4055d46efbc3b3ee59f5648db
msgid "Example (``self`` is the unit test)::"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:220
# 7ce64043be6d4afbbbf67ec0becb9589
msgid "Running add-on installers and extensions profiles for unit tests"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:222
# d18e6ec99e62439ba99b39d3b430492c
msgid "By default, no add-on installers or extension profiles are installed."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:224
# a32cdd7d56b34191acfeec979b29277c
msgid "You need to modify ``PloneTestCase.setupPloneSite()`` call in your base unit tests."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:227
# 87b30ad0c0fd40eba9065e87151c7e81
msgid "Simple example::"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:231
# 582a340a039948d48bb34f6e903a1836
msgid "Complex example::"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:237
# c28cab35799e42eb8321a4949eff25d5
msgid "Tested package not found warning"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:239
# 7f786c665de94435ba956dc934329e16
msgid "Installers may fail without interrupting the test run. Monitor Zope start up messages. If you get error like::"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:244
# 5f1cddff7c7547519b9d5d6018a769e7
msgid "You might be missing this from your ``configure.zcml``"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:250
# ff337b8e92914561a6ff444d6f6d0702
msgid "... or you have a spelling error in your test setup code."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:253
# 667c0c360a064b64a2ef49c04ae13d38
msgid "Load ZCML for testing"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:255
# 1cfc248e243545c3aa3f724f05505269
msgid "For loading ZCML files in your test, you can use the Five API::"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:263
# 5c12217667d941878f9f500fcb95184e
msgid "Setting log level in unit tests"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:265
# 0ca518d317344d3cbfd7d10ef65e1057
msgid "Many components use the ``DEBUG`` output level, while the default output level for unit testing is ``INFO``.  Import messages may go unnoticed during the unit test development."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:269
# 072bc56bd212435b9f0e13ab48ea0b25
msgid "Add this to your unit test code::"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:279
# 899203ace2a14eb89376284678203eee
msgid "HTTP request"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:281
# 385ce89441654dba90c189f8f592f39b
msgid "Zope unit tests have a mock ``HTTPRequest`` object set up."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:283
# e8b3bda3c1a04bc1b6980ac71bbcee30
msgid "You can access it as follows::"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:288
# 619ebbe3c0c94d19a585c84d3ceccd90
msgid "Setting a real HTTP request"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:298
# 2c26bafae7394dcb9b30d8d0ad51aad3
msgid "Grabbing emails"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:301
# fd7eda19f56e465586072f704a94bf4e
msgid "Test outgoing email messages with Plone 3"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:303
# 41051cefa0ba4dcd84b679a9fd928b4e
msgid "To debug outgoing email traffic you can create a dummy mailhost."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:365
# 82c59d03abba46aa91f5e305e48255c4
msgid "Test outgoing email messages with Plone 4"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:367
# 807457d47ae342e0b0f001b05ad8deb9
msgid "The ``MailHost`` code has changed in Plone 4. For more detail about the changes please read the relevant section in the `Plone Upgrade Guide`_. According to that guide we can reuse some of the test code in ``Products.CMFPlone.tests``."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:374
# fdb19165e91c4db3881c15bc6df9acc0
msgid "Here's some example of a ``unittest.TestCase`` based on the excellent ``plone.app.testing`` framework. Adapt it to your own needs."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:459
# 9d269bcc72c34e048843d9a939d89a18
msgid "Unit testing and the Zope component architecture"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:461
# 7ef5bcce63914df28403f9f80adb8daf
msgid "If you are dealing with the Zope component architecture at a low level in your unit tests, there are some things to remember, because the global site manager doesn't behave properly in unit tests."
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:465
# 3686d97faba0498a9f3d6f5a827e3fb2
msgid "See discussion: http://plone.293351.n2.nabble.com/PTC-global-components-bug-tp3413057p3413057.html"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:468
# cf8cfa9d1fa349589db8ae24209ce117
msgid "ZCML"
msgstr ""

#: ../../testing_and_debugging/unit_testing.rst:470
# a41274fff52f4907886c2962149b9890
msgid "Below are examples how to run special ZCML snippets for your unit tests."
msgstr ""

