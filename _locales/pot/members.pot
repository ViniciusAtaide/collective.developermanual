# SOME DESCRIPTIVE TITLE.
# Copyright (C) Plone community and other individual contributors
# This file is distributed under the same license as the Plone Developer Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Developer Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-09 14:22+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../members/index.rst:3
# fdf352b2911741488f124cd379af658d
msgid "Users and members"
msgstr ""

#: ../../members/member_basics.rst:3
# 126544d374de40f297a430539ea978a4
msgid "Member manipulation"
msgstr ""

#: ../../members/member_basics.rst:5
#: ../../members/member_profile.rst:7
#: ../../members/membrane.rst:5
#: ../../members/sharing_tab.rst:12
# 5dc10e269ec847a89d8d0bcebe58e3bd
# e8c6dec5489a465e9d0c12277a5823e8
# 67251a31ce6e4fe8be9360a3848b2fc8
# 9bf39b6f5a3649aca01341d0b86cc8b9
msgid "Description"
msgstr ""

#: ../../members/member_basics.rst:7
# 1c1db6de522b419fa0441cf21ddf78b1
msgid "How to programmatically create, read, edit and delete site members."
msgstr ""

#: ../../members/member_basics.rst:12
#: ../../members/member_profile.rst:12
#: ../../members/membrane.rst:16
#: ../../members/sharing_tab.rst:19
# 2580894cf1884b18902f83bebb6d888d
# 2cef71ea23864623b015ebfc7f4446db
# 06685d0040d04fbcbedb43713e993b3c
# 0a7163a49576410292193d1842cffeb4
msgid "Introduction"
msgstr ""

#: ../../members/member_basics.rst:14
# 8060f83201da4f5e8db09376014305fe
msgid "In Plone, there are two loosely-coupled subsystems relating to members:"
msgstr ""

#: ../../members/member_basics.rst:20
# ba4b7275ecf048ddb68d795806b7f188
msgid "*Authentication and permission* information"
msgstr ""

#: ../../members/member_basics.rst:17
# b506c782b1dc46ca9d169c693b16fdb5
msgid "(``acl_users`` under site root), managed by the :term:`PAS`. In a default installation, this corresponds to Zope user objects. PAS is *pluggable*, though, so it may also be authenticating against an LDAP server, Plone content objects, or other sources."
msgstr ""

#: ../../members/member_basics.rst:26
# 1eb1ec7e6ad1466aa3bb16d4e66cdbb3
msgid "*Member profile* information"
msgstr ""

#: ../../members/member_basics.rst:23
# f32123e45e6f46638673f98f876e5056
msgid "accessible through the ``portal_membership`` tool. These represent Plone members. PAS authenticates, and the Plone member object provides metadata about the member."
msgstr ""

#: ../../members/member_basics.rst:29
# 3ff24f36ed9d42d6a44e8866969e2ae2
msgid "Getting the logged-in member"
msgstr ""

#: ../../members/member_basics.rst:31
# 9cc85f1655584c3fa0ff78952f299d09
msgid "Anonymous and logged-in members are exposed via the :doc:`IPortalState context helper </misc/context>`."
msgstr ""

#: ../../members/member_basics.rst:34
# decb9ebb5b9e4f2bb26616ab4ad5978e
msgid "Example (browserview: use ``self.context`` since ``self`` is not acquisition-wrapped)::"
msgstr ""

#: ../../members/member_basics.rst:48
# af6293ca63324c95b53beaa705241856
msgid "or from a template:"
msgstr ""

#: ../../members/member_basics.rst:57
# b25b7a09f8934614b5931949f67ee747
msgid "Getting any member"
msgstr ""

#: ../../members/member_basics.rst:59
# dcc5cb7ba7684b5692305201a60ee641
msgid "To get a member by username (you must have ``Manager`` role)::"
msgstr ""

#: ../../members/member_basics.rst:64
# 64c22cd37046471b9d08489309547d1e
msgid "To get all usernames::"
msgstr ""

#: ../../members/member_basics.rst:70
# 28de179cdc754c06bdad09fb04ecb0a2
msgid "Getting member information"
msgstr ""

#: ../../members/member_basics.rst:72
# 2d8934bb62da43b6829c154405ad4c9f
msgid "Once you have access to the member object, you can grab basic information about it."
msgstr ""

#: ../../members/member_basics.rst:75
# e372ed44c7614e599f69cb3a3ef4847a
msgid "Get the user's name::"
msgstr ""

#: ../../members/member_basics.rst:80
# a98d3804d44f453c94ee94cf0c2eaf80
msgid "Reseting user password without emailing them"
msgstr ""

#: ../../members/member_basics.rst:82
# cc468fcde9c946ddbdd6400a83b7b806
msgid "https://plone.org/documentation/kb/reset-a-password-without-having-to-email-one-to-the-user"
msgstr ""

#: ../../members/member_basics.rst:85
# 0638d5e6042c435098ea0f2dd2b7dfc2
msgid "Exporting and importing member passwords"
msgstr ""

#: ../../members/member_basics.rst:87
# b34cc1fd7b2544a6a056490d866d18e6
msgid "You can also get at the hash of the user's password (only the hash is available, and only for standard Plone user objects) (in this example we're in Plone add-on context, since ``self`` is acquisition-wrapped)::"
msgstr ""

#: ../../members/member_basics.rst:96
# 0771191258284c36baebacf970e35abc
msgid "Note that this is a private data structure. Depending on the Plone version and add-ons in use, it may not be available."
msgstr ""

#: ../../members/member_basics.rst:99
# 881cea641351443e850836e0bfa2e2f8
msgid "You can use this hash directly when importing your user data, for example as follows (can be executed from a :doc:`debug prompt </misc/commandline>`.)::"
msgstr ""

#: ../../members/member_basics.rst:123
# 238fa27f0db045b094dd780b5895e8aa
msgid "Also, take a look at a script for exporting Plone 3.0's memberdata and passwords:"
msgstr ""

#: ../../members/member_basics.rst:126
# 773f245e97d54e418087de86278d2833
msgid "http://blog.kagesenshi.org/2008/05/exporting-plone30-memberdata-and.html"
msgstr ""

#: ../../members/member_basics.rst:131
# 860de15b9ab84cdb90b3e5c5e8e9ef14
msgid "Iterating all site users"
msgstr ""

#: ../../members/member_basics.rst:133
#: ../../members/member_basics.rst:178
#: ../../members/member_basics.rst:195
#: ../../members/member_basics.rst:211
#: ../../members/member_basics.rst:259
#: ../../members/member_basics.rst:268
#: ../../members/member_basics.rst:290
#: ../../members/member_profile.rst:91
#: ../../members/member_profile.rst:104
#: ../../members/membrane.rst:50
# f52617d4fcff461c854322748a3bab35
# 522b0ab24ab546aa870b47e236180cf0
# 2478d7f8428840cb9a626e6eaf47fdf5
# e073bd62ca564a8a9581aa65add80516
# 8ab144e4d75648a2bb37887c0a5883ac
# 8c21c0e863b44b77bdf346467bb86ca4
# dd9dad55227941988516549c248f6d63
# f67681715baf43a8838be922fcb841c4
# eae12900c7ef4f049530775644833d64
# bb9f0a1ea3c743d3a2f0875a24700c2a
msgid "Example::"
msgstr ""

#: ../../members/member_basics.rst:148
# fe9dbd85f085440582f4ec6aeeb7e5ee
msgid "Zope users, such as *admin*, are not included in this list."
msgstr ""

#: ../../members/member_basics.rst:152
# 66b0b9021228419ca4f340f6d5d26bca
msgid "Getting all *Members* for a given *Role*"
msgstr ""

#: ../../members/member_basics.rst:154
# cde40f6f202047edb5fdb4b462b033a2
msgid "In this example we use the ``portal_membership`` tool. We assume that a role called ``Agent`` exists and that we already have the context::"
msgstr ""

#: ../../members/member_basics.rst:166
# 69718534ff7e4736a35d84a95fba60fd
msgid "Groups"
msgstr ""

#: ../../members/member_basics.rst:168
# 7822e46b4f3142148fb347bbe8062a28
msgid "Groups are stored as ``PloneGroup`` objects. ``PloneGroup`` is a subclass of ``PloneUser``.  Groups are managed by the ``portal_groups`` tool."
msgstr ""

#: ../../members/member_basics.rst:171
# fa1b143ae7fb4f38be1889ef5595e978
msgid "https://github.com/plone/Products.PlonePAS/tree/master/Products/PlonePAS/plugins/ufactory.py"
msgstr ""

#: ../../members/member_basics.rst:173
#: ../../members/member_basics.rst:190
# 5197bc76039b45ba89b733e0ceddf0ed
# 4add95da5a40446f992be74c61fbba22
msgid "https://github.com/plone/Products.PlonePAS/tree/master/Products/PlonePAS/plugins/group.py"
msgstr ""

#: ../../members/member_basics.rst:176
# a36f74e0bf9b40798a310516ab51945d
msgid "Creating a group"
msgstr ""

#: ../../members/member_basics.rst:186
# 1b15b3e948fd4f17ae2c7c3f36b35ed4
msgid "For more information, see:"
msgstr ""

#: ../../members/member_basics.rst:188
# cd38eb78d6ea4ea383c296e30c3bd7d7
msgid "https://github.com/plone/Products.PlonePAS/tree/master/Products/PlonePAS/tests/test_groupstool.py"
msgstr ""

#: ../../members/member_basics.rst:193
# 6d40280e5fda40fcbab94afbcc3bf823
msgid "Add local roles to a group"
msgstr ""

#: ../../members/member_basics.rst:201
# 116b1b3402034adc996601ca789c296c
msgid "This is an example of code in a *view*, where ``context`` is available."
msgstr ""

#: ../../members/member_basics.rst:205
# df97fd5e8d734402b398e2b22165087c
msgid "Update properties for a group"
msgstr ""

#: ../../members/member_basics.rst:207
# f12f2ae346e04502b7154d93aadd1ca1
msgid "The ``editGroup`` method modifies the title and description in the ``source_groups`` plugin, and subsequently calls ``setGroupProperties(kw)`` which sets the properties on the ``mutable_properties`` plugin."
msgstr ""

#: ../../members/member_basics.rst:218
# bea8d9d53f08415486cea9f8aef2922c
msgid "Getting available groups"
msgstr ""

#: ../../members/member_basics.rst:220
# 667607bb35e148a58a9d321f738f5e15
msgid "Getting all groups on the site is possible through ``acl_users`` and the ``source_groups`` plugin, which provides the functionality to manipulate Plone groups."
msgstr ""

#: ../../members/member_basics.rst:224
# 1bf05d10a9c7495498feb9f5060a6dd4
msgid "Example to get only ids::"
msgstr ""

#: ../../members/member_basics.rst:230
# 5c6ce6e4e55a4f2d9ff6e493d10cc029
msgid "Example to get full group information::"
msgstr ""

#: ../../members/member_basics.rst:240
# e02ad6d914534573870b3f10ad53cca1
msgid "List users within all groups"
msgstr ""

#: ../../members/member_basics.rst:242
# 39b312fb54e8401d92f8356751b070c0
msgid "Example to get the email addresses of all users on a site, by group::"
msgstr ""

#: ../../members/member_basics.rst:257
# 5fbe48e302e846b0b78b92e2cd5b8263
msgid "Adding a user to a group"
msgstr ""

#: ../../members/member_basics.rst:266
# 539c888a05d64cabbb680b91f558ee99
msgid "Removing a user from a group"
msgstr ""

#: ../../members/member_basics.rst:273
# df8c0cecbef04fa8aea3394b9d199a54
msgid "Getting groups for a certain user"
msgstr ""

#: ../../members/member_basics.rst:275
# 4cd8709d456349a08a1765b15401acd9
msgid "Below is an example of getting groups for the logged-in user (Plone 3 and earlier)::"
msgstr ""

#: ../../members/member_basics.rst:281
# 82c719ae05a84f90b95d949f2e4c0113
msgid "In Plone 4 you have to use::"
msgstr ""

#: ../../members/member_basics.rst:288
# 66a48404817f4977ad34d66a35338d89
msgid "Checking whether a user exists"
msgstr ""

#: ../../members/member_basics.rst:295
# a55d38d89f194e0dad5d1bdac5fdf979
msgid "See also:"
msgstr ""

#: ../../members/member_basics.rst:297
# d5dd2e2cc574459fa685efa1ddc2be1c
msgid "http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/RegistrationTool.py?rev=110418&view=auto"
msgstr ""

#: ../../members/member_basics.rst:303
# a05754d78b6249b891691726f1a98320
msgid "Creating users"
msgstr ""

#: ../../members/member_basics.rst:305
# cdeafb42b3264682b417bdfb9f883e34
msgid "Use the ``portal_registration`` tool. Example (browserview)::"
msgstr ""

#: ../../members/member_basics.rst:361
# 6d2869126d204dc9b6dd026f2608f2de
msgid "Batch member creation"
msgstr ""

#: ../../members/member_basics.rst:363
# e3bd347107474e7693685ffb35554d83
msgid "http://plone.org/documentation/kb/batch-adding-users"
msgstr ""

#: ../../members/member_basics.rst:367
# b156b395ea0c459d9e13142a92b9072c
msgid "Email login"
msgstr ""

#: ../../members/member_basics.rst:370
# 92deed0105ff49be9781970313d63b77
msgid "Plone 3 does not allow a dot in the username."
msgstr ""

#: ../../members/member_basics.rst:370
# 62f25bfcc12f43748b2b6ea2d96932fc
msgid "This is available as an add-on; see http://plone.org/products/betahaus.emaillogin"
msgstr ""

#: ../../members/member_basics.rst:372
# a4f88a2007ae4c218a286318903bc3a0
msgid "In Plone 4, it is a default feature."
msgstr ""

#: ../../members/member_basics.rst:376
# 4ce6583cd5ce4ead9da34e358e377f6c
msgid "Custom member creation form: complex example"
msgstr ""

#: ../../members/member_basics.rst:378
# db5d7709a6de48ea9c2af82698d2cdd7
msgid "Below is an example of a Grok form which the administrator can use to create new users. New users will receive special properties and a folder for which they have ownership access.  The password is set to be the same as the username.  The user is added to a group named \"companies\"."
msgstr ""

#: ../../members/member_basics.rst:383
# fbc83d87724f41709eea3c6f5dab53a6
msgid "Example ``company.py``::"
msgstr ""

#: ../../members/member_profile.rst:3
# 726aabbf7c034550aed0dc00a4a48b42
msgid "Member profiles"
msgstr ""

#: ../../members/member_profile.rst:9
# 77247f04f443480daf7d21d317d1dcd8
msgid "How to manage Plone member properties programmatically"
msgstr ""

#: ../../members/member_profile.rst:14
# 5dc8c1bc0dcc4952b684666429fd1cdf
msgid "Member profile fields are the fields which the logged-in member can edit himself on his user account page."
msgstr ""

#: ../../members/member_profile.rst:17
# 96b653b1440a48c4b57abc8fa733e11a
msgid "For more info, see:"
msgstr ""

#: ../../members/member_profile.rst:20
# 5369822fe9fa437ca7942d0ccc14d0a4
msgid "``MemberDataTool``"
msgstr ""

#: ../../members/member_profile.rst:20
#: ../../members/member_profile.rst:23
# a28af575fd1f44b7a8c0f4a4d4134cb6
# 2d9c61613f0549e49df24a835b57f045
msgid "http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/MemberDataTool.py?rev=110418&view=auto"
msgstr ""

#: ../../members/member_profile.rst:23
# 13906af58013469ab676eaf22c1d7ab9
msgid "``MemberData`` class"
msgstr ""

#: ../../members/member_profile.rst:25
# d0d852d527a946fbb8f0579206ed229e
msgid "PlonePAS subclasses and extends MemberData and MemberDataTool."
msgstr ""

#: ../../members/member_profile.rst:27
# 48af1a46ef5545aca25c019118f1e7ca
msgid "`See PlonePAS MemberDataTool <http://dev.plone.org/collective/browser/Products.PlonePAS/trunk/Products/PlonePAS/tools/memberdata.py?rev=122125#L27>`_."
msgstr ""

#: ../../members/member_profile.rst:29
# 3df8be027b9242bcbf526aa199125f66
msgid "`See PlonePAS MemberData class <http://dev.plone.org/collective/browser/Products.PlonePAS/trunk/Products/PlonePAS/tools/memberdata.py?rev=122125#L220>`_."
msgstr ""

#: ../../members/member_profile.rst:32
# 6728f6f3a8f84a21b28d9cc122c7411f
msgid "Getting member profile properties"
msgstr ""

#: ../../members/member_profile.rst:36
# 26531fd0ac474195a7bdab29832abc5c
msgid "The following applies to vanilla Plone. If you have customized membership behavior it won't necessarily work."
msgstr ""

#: ../../members/member_profile.rst:39
# 1634ebec8f0049bdbc1ed507b7ff8f36
msgid "Member profile properties (title, address, biography, etc.) are stored in ``portal_membership`` tool."
msgstr ""

#: ../../members/member_profile.rst:42
# 8f57100f796b4283b263e302f065d19b
msgid "Available fields can be found in the :term:`ZMI` -> ``portal_membership`` -> :guilabel:`Properties` tab."
msgstr ""

#: ../../members/member_profile.rst:45
# d10c60c017c0447e863fdb0d6218b02c
msgid "The script below is a simple example showing how to list all member email addresses::"
msgstr ""

#: ../../members/member_profile.rst:57
# dfbbd7a7f4e942999fe442524f457fbf
msgid "Accessing member data"
msgstr ""

#: ../../members/member_profile.rst:0
#: ../../members/member_profile.rst:0
# 91932a6f1b82455eb02c6a0dad8dcac2
# ef0afa362d2c4c3c8f75d4ac7910004b
msgid "Todo"
msgstr ""

#: ../../members/member_profile.rst:61
# c0e2e5a8d37f4a6b99d6f2ce1e4b611c
msgid "Get member data by username"
msgstr ""

#: ../../members/member_profile.rst:64
# a368040596b64386aeed3f899359f346
msgid "Further reading"
msgstr ""

#: ../../members/member_profile.rst:68
# 6b681d90cfc14646a1a457a45d04287e
msgid "`ToolbarViewlet has some sample code <https://github.com/plone/plone.app.layout/tree/master/plone/app/layout/viewlets/common.py>`_"
msgstr ""

#: ../../members/member_profile.rst:67
# 1f2089357ecd4b188105eb0e15468019
msgid "how to retrieve these properties."
msgstr ""

#: ../../members/member_profile.rst:71
# 7232a78fba2e4b7c94803ebbe4c4e4b3
msgid "Getting member fullname"
msgstr ""

#: ../../members/member_profile.rst:73
# 46df14af4a054317bcf92a309f487d48
msgid "In Python code you can access properties on the ``MemberData`` object::"
msgstr ""

#: ../../members/member_profile.rst:77
# ac1e5900fa9a44f6886e43d00c9fbb8f
msgid "In a template you can do something along the same lines::"
msgstr ""

#: ../../members/member_profile.rst:83
# 9092edcce40a4726b7f87b42bfbdc5be
msgid "Note that this code won't work for anonymous users."
msgstr ""

#: ../../members/member_profile.rst:86
# c8d94724be06489381079853f38a0766
msgid "Setting member profile properties"
msgstr ""

#: ../../members/member_profile.rst:88
# b6842a25fede47289c3093689389d56c
msgid "Use ``setMemberProperties(mapping={...})`` to batch update properties. Old properties are not removed."
msgstr ""

#: ../../members/member_profile.rst:96
# 8a9c16eabef1455d8da80b13d6c6e71a
msgid "New properties must be explicitly declared in ``portal_memberdata``, before creation of the member, or ``setMemberProperties()`` will silently fail."
msgstr ""

#: ../../members/member_profile.rst:102
# 5a4d8a8208544ebbb0d1978d6a4e6866
msgid "How to retrofit existing members with new properties?"
msgstr ""

#: ../../members/member_profile.rst:135
# d30f07e3c8ff495a8bedd37c1e841312
msgid "Setting password"
msgstr ""

#: ../../members/member_profile.rst:137
# 5906bbc67d84490bb2c784166d6208e1
msgid "Password is a special case."
msgstr ""

#: ../../members/member_profile.rst:139
# 9aefaab33f62402da81a4c0a3a750d57
msgid "Example how to set the user password::"
msgstr ""

#: ../../members/member_profile.rst:147
# f35b1343650b42848148b457cf163304
msgid "Increase minimum password size"
msgstr ""

#: ../../members/member_profile.rst:149
# 6381ba5361eb4bb09fab15f624c84674
msgid "To increase the minimum password size, copy ``validate_pwreset_password`` to your custom folder and insert the following lines::"
msgstr ""

#: ../../members/member_profile.rst:155
# 11d54244eef244ecb7f7a7ea908423a4
msgid "This will increase the minimum password size for the password reset form to 8 characters. (This does not effect new user registration, that limit will still be 5.)"
msgstr ""

#: ../../members/member_profile.rst:159
# 84a660cf5baf471ab40616cdd22cd4fe
msgid "Don't forget to update your form templates to reflect your changes!"
msgstr ""

#: ../../members/member_profile.rst:164
# 85dcea8ccd8446e6bc18b17bbece18ba
msgid "Default password length - password reset form"
msgstr ""

#: ../../members/member_profile.rst:166
# 8f2481efd57c49c084a8863a7083c727
msgid "The password reset form's minimum password length is 5 characters. To increase this:"
msgstr ""

#: ../../members/member_profile.rst:169
# 07732e909b4843cbb928a98154d6df12
msgid "Copy ``validate_pwreset_password`` into your custom folder and add the following lines::"
msgstr ""

#: ../../members/member_profile.rst:175
# da92eb1e836c4b63a3e59660781083eb
msgid "before the ``if state.getErrors():`` method."
msgstr ""

#: ../../members/member_profile.rst:177
# 99d54c0707c54662a9847f22927b2ad2
msgid "This would increase the minimum password size to 8 characters. Remember to update your form templates accordingly."
msgstr ""

#: ../../members/member_profile.rst:182
# 1bc3481485744922b7195809d9c5c682
msgid "Setting visual editor for all users"
msgstr ""

#: ../../members/member_profile.rst:184
# 94493403d1904e49bf53e76eb24fbd6b
msgid "The *visual editor* property is set on the member upon creation."
msgstr ""

#: ../../members/member_profile.rst:186
# 738e4bcb5070459c86abbfeba24a2c27
msgid "If you want to change all site members to use TinyMCE instead of Kupu. you have to do it using the command-line --- Plone provides no through-the-web way to change the properties of other members. Here is a script which does the job:"
msgstr ""

#: ../../members/member_profile.rst:192
# ae2d402d448d4bdfb745bade62b60a83
msgid "``migrate.py``::"
msgstr ""

#: ../../members/member_profile.rst:222
# 93cf4867018141af85dcc5d41d311a36
msgid "Run it::"
msgstr ""

#: ../../members/member_profile.rst:228
# 9341a0c1413542b3ae8ff94273ab0813
msgid "The script does not work through the :term:`ZMI` as member properties do not have proper security declarations, so no changes are permitted."
msgstr ""

#: ../../members/member_profile.rst:233
# d74564142d0f48b6a780b45acd1d090c
msgid "Password reset requests"
msgstr ""

#: ../../members/member_profile.rst:235
# 49118b95083a44bd8469e38a515a264d
msgid "Directly manipulating password reset requests is useful e.g. for testing."
msgstr ""

#: ../../members/member_profile.rst:237
# 9d2b2b04669e47e096d7762a0d8a8c45
msgid "Poking requests::"
msgstr ""

#: ../../members/member_profile.rst:246
# 8d7f5cb550864bc6b0b19b14384cfbed
msgid "Clearing all requests::"
msgstr ""

#: ../../members/membrane.rst:3
# 071da325547e427dbbe9b99346ff138c
msgid "Members as content"
msgstr ""

#: ../../members/membrane.rst:7
# 4b66446009ce44318c2ff6d67fcffb3c
msgid "The ``Products.membrane`` and ``Products.remember`` add-ons provide member management where members are represented by Plone content items. The member-as-content paradigm makes member management radically flexible: members can be in different folders, have different workflows and states and different profile fields."
msgstr ""

#: ../../members/membrane.rst:18
# fe0c0c05feec4de78cc09b61e3c7ef78
msgid "*remember* (small r) and *membrane* are framework add-on products for Plone which allows you to manipulate site members as normal content objects. The product also allows distributed user management and different user classes."
msgstr ""

#: ../../members/membrane.rst:23
# 8b8cc393693246eeb624584af8a04d56
msgid "``Products.membrane`` provides a framework for integrating ``acl_users``, which manages access rights, with content-like members and tasks like login."
msgstr ""

#: ../../members/membrane.rst:27
# 9e2dd60f4efd4d35bae710bab49304a8
msgid "``Products.remember`` is a basic implementation of this with two different user workflows and a normal user schema."
msgstr ""

#: ../../members/membrane.rst:31
# 85eb374354d849aa94c1009d04962d3d
msgid "Basics"
msgstr ""

#: ../../members/membrane.rst:33
# d0153277cce74774ac4959f5658bd9fd
msgid "Read the `membrane tutorial <http://plone.org/documentation/tutorial/borg/membrane>`_."
msgstr ""

#: ../../members/membrane.rst:35
# b2287898a9b74d0a8ccc2fe883ce2781
msgid "See the example code ``Products.membrane.example``."
msgstr ""

#: ../../members/membrane.rst:37
# 2f0a92e823c04a68a1b05109ec9d41f6
msgid "Read the documents at ``Products.remember/docs/tutorial``."
msgstr ""

#: ../../members/membrane.rst:39
# deb8855679264cf4b1b1383a0d7bcf00
msgid "See the `Weblion FacultyStaffDirectory product <https://weblion.psu.edu/trac/weblion/wiki/FacultyStaffDirectory>`_, which is a sophisticated implementation of the framework."
msgstr ""

#: ../../members/membrane.rst:43
# 65c31e51744c43328ca92690367908f3
msgid "It is recommended to enable debug-level logging output for membrane related unit tests, as ``PlonePAS`` code swallows several exceptions and does not output them unless debug level is activated."
msgstr ""

#: ../../members/membrane.rst:48
# 571d752bf134447eb1ce001a28dc3244
msgid "Getting member by username"
msgstr ""

#: ../../members/membrane.rst:63
# 9ab9e8ff5ec044449d64c309015ec1a2
msgid "Getting Plone member from ``MembraneUser`` or ``owner`` record"
msgstr ""

#: ../../members/membrane.rst:65
# 5a9ee4c4f4914377b90fc8eede2b2294
msgid "Below is an example of how to resolve member content object from ``MembraneUser`` record \"owner\" who is user \"local_user\"::"
msgstr ""

#: ../../members/membrane.rst:75
# 7cbd17d690094a59a0d5e1e63bb2f1ca
msgid "Creating a member"
msgstr ""

#: ../../members/membrane.rst:77
# ffa0f8dce20147c5a519f819153d2f9b
msgid "The following snippet works in unit tests::"
msgstr ""

#: ../../members/membrane.rst:108
# 5edb6648a5834f7a99216f2ce174c4ee
msgid "Populating member fields automatically"
msgstr ""

#: ../../members/membrane.rst:110
# 2c3abf93ba1c46b39d4daafed06d9fde
msgid "Use the following unit test snippet::"
msgstr ""

#: ../../members/membrane.rst:148
# 0f58e1e4418243a48428276d20f27acd
msgid "Checking member validity"
msgstr ""

#: ../../members/membrane.rst:150
# 477aaaa9eff44d339377324ed42a8ddd
msgid "The following snippet is useful for unit testing::"
msgstr ""

#: ../../members/membrane.rst:163
# 102c53b6e0634f4885911665e41b8fa4
msgid "Setting user password"
msgstr ""

#: ../../members/membrane.rst:165
# d96cc36ead7b4c54b87d8169d49145e0
msgid "Passwords are stored hashed and can be set using the ``BaseMember._setPassword()`` method."
msgstr ""

#: ../../members/membrane.rst:168
# a4d3dad966874b5ab1693f6198ecb4c1
msgid "``_setPassword()`` takes the password as a plain-text argument and hashes it before storing::"
msgstr ""

#: ../../members/membrane.rst:173
# 52a05459b7524d2f8ae386bb7b727208
msgid "You may also use the ``portal_registrations`` tool. This method is security-checked and may be used from ZMI scripts::"
msgstr ""

#: ../../members/membrane.rst:179
# b98550701e8242a3a9b2f1a5f7142238
msgid "Use ``getToolByName`` rather than acquiring the tool from  ``context`` if you're doing this in a browser view."
msgstr ""

#: ../../members/membrane.rst:183
# c4214408152f44249f7775512ce0305c
msgid "Accessing hashed password"
msgstr ""

#: ../../members/membrane.rst:185
# 420b37ded89b462b84b82e16629a0241
msgid "Use the password attribute directly::"
msgstr ""

#: ../../members/membrane.rst:189
# 550dcfe1995c4758816386fe97bfde5c
msgid "The password hash should be a unicode string."
msgstr ""

#: ../../members/membrane.rst:192
# e36786c82dcf459cb350172f9c6edc96
msgid "By default, ``Products.remember`` uses the ``HMACHash`` hasher. As a salt, the ``str(context)`` string is used. This means that it is not possible to move hashed password from one context item to another. For more information, see the ``Products.remember.content.password_hashers`` module."
msgstr ""

#: ../../members/membrane.rst:199
# 431c887af481462392be862f6462ae31
msgid "Moving members"
msgstr ""

#: ../../members/membrane.rst:201
# 6e8cf213523048648dd31aadc4a0b82f
msgid "Moving members is not straightforward, as by default member password is hashed with the member location."
msgstr ""

#: ../../members/membrane.rst:204
# de24058a4fa14f8c8e8e3d32ac2f850a
msgid "Members need to reregister their password after being moved from one folder to another."
msgstr ""

#: ../../members/membrane.rst:207
# 2f9e853df365471ca8f485a7d7a1ebc5
msgid "Here is a complex function to perform moving by recreating the user and deleting the old object::"
msgstr ""

#: ../../members/sharing_tab.rst:3
# ff2d4365a7014259b2e52502fe7256c1
msgid "Sharing"
msgstr ""

#: ../../members/sharing_tab.rst:5
# 867acb261a694141aa0b92841616d214
msgid "TODO: remove this file, eventually move code example to a \"cookbook\" section."
msgstr ""

#: ../../members/sharing_tab.rst:7
# 099279bc4b984126a8f03f48583122c6
msgid "Out of date"
msgstr ""

#: ../../members/sharing_tab.rst:9
# c0150c8de9ac4b1293df7ab8bd6bee49
msgid "This page is out of date. Please visit: :doc:`Local Roles </security/local_roles>`."
msgstr ""

#: ../../members/sharing_tab.rst:14
# 1afc6110c0474f279dad8c7f7e87b2d5
msgid "Customizing the sharing feature of Plone"
msgstr ""

#: ../../members/sharing_tab.rst:22
# e41234712a514337a6e963454927ad44
msgid "`Sharing tab source code <https://github.com/plone/plone.app.workflow/tree/master/plone/app/workflow/browser/sharing.py>`_"
msgstr ""

#: ../../members/sharing_tab.rst:24
# 0eaeb14e2afd4d7da963a7c2e736e8ae
msgid "`Default sharing tab role translations <https://github.com/plone/plone.app.workflow/tree/master/plone/app/workflow/configure.zcml>`_"
msgstr ""

#: ../../members/sharing_tab.rst:28
# 8d937f01fe4a44708e8d5b820b8f699f
msgid "http://pypi.python.org/pypi/collective.sharingroles"
msgstr ""

#: ../../members/sharing_tab.rst:30
# 76afa2c610da418c8fa6d0258fdad2c7
msgid "http://encolpe.wordpress.com/2010/02/08/add-a-new-role-in-the-sharing-tab-for-plone-3/"
msgstr ""

#: ../../members/sharing_tab.rst:33
# e30ed8572bcd4a57a0b5b24e03516b98
msgid "Setting sharing rights programmatically"
msgstr ""

#: ../../members/sharing_tab.rst:36
# 50b3ca628a6849b2b3bb23174c3214cd
msgid "Complex example: Create one folder per group and add sharing rights"
msgstr ""

#: ../../members/sharing_tab.rst:38
# 4fa3158e773844e4bf4391bb92c5eb37
msgid "The sample code"
msgstr ""

#: ../../members/sharing_tab.rst:40
# 9880ea5049204abd9a629ddf4b3142d8
msgid "Creates one folder per group, with some groups excluded. The folder is not created if it exists."
msgstr ""

#: ../../members/sharing_tab.rst:42
# 6ab3b49524264611b766f58ab0294acd
msgid "Blocks role inheritance for the group"
msgstr ""

#: ../../members/sharing_tab.rst:44
# 201cab9111e74c87a564a010499f0e78
msgid "Gives edit access to the group through sharing"
msgstr ""

#: ../../members/sharing_tab.rst:46
# 4d98263db7294e03a49d18f076a0213d
msgid "Gives view access to the logged in users through sharing"
msgstr ""

#: ../../members/sharing_tab.rst:48
# a7e8b63ee7294c6aa3ece46fce1d7530
msgid "Example is provided as Zope External Method. Create External Method in the target parent folder through ZMI. Then run \"Test\" for this external method in ZMI."
msgstr ""

#: ../../members/sharing_tab.rst:107
# 5f348b533fb44bf681e90b4e50c8b0af
msgid "General methods to manipulate local roles (sharing)"
msgstr ""

#: ../../members/sharing_tab.rst:114
# a6181d6496124dda8f8118e1840b543d
msgid "would grant the role \"Reader\" (Can View on the Sharing Tab) to userid."
msgstr ""

#: ../../members/sharing_tab.rst:116
# 9dae1bad12544adb92a8fcebb67eb054
msgid "Beware that this will set the local roles for the user to only ['Reader']. If the user already has other local roles, this will (untested) clear those."
msgstr ""

#: ../../members/sharing_tab.rst:118
# ef046a46ca944c7cac21d7eb7597c000
msgid "It will not affect inherited roles."
msgstr ""

