# SOME DESCRIPTIVE TITLE.
# Copyright (C) Plone community and other individual contributors
# This file is distributed under the same license as the Plone Developer Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Developer Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-09 14:22+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../glossary.rst:3
# ba5ce15de6714b7394ffa70ac674afe4
msgid "Glossary"
msgstr ""

#: ../../glossary.rst:5
# 01f345f3b7a34a1c8112455ace6da16e
msgid "This is a glossary for some definitions used in this documentation and still heavily under construction."
msgstr ""

#: ../../glossary.rst:8
# 19466afb402e4633aae304610c23ba6a
msgid "It incorporates the original `glossary on plone.org <http://plone.org/documentation/glossary>`_."
msgstr ""

#: ../../glossary.rst:500
# 53bd802990b14fc2bd4f3086b14c9f4a
msgid ".po"
msgstr ""

#: ../../glossary.rst:502
# a2f0910ae54f4e6d9a88d96df8d02cec
msgid "The file format used by the :term:`gettext` translation system. http://www.gnu.org/software/hello/manual/gettext/PO-Files.html"
msgstr ""

#: ../../glossary.rst:197
# b51d88c8cb3f47ffab10256ec0063bb4
msgid "Acquisition"
msgstr ""

#: ../../glossary.rst:199
# e15bbe7a256d4a5da65d0ed5ba4a2160
msgid "Simply put, any Zope object can acquire any object or property from any of its parents. That is, if you have a folder called *A*, containing two resources (a document called *homepage* and another folder called *B*), then an URL pointing at http://.../A/B/homepage would work even though *B* is empty. This is because Zope starts to look for *homepage* in *B*, doesn't find it, and goes back up to *A*, where it's found. The reality, inevitably, is more complex than this. For the whole story, see the `Acquisition chapter in the Zope Book <http://www.plope.com/Books/2_7Edition/Acquisition.stx>`_."
msgstr ""

#: ../../glossary.rst:366
# 28e00d54637240f5bbc35033987a788e
msgid "AGX"
msgstr ""

#: ../../glossary.rst:368
# 3fecbea41dd64635a5aafefe5fb7d4e1
msgid "AGX is short for :term:`ArchGenXML`."
msgstr ""

#: ../../glossary.rst:229
# fdb5c7c2a77b4ee2a81394ad9135fc8a
msgid "Archetypes"
msgstr ""

#: ../../glossary.rst:231
# aa67d634c205488caed1f46e46bfbb58
msgid "Archetypes is a framework designed to facilitate the building of applications for Plone and :term:`CMF`. Its main purpose is to provide a common method for building content objects, based on schema definitions. Fields can be grouped for editing, making it very simple to create wizard-like forms. Archetypes is able to do all the heavy lifting needed to bootstrap a content type, allowing the developer to focus on other things such as business rules, planning, scaling and designing. It provides features such as auto-generation of editing and presentation views. Archetypes code can be generated from :term:`UML` using :term:`ArchGenXML`."
msgstr ""

#: ../../glossary.rst:359
# 7835e3a25ff74dc495770c23e6ac02c5
msgid "ArchGenXML"
msgstr ""

#: ../../glossary.rst:361
# b4430b05d3284227bef18f40d93f6c22
msgid "ArchGenXML is a code-generator for CMF/Plone applications (a :term:`Product`) based on the :term:`Archetypes` framework. It parses UML models in XMI-Format (``.xmi``, ``.zargo``, ``.zuml``), created with applications such as ArgoUML, Poseidon or ObjectDomain. A brief tutorial for ArchGenXML is present on the plone.org site."
msgstr ""

#: ../../glossary.rst:290
# e1a61c7bc9414400977057707f598c84
msgid "ATCT"
msgstr ""

#: ../../glossary.rst:292
# 4eb5585aba8c42fdac6d72acb719c366
msgid "ATContentTypes - the new content types written with Archetypes which replaces the default CMF content types in Plone 2.1 onwards."
msgstr ""

#: ../../glossary.rst:335
# 9cb162dd841b430e9f71fb01402b0a0c
msgid "BBB"
msgstr ""

#: ../../glossary.rst:337
# d05dd2462d6e46c48a91d30c910b3f9b
msgid "When adding (or leaving) a piece of code for backward compatibility, we use a BBB comment marker with a date."
msgstr ""

#: ../../glossary.rst:66
# 396b53848e94463e85c0590a7a7ad226
msgid "Catalog"
msgstr ""

#: ../../glossary.rst:68
# b7bdc5d5715b4c09a207a94b6b36988b
msgid "The catalog is an internal index of the content inside Plone so that it can be searched. The catalog object is accessible through the :term:`ZMI` as the ``portal_catalog`` object."
msgstr ""

#: ../../glossary.rst:241
# 8468215fdb1b45a79533454a7ace8a4d
msgid "CMF"
msgstr ""

#: ../../glossary.rst:243
# cc42efed8d5447dca288cc9e267c2fa3
msgid "The *Content Management Framework* is a framework for building content-oriented applications within Zope. It as formed the basis of Plone content from the start."
msgstr ""

#: ../../glossary.rst:305
# ecc59a2605ce42b3b158ae917c721051
msgid "Collective"
msgstr ""

#: ../../glossary.rst:307
# a686f0ea4bd8494691e5b26ac8e9e0cd
msgid "The *Collective* is a community code repository for Plone Products and other add-ons, and is a useful place to find the very latest code for hundreds of add-ons to Plone. Developers of new Plone Products are encouraged to share their code via the Collective so that others can easily find it, use it, and contribute fixes and improvements."
msgstr ""

#: ../../glossary.rst:150
# 3c87e67407e64981a49b72db7218c508
msgid "CSS"
msgstr ""

#: ../../glossary.rst:152
# 8a9581f174ec405eadf002395eb4ced7
msgid "Cascading Style Sheets is a way to separate content from presentation. Plone uses this extensively, and it is a web standard `documented at the W3C web site <http://www.w3.org/Style/CSS/>`_. If you want to learn CSS, we recommend `the W3Schools CSS Resources <http://www.w3schools.com/Css/default.asp>`_ and the `SitePoint CSS Reference <http://reference.sitepoint.com/css>`_."
msgstr ""

#: ../../glossary.rst:77
# d92cbdd4e55344a4ba344ac25a8cc1cc
msgid "Document"
msgstr ""

#: ../../glossary.rst:79
# 4ffe85c873dc407684782aa980004cb5
msgid "A document is a page of content, usually a self-contained piece of text. Documents can be written in several different formats, plain text, HTML or (re)Structured Text. The default home page for a Plone site is one example of a document."
msgstr ""

#: ../../glossary.rst:71
# 0eb45d48e794448c84ba60dbbaa63581
msgid "DTML"
msgstr ""

#: ../../glossary.rst:73
# 14341f9169d94cef97fd7ec67e64b27a
msgid "Document Template Markup Language. DTML is a server-side templating language used to produce dynamic pieces of content, but is now superseded by :term:`ZPT` for HTML and XML content. It is still used sparingly for non-XML content like SQL and mail/CSS."
msgstr ""

#: ../../glossary.rst:91
# 0d7c8de66c8040f385f3f339cef6adaf
msgid "Dublin Core"
msgstr ""

#: ../../glossary.rst:93
# 0ca9cad24ebb46c5a076306a04eadced
msgid "Dublin Core is a standard set of metadata which enables the description of resources for the purposes of discovery. See https://en.wikipedia.org/wiki/Dublin_Core"
msgstr ""

#: ../../glossary.rst:460
# e18820aa0b4047a2b230d6daf08a849e
msgid "easy_install"
msgstr ""

#: ../../glossary.rst:462
# 3e81eba955204da1888c10d535b0168a
msgid "A command-line tool for automatic discovery and installation of packages into a Python environment. The ``easy_install`` script is part of the ``setuptools`` package, which uses the :term:`Python Package Index` as its source for packages."
msgstr ""

#: ../../glossary.rst:12
# cdf3546186cc495e8b5d649a3a3cbc67
msgid "Egg"
msgstr ""

#: ../../glossary.rst:14
# fa887e4bc5054f598432e7ed6369b666
msgid "See :term:`Python egg`."
msgstr ""

#: ../../glossary.rst:83
# 1e79aa552ce94d17b7626d3ff4e18eb5
msgid "Expiration Date"
msgstr ""

#: ../../glossary.rst:85
# a8992b9bacee46068e40f0fdf29b3569
msgid "The last day an item should show up in searches, news listings etc. Please note that this doesn't actually remove or disable the item, it merely makes it not show up in searches."
msgstr ""

#: ../../glossary.rst:89
# 6f240fd714624d4aa7366f65e1b99187
msgid "This is part of the Dublin Core metadata that is present on all Plone objects."
msgstr ""

#: ../../glossary.rst:519
# ebdc276ca72c438796be27dac5b0d667
msgid "GenericSetup"
msgstr ""

#: ../../glossary.rst:521
# c6232772a55943eaa394d7d27215013b
msgid "An XML-based configuration system for Zope and Plone applications."
msgstr ""

#: ../../glossary.rst:0
#: ../../glossary.rst:0
# e96e667836e349fe9357cb84370c5ffa
# 7e1e921a47e042e993708621c042eb56
msgid "Todo"
msgstr ""

#: ../../glossary.rst:523
#: ../../glossary.rst:531
# 10382b01acac4af988e660f97302dae3
# 142e483bcf5c418f8c16dfbf2c6d4f3f
msgid "Add reference."
msgstr ""

#: ../../glossary.rst:504
# 6d0cdd528c7e423696bc56c0d499e28e
msgid "gettext"
msgstr ""

#: ../../glossary.rst:506
# 88a58043ec3846d39c8ed5635d0d26e5
msgid "UNIX standard software translation tool. See http://www.gnu.org/software/gettext/"
msgstr ""

#: ../../glossary.rst:497
# 9d175339f13b43e39c6165b0af2e3325
msgid "grok"
msgstr ""

#: ../../glossary.rst:499
# 2e204de90710429a98db1f3e0ec68f6d
msgid "See the grok project documentation."
msgstr ""

#: ../../glossary.rst:133
# d3d5978b98be4add9787b92e1bed1b07
msgid "i18n"
msgstr ""

#: ../../glossary.rst:135
# ba2138fbb58041a1b00954c223e7a75b
msgid "i18n is shorthand for \"internationalization\" (the letter I, 18 letters, the letter N) - and refers to the process of preparing a program so that it can be used in multiple languages without further altering the source. Plone is fully internationalized."
msgstr ""

#: ../../glossary.rst:508
# ab20d421b1844b60ae6ac5c5e09668c2
msgid "i18ndude"
msgstr ""

#: ../../glossary.rst:510
# 277f1155b3554b30975220cba4c79ac7
msgid "Support tool to create and update message catalogs from instrumented source code."
msgstr ""

#: ../../glossary.rst:532
# 2885aa53208c4738a14242a7e87a7884
msgid "JSON"
msgstr ""

#: ../../glossary.rst:534
# 8e09487610284beca59e3989681d542f
msgid "JavaScript Object Notation. JSON is a lightweight text-based open standard designed for human-readable data interchange. In short, it's a string that looks like a JavaScript array, but is constrained to 6 simple data types. It can be parsed by many languages."
msgstr ""

#: ../../glossary.rst:252
# 43c741b44c8447f3bf0cf602c9667b42
msgid "KSS"
msgstr ""

#: ../../glossary.rst:254
# 3f4004b149d645e6a3ea6c0af4253f3b
msgid "*Kinetic Style Sheets* is a client-side framework for implementing rich user interfaces with AJAX functionality. It allows attaching actions to elements using a CSS-like rule syntax. KSS was added to Plone in Plone 3 and removed in Plone 4.3, because JQuery made it obsolete."
msgstr ""

#: ../../glossary.rst:208
# 78e69682f1df4073a5e24719895fe084
msgid "Kupu"
msgstr ""

#: ../../glossary.rst:210
# c481cf62354a4b409a87b1cd63fea900
msgid "Kupu is the user-friendly graphical HTML editor component that used to be bundled with Plone, starting with version 2.1. It has since been replaced by :term:`TinyMCE`."
msgstr ""

#: ../../glossary.rst:139
# 5bd2b93dce774442bd166e7c5b4a107e
msgid "l10n"
msgstr ""

#: ../../glossary.rst:141
# d5dcfa45ff904ce18999d56d55678e83
msgid "Localization is the actual preparing of data for a particular language. For example Plone is i18n aware and has localization for several languages. The term l10n is formed by the first and last letter of the word and the number of letters in between."
msgstr ""

#: ../../glossary.rst:96
# aeb9594a31174b6dbbbcc1137f991c8c
msgid "Layer"
msgstr ""

#: ../../glossary.rst:98
# e2de59d70f0644d4a8cff711d3a68fa2
msgid "A layer is a set of templates and scripts that get presented to the user. By combining these layers, you create what is referred to as a :term:`skin`. The order of layers is important, the topmost layers will be examined first when rendering a page. Each layer is an entry in ``portal_skins`` -> 'Contents', and is usually a Filesystem Directory View or a Folder.  See http://plone.org/documentation/manual/theme-reference/buildingblocks/skin/layers"
msgstr ""

#: ../../glossary.rst:159
# 6189eb202363481298407f0fc455bf19
msgid "LDAP"
msgstr ""

#: ../../glossary.rst:161
# a648a48b62964ef8bfe2e34efcf14408
msgid "Lightweight Directory Access Protocol. An internet protocol which provides a specification for user-directory access by wire, attribute syntax, representation of distinguished names, search filters, an URL format, a schema for user-centric information, authentication methods, and transport layer security. Example: an email client might connect to an LDAP server in order to look up an email address for a person by a person's name."
msgstr ""

#: ../../glossary.rst:168
# 18c9ff43f9944e368da7049e257af28d
msgid "Manager"
msgstr ""

#: ../../glossary.rst:170
# 778a7d4d801d4316aeee490fd48365be
msgid "The *Manager* Security role is a standard role in Zope. A user with the Manager role has ALL permissions except the Take Ownership permission. Also commonly known as Administrator or root in other systems."
msgstr ""

#: ../../glossary.rst:372
# a5ccaeea7eca473ca1f838db766db9af
msgid "METAL"
msgstr ""

#: ../../glossary.rst:374
# e8b786576e41403d92401b0d6e32320a
msgid "Macro Expansion Template Attribute Language. See :term:`ZPT`."
msgstr ""

#: ../../glossary.rst:343
# b0adceac5d4549df843b50657d092304
msgid "Monkey patch"
msgstr ""

#: ../../glossary.rst:345
# 128e445898ff4b38a4fc7451f21a3551
msgid "A monkey patch is a way to modify the behaviour of Zope or a Product without altering the original code. Useful for fixes that have to live alongside the original code for a while, like security hotfixes, behavioural changes, etc."
msgstr ""

#: ../../glossary.rst:350
# aab8838bc4aa47ec9e0354768db45887
msgid "The term \"monkey patch\" seems to have originated as follows: First it was \"guerrilla patch\", referring to code that sneakily changes other code at runtime without any rules. In Zope 2, sometimes these patches conflict. This term went around Zope Corporation for a while. People heard it as \"gorilla patch\", though, since the two words sound very much alike, and the word gorilla is heard more often. So, when someone created a guerrilla patch very carefully and tried to avoid any battles, they tried to make it sound less forceful by calling it a monkey patch. The term stuck."
msgstr ""

#: ../../glossary.rst:466
# d46a5ee75b7046b2bb30b9b508ea326d
msgid "Namespace package"
msgstr ""

#: ../../glossary.rst:468
# 525a7f168372485192aee20c269d6bb5
msgid "A feature of setuptools which makes it possible to distribute multiple, separate packages sharing a single top-level namespace. For example, the packages ``plone.theme`` and ``plone.portlets`` both share the top-level ``plone`` namespace, but they are distributed as separate eggs. When installed, each egg's source code has its own directory (or possibly a compressed archive of that directory).  Namespace packages eliminate the need to distribute one giant plone package, with a top-level plone directory containing all possible children."
msgstr ""

#: ../../glossary.rst:246
# e10d0fb2d1a8419dbd5ef709b1b18f3a
msgid "OpenID"
msgstr ""

#: ../../glossary.rst:248
# 1beca3491dac4f3fb22eabf366e7fd58
msgid "A distributed identity system. Using a single URI provider an individual is able to login to any web site that accepts OpenID using the URI and a password. Plone implements OpenID as a :term:`PAS` plug-in."
msgstr ""

#: ../../glossary.rst:188
# 12eacadca59940c286f461526cc934e5
msgid "PAS"
msgstr ""

#: ../../glossary.rst:190
# 9415cec94be44e4f8b6cf149f0f3afba
msgid "The Pluggable Authentication Service (PAS) is a framework for handling authentication in Zope 2. PAS is a Zope ``acl_users`` folder object that uses \"plugins\" that can implement various authentication interfaces (for example :term:`LDAP` and :term:`OpenID`) that plug into the PAS framework .  Zope 3 also uses a design inspired by PAS. PAS was integrated into Plone at the 2005 San Jose Sprint."
msgstr ""

#: ../../glossary.rst:276
# 8eb45dfb8eb8484984035c69cc062dbb
msgid "PLIP"
msgstr ""

#: ../../glossary.rst:278
# bb9e1a9cecd94ad2a4d33b0649fe091a
msgid "*PLone Improvement Proposal* (just like Python's PEPs: Python Enhancement Proposals). These are documents written to structure and organise proposals for the improvement of Plone."
msgstr ""

#: ../../glossary.rst:282
# 5a8e44bfeb80430598cd84ac7136a227
msgid "Motivation, deliverables, risks and a list of people willing to do the work must be included. This document is submitted to the `Framework Team <http://plone.org/team/FrameworkTeam>`_, who reviews the proposal and decides if it's suitable to be included in the next Plone release or not."
msgstr ""

#: ../../glossary.rst:288
# 2f671ca358234157b3f7d09481baafce
msgid "See more info about how to write a `PLIP <http://dev.plone.org/plone/wiki/PLIP>`_."
msgstr ""

#: ../../glossary.rst:547
# 937abd11e4134d098c0dd956cffd0e3a
msgid "Plonista"
msgstr ""

#: ../../glossary.rst:549
# 0f9e0bc0988b4978b14f53b511a012b1
msgid "A Plonista is a member of the Plone community. It can be somebody who loves Plone, or uses Plone, or someone who spreads Plone and Plone knowledge. It can also be someone who is a Plone developer, or it can be all of the above."
msgstr ""

#: ../../glossary.rst:224
# 550369faeca3487ba12b71e2bbfa01cd
msgid "Product"
msgstr ""

#: ../../glossary.rst:226
# bffbf45bfceb4161bec8c700e2579470
msgid "A Plone-specific module that extends Plone functionality and can be managed via the Plone Control Panel. Plone Products often integrate non-Plone-specific modules for use within the Plone context."
msgstr ""

#: ../../glossary.rst:433
# d1f6d55f4da44745a81456715c4fa0b9
msgid "Python egg"
msgstr ""

#: ../../glossary.rst:435
# 217ce851c86240fa93b26050ffec3c3d
msgid "A widely used Python packaging format which consists of a zip or ``.tar.gz`` archive with some metadata information. It was introduced by `setuptools <http://peak.telecommunity.com/DevCenter/EasyInstall>`_ which has since been superseded by `Distribute <http://packages.python.org/distribute/>`_."
msgstr ""

#: ../../glossary.rst:442
# 987292bfd7ab4c16a2e4a57b7ab6663f
msgid "A way to package and distribute Python packages. Each egg contains a ``setup.py`` file with metadata (such as the author's name and email address and licensing information), as well as information about dependencies. ``setuptools``, the Python library that powers the egg mechanism, is able to automatically find and download dependencies for eggs that you install. It is even possible for two different eggs to concurrently use different versions of the same dependency. Eggs also support a feature called *entry points*, a kind of generic plug-in mechanism. Much more detail is available at the `PEAK website <http://peak.telecommunity.com/DevCenter/setuptools>`_."
msgstr ""

#: ../../glossary.rst:420
# 7d75e008200648e28cfabf06b2e0a240
msgid "Python package"
msgstr ""

#: ../../glossary.rst:422
# a614c681899a4a4993abc0389bc4b18f
msgid "A general term describing a redistributable Python module. At the most basic level, a package is a directory with an ``__init__.py`` file, which can be blank."
msgstr ""

#: ../../glossary.rst:452
# 7d75c7a88b234ef0b2a8287919e09c16
msgid "Python Package Index"
msgstr ""

#: ../../glossary.rst:454
# cd21aa21acb2419ea785a02761a53ee2
msgid "The Python community's index of thousands of downloadable Python packages. It is available as a website to browse, with the ability to search for a particular package. More importantly, setuptools-based packaging tools (most notably, ``buildout`` and ``easy_install``) can query this index to download and install eggs automatically. Also known as the Cheese Shop or PyPI."
msgstr ""

#: ../../glossary.rst:409
# afa4257eb178484689fc32c8bfc51541
msgid "Python path"
msgstr ""

#: ../../glossary.rst:411
# 1132a45195c741869e0b147d4ccf73d9
msgid "The order and location of folders in which the Python interpreter will look for modules. It's available in python via ``sys.path``. When Zope is running, this typically includes the global Python modules making up the standard library, the interpreter's site-packages directory, where third party \"global\" modules and eggs are installed, the Zope software home, and the ``lib/python`` directory inside the instance home. It is possible for python scripts to include additional paths in the Python path during runtime. This ability is used by ``zc.buildout``."
msgstr ""

#: ../../glossary.rst:319
# 9281cab9c1694ede8bec12e5de3dec76
msgid "RAD"
msgstr ""

#: ../../glossary.rst:321
# 5d510703af214fd7a86ff6962c7c292f
msgid "Rapid Application Development - A term applied to development tools to refer to any number of features that make programming easier. :term:`Archetypes` and :term:`ArchGenXML` are examples of these from the Plone universe."
msgstr ""

#: ../../glossary.rst:145
# 6bfefea2fcf14b0baa18ea2ee1257de4
msgid "Request"
msgstr ""

#: ../../glossary.rst:147
# a28ec1ce379346f9b8dc63992d1c936c
msgid "Each page view by a client generates a request to Plone. This incoming request is encapsulated in a *request* object in Zope, usually called REQUEST (or lowercase \"request\" in the case of ZPT)."
msgstr ""

#: ../../glossary.rst:294
# cc7a23b15bff4c8e8deac05062895682
msgid "ResourceRegistries"
msgstr ""

#: ../../glossary.rst:296
# f5a0d23fe9684714800fbcbb9671b27a
msgid "A piece of Plone infrastructure that allows CSS/Javascript declarations to be contained in separate, logical files before ultimately being appended to the existing Plone CSS/Javascript files on page delivery. Primarily enables Product authors to \"register\" new CSS/Javascript without needing to touch Plone's templates, but also allows for selective inclusion of CSS/Javascript files and reduces page load by minimizing individual calls to separate blocks of CSS/Javascript files. Found in the :term:`ZMI` under ``portal_css`` and ``portal_javascript``."
msgstr ""

#: ../../glossary.rst:15
# 0b9ebad8b74540198eef6562d32a1c02
msgid "reStructuredText"
msgstr ""

#: ../../glossary.rst:17
# 7b24ac712332472b851f285251c016f2
msgid "The standard plaintext markup language used for Python documentation: http://docutils.sourceforge.net/rst.html"
msgstr ""

#: ../../glossary.rst:20
# 965dfd7e11ed4f24b8580c697ccad821
msgid "`reStructuredText <http://docutils.sourceforge.net/rst.html>`_ is an easy-to-read plaintext markup syntax and parser system. It is useful for in-line program documentation (such as Python docstrings), for quickly creating simple web pages, and for standalone documents. reStructuredText is designed to be extensible for specific application domains. The reStructuredText parser is a component of `Docutils <http://docutils.sourceforge.net/index.html>`_."
msgstr ""

#: ../../glossary.rst:28
# 6bdd3967f2184bfaa3968e69c68ddcbd
msgid "reStructuredText is a revision and reinterpretation of the `StructuredText <http://plone.org/documentation/glossary/stx>`_ and `Setext <http://docutils.sourceforge.net/mirror/setext.html>`_ lightweight markup systems."
msgstr ""

#: ../../glossary.rst:105
# 91f02333ecba457ea460efd18e37e022
msgid "Skin"
msgstr ""

#: ../../glossary.rst:107
# b0f9203e8a8e4e20890ab11b37b5eb71
msgid "A collection of template layers (see :term:`layer`) is used as the search path when a page is rendered and the different parts look up template fragments.  Skins are defined in the :term:`ZMI` in ``portal_skins`` tool. Used for both presentation and code customizations."
msgstr ""

#: ../../glossary.rst:32
# deb78001ab604c2a8c8a62c73bfa634a
msgid "slug"
msgstr ""

#: ../../glossary.rst:34
# 56caa70e10334dde8222a15abd650caf
msgid "A :term:`ZCML` *slug* is a one-line file created in a Zope instance's ``etc/package-includes`` directory, with a name like ``my.package-configure.zcml``. The contents of the file would be something like: ``<include package=\"my.package\" file=\"configure.zcml\" />``"
msgstr ""

#: ../../glossary.rst:40
# db783f1ab02c40f0b92b88a7cda70a3b
msgid "This is the Zope 3 way to load a particular package."
msgstr ""

#: ../../glossary.rst:379
# 5279d81ed8884854a0216cc78230e122
msgid "Software home"
msgstr ""

#: ../../glossary.rst:381
# a5037237c2784a8a9188059586ff6e8c
msgid "The directory inside the Zope installation (on the filesystem) that contains all the Python code that makes up the core of the Zope application server. The various Zope packages are distributed here. Also referred to as the ``SOFTWARE_HOME`` environment variable. It varies from one system to the next, depending where you or your packaging system installed Zope. You can find the value of this in the *ZMI > Control Panel*."
msgstr ""

#: ../../glossary.rst:313
# 7537b8a35b504554bc7b1c5d34028103
msgid "Sprint"
msgstr ""

#: ../../glossary.rst:315
# fee4b97631b64cda95658f659136b490
msgid "Based on ideas from the extreme programming (XP) community. A sprint is a three to five day focused development session, in which developers pair in a room and focus on building a particular subsystem. See http://plone.org/events/sprints"
msgstr ""

#: ../../glossary.rst:57
# 8cead2e404b44915982d29bf3f0d7d54
msgid "STX"
msgstr ""

#: ../../glossary.rst:59
# 308e0938fec44cc4ac3f0f5e8f9c2095
msgid "Structured Text is a simple markup technique that is useful when you don't want to resort to HTML for creating web content. It uses indenting for structure, and other markup for formatting. It has been superseded by :term:`reStructuredText`, but some people still prefer the old version, as it's simpler. More information in the `How-to section of plone.org <http://plone.org/documentation/howto/structured-text-cheatsheet>`_."
msgstr ""

#: ../../glossary.rst:174
# 8172282e2529433b84c03f803b79e418
msgid "Syndication"
msgstr ""

#: ../../glossary.rst:176
# f838002138ec4cfcb96c66547e18ce38
msgid "Syndication shows you the several most recently updated objects in a folder in RSS format. This format is designed to be read by other programs."
msgstr ""

#: ../../glossary.rst:369
# 0afc48f588094245a374afe4ed9b4619
msgid "TAL"
msgstr ""

#: ../../glossary.rst:371
# 7c96309bd35d49e5a03a0d630dc1fc82
msgid "Template Attribute Language. See :term:`ZPT`."
msgstr ""

#: ../../glossary.rst:375
# cfc5dbfde00542178c923ea1ee59cf89
msgid "TALES"
msgstr ""

#: ../../glossary.rst:377
# 730ef3b1c93043ffa31e27a045123700
msgid ":term:`TAL` Expression Syntax. The syntax of the expressions used in TAL attributes."
msgstr ""

#: ../../glossary.rst:213
# f4cc4d02e20c42709bba58e1c79868e2
msgid "TinyMCE"
msgstr ""

#: ../../glossary.rst:215
# 8e729d3fc3ea4e39b36eae59ab617b68
msgid "A graphical HTML editor bundled with Plone."
msgstr ""

#: ../../glossary.rst:339
# b8d802a23d63460fa63f46d3d9f89936
msgid "TODO"
msgstr ""

#: ../../glossary.rst:341
# 5381ecd6b8ae43828b5b915cf5c952c2
msgid "The TODO marker in source code records new features, non-critical optimization notes, design changes, etc."
msgstr ""

#: ../../glossary.rst:258
# 04991d676dc44058b89214a7c760fde3
msgid "Traceback"
msgstr ""

#: ../../glossary.rst:260
# 31ea89c1dd994f01bebb42e33ced9eb7
msgid "A Python \"traceback\" is a detailed error message generated when an error occurs in executing Python code. Since Plone, running atop Zope, is a Python application, most Plone errors will generate a Python traceback. If you are filing an issue report regarding a Plone or Plone-product error, you should try to include a traceback log entry with the report."
msgstr ""

#: ../../glossary.rst:267
# de5da11c596b4316bbfb72bfc52133aa
msgid "To find the traceback, check your ``event.log`` log file. Alternatively, use the ZMI to check the ``error_log`` object in your Plone folder. Note that your Zope must be running in *debug* mode in order to log tracebacks."
msgstr ""

#: ../../glossary.rst:272
# 153c2bf210724c74974570fa17f99d21
msgid "A traceback will be included with nearly all error entries. A traceback will look something like this: \"Traceback (innermost last): ...  AttributeError: adapters\" They can be very long. The most useful information is generally at the end."
msgstr ""

#: ../../glossary.rst:512
# 71f714dcd3454fc48d0da734a3c57d5b
msgid "traversal"
msgstr ""

#: ../../glossary.rst:514
# 84a700fb442644fda901fef7fe4f40a7
msgid "Publishing an object from the ZODB by traversing its parent objects, resolving security and names in scope. See the `Acquisition chapter in the Zope 2 book <http://docs.zope.org/zope2/zope2book/ZEO.html>`_. http://docs.zope.org/zope2/zope2book/Acquisition.html"
msgstr ""

#: ../../glossary.rst:183
# 10e2387290e246d4ba0bce946854f7e7
msgid "TTP"
msgstr ""

#: ../../glossary.rst:185
# fac47fed74814a17a16c405dec7a4849
msgid "Actions done TTP are performed \"Through the Plone\" interface. It is normally a lazy way of telling you that you should not add things from the ZMI, as is the case for adding content, for example."
msgstr ""

#: ../../glossary.rst:179
# 75deb5df52e4432ba463df089306bb73
msgid "TTW"
msgstr ""

#: ../../glossary.rst:181
# e379d6e3aa194f0480596f43291eb388
msgid "This is a general term meaning an action can be performed \"Through The Web,\" as opposed to, say, being done programmatically."
msgstr ""

#: ../../glossary.rst:216
# 9451e70072a14bd0990ea56ce3a1e8e8
msgid "UML"
msgstr ""

#: ../../glossary.rst:218
# 03df42c6b1de49089736dbef0b6c3d9f
msgid "The *Unified Modeling Language* is a general-purpose modeling language that includes a standardized graphical notation used to create an abstract model of a system, referred to as a *UML model*. With the use of :term:`ArchGenXML`, this can be used to generate code for CMF/Plone applications (a :term:`Product`) based on the Archetypes framework."
msgstr ""

#: ../../glossary.rst:524
# f708267c120f4253923f383d93100329
msgid "virtualenv"
msgstr ""

#: ../../glossary.rst:526
# 159d8c8397bf49b39d5ac5aabf2a7589
msgid "``virtualenv`` is a tool for creating a project directory with a Python interpreter that is isolated from the rest of the system. Modules that you install in such an environment remain local to it, and do not impact your system Python or other projects."
msgstr ""

#: ../../glossary.rst:41
# 399f853f46934b85b2155788c69aadaa
msgid "VirtualHostMonster"
msgstr ""

#: ../../glossary.rst:43
# 5ef7183555f94be6a51d3e373a04cb48
msgid "A Zope technology that supports virtual hosting. See `VirtualHostMonster URL rewriting mechanism <http://docs.zope.org/zope2/zope2book/VirtualHosting.html>`_"
msgstr ""

#: ../../glossary.rst:46
# eb7795fd66d54c6fa2a873595a1089f3
msgid "Workflow"
msgstr ""

#: ../../glossary.rst:48
# d71b94804ceb4a2b999425e6125a4aa2
msgid "Workflow is a very powerful way of mimicking business processes — it is also the way security settings are handled in Plone."
msgstr ""

#: ../../glossary.rst:325
# 19ec2f55daac4bd49f2654bb96d0b46f
msgid "XXX"
msgstr ""

#: ../../glossary.rst:327
# fc02ee4fcd1841d5b610d01a84a04421
msgid "XXX is a marker in the comments of the source code that should only be used during development to note things that need to be taken care of before a final (trunk) commit. Ideally, one should not expect to see XXXs in released software. XXX shall not be used to record new features, non-critical optimization, design changes, etc. If you want to record things like that, use TODO comments instead. People making a release shouldn't care about TODOs, but they ought to be annoyed to find XXXs."
msgstr ""

#: ../../glossary.rst:538
# 2858ffd4412d431095653a4acd3afdb9
msgid "ZCA"
msgstr ""

#: ../../glossary.rst:540
# af9699002a2648ca9ed0bee9d0edf454
msgid "The Zope Component Architecture (ZCA) is a Python framework for supporting component-based design and programming. It is very well suited to developing large Python software systems. The ZCA is not specific to the Zope web application server: it can be used for developing any Python application. From `A Comprehensive Guide to Zope Component Architecture <http://www.muthukadan.net/docs/zca.html>`_."
msgstr ""

#: ../../glossary.rst:477
# 879c667f4e2240ec9da35415dd83205c
msgid "ZCML"
msgstr ""

#: ../../glossary.rst:479
# f508e2a8138f4614a43345956ad71a63
msgid "Zope Configuration Markup Language. Zope 3 separates policy from the actual code and moves it out to separate configuration files, typically a ``configure.zcml`` file in a buildout. This file configures the Zope instance. 'Configuration' might be a bit misleading here and should be thought or more as wiring. ZCML, the XML-based configuration language that is used for this, is tailored to do component registration and security declarations, for the most part. By enabling or disabling certain components in ZCML, you can configure certain policies of the overall application. In Zope 2, enabling and disabling components means to drop in or remove a certain Zope 2 product. When it's there, it's automagically imported and loaded. This is not the case in Zope 3. If you don't enable it explicitly, it will not be found."
msgstr ""

#: ../../glossary.rst:493
# 372eccb1125443b58824be28db54bef3
msgid "The :term:`grok` project has taken a different approach to the same problem, and allows component registration etc. to be done declaratively from Python code. Both approaches are possible in Plone."
msgstr ""

#: ../../glossary.rst:401
# d8432a5632f44d1dada4bedf35ded637
msgid "ZEO server"
msgstr ""

#: ../../glossary.rst:403
# 33947b7db8714d6db44367f433ecac71
msgid "ZEO (Zope Enterprise Objects) is a scaling solution used with Zope. The ZEO server is a storage server that allows multiple Zope instances, called ZEO clients, to connect to a single database.  ZEO clients may be distributed across multiple machines.  For additional info, see `the related chapter in The Zope Book <http://docs.zope.org/zope2/zope2book/ZEO.html>`_."
msgstr ""

#: ../../glossary.rst:112
# c73560b615c9405d9b48db90d4d28469
msgid "ZMI"
msgstr ""

#: ../../glossary.rst:114
# e420be8b795b40e4a9211751cae1d89c
msgid "The *Zope Management Interface*. Zope has a built in Management Interface that is accessible through the web. Accessing is as simple as appending ``/manage`` to your URL, for example: ``http://localhost/manage`` - or visiting Plone Setup and clicking the *Zope Management Interface* link (Click 'View' to go back to the Plone site). Be careful in there, though - it's the \"geek view\" of things, and is not straightforward, nor does it protect you from doing stupid things. :)"
msgstr ""

#: ../../glossary.rst:50
# c5aad78819bb49e79f687668c7096b62
msgid "ZODB"
msgstr ""

#: ../../glossary.rst:52
# 2015d7928e044304bc4af48c03672619
msgid "The Zope Object Database is where your content is normally stored when you are using Plone. The default storage backend of the ZODB is *filestorage*, which stores the database on the file system in the file(s) such as ``Data.fs``, normally located in the ``var`` directory."
msgstr ""

#: ../../glossary.rst:388
# 052d0193d42a404095ae1900c9044f65
msgid "Zope instance"
msgstr ""

#: ../../glossary.rst:390
# a122d48c7a5c4d0c841a4fa5085c684a
msgid "An operating system process that handles HTTP interaction with a Zope database (:term:`ZODB`). In other words, the Zope web server process.  Alternatively, the Python code and other configuration files necessary for running this process."
msgstr ""

#: ../../glossary.rst:395
# 0c36946c83ce42849a72b3285d4816a2
msgid "One Zope installation can support multiple instances. Use the buildout recipe ``plone.recipe.zope2instance`` to create new Zope instances in a buildout environment."
msgstr ""

#: ../../glossary.rst:399
# b8c30826d70e44a09de06e6f8b3f6aba
msgid "Several Zope instances may serve data from a single ZODB using a ZEO server on the back-end."
msgstr ""

#: ../../glossary.rst:425
# 06486ffa1c2e495db4fb43c3c45da325
msgid "Zope product"
msgstr ""

#: ../../glossary.rst:427
# faed384dddb747008d9cc7ff948aa243
msgid "A special kind of Python package used to extend Zope. In old versions of Zope, all products were directories inside the special *Products* directory of a Zope instance; these would have a Python module name beginning with ``Products``. For example, the core of Plone is a product called *CMFPlone*, known in Python as ``Products.CMFPlone``."
msgstr ""

#: ../../glossary.rst:122
# bfb4cf4c55374e61a92ede8cede74bda
msgid "ZPL"
msgstr ""

#: ../../glossary.rst:124
# c6135f62ae4147aea8585dd4b3219202
msgid "Zope Public License, a BSD-style license that Zope is licensed under."
msgstr ""

#: ../../glossary.rst:126
# fbb8989ab7184c1982bc5806b50b775d
msgid "ZPT"
msgstr ""

#: ../../glossary.rst:128
# c6dab34bff9440f4a55f600137344218
msgid "*Zope Page Templates* is the templating language that is used to render the Plone pages. It is implemented as two XML namespaces, making it possible to create templates that look like normal HTML/XML to editors. See http://docs.zope.org/zope2/zope2book/AppendixC.html"
msgstr ""

