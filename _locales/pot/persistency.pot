# SOME DESCRIPTIVE TITLE.
# Copyright (C) Plone community and other individual contributors
# This file is distributed under the same license as the Plone Developer Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Developer Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-09 14:22+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../persistency/database.rst:3
# 66d1ae34242f437dae804d522595e9cf
msgid "ZODB Database"
msgstr ""

#: ../../persistency/database.rst:5
#: ../../persistency/persistent.rst:5
#: ../../persistency/storage.rst:5
# 6aa9dc0d0bde4bd19a92d2ddd70a65ca
# 441d4767322e40cfa37880a0ba6979a8
# 52e8e01575c1414686b3d3c157e40cd6
msgid "Description"
msgstr ""

#: ../../persistency/database.rst:7
# 84d8ab5111374d9a8b3d5a93607e6f80
msgid "Plone uses the ZODB object database to store its data.  The ZODB can act independently in-process, clustered over network or over another database engine, like SQL."
msgstr ""

#: ../../persistency/database.rst:14
#: ../../persistency/persistent.rst:16
#: ../../persistency/storage.rst:13
#: ../../persistency/transactions.rst:8
# 85be4219c5a04a2e8d67fb9a04d5c046
# 6782645728154655801a9c1c28f77c76
# 711cfd91ee1c4c25b36321fe38e6df2e
# 9972f3f2a7e24e739d19f4c7465edaf8
msgid "Introduction"
msgstr ""

#: ../../persistency/database.rst:16
# ba085164a9dd4b86ba943c2d5fa8b86a
msgid "Plone uses the ZODB database.  The ZODB happily stores any Python object with any attributes |---| there is no need to write database schema or table descriptions as there is with SQL-based systems. If data models are described somehow the descriptions are written in Python, usually using ``zope.schema`` package."
msgstr ""

#: ../../persistency/database.rst:23
# c51a125b565547c9a24b73738f5ec9f1
msgid "This chapter is about the basics of the ZODB, working with the ZODB database directly, like tuning database settings."
msgstr ""

#: ../../persistency/database.rst:26
# aa8c0ed61c294c6e8b9976f8eb10fe1b
msgid "More information about ZODB"
msgstr ""

#: ../../persistency/database.rst:28
# 4f6dac04cca04327a62ea00e6eb47e74
msgid "http://www.zodb.org/"
msgstr ""

#: ../../persistency/database.rst:30
# 7dec7199471441e991c7c971fa6a21ed
msgid "`Documentation <http://www.zodb.org/zodbbook/>`_"
msgstr ""

#: ../../persistency/database.rst:32
# f7fa191590d7427ea36a8b018448ee8c
msgid "`API documentation <http://zodb.readthedocs.org/en/latest/api.html>`_"
msgstr ""

#: ../../persistency/database.rst:35
# 206c039a0c31477dafc419fc0c0988b0
msgid "Database files"
msgstr ""

#: ../../persistency/database.rst:37
# 29743ca659e04df18f85fde882ea05f6
msgid "Usually Plone's database is configured to file ``var/filestorage/Data.fs`` and uploaded files can be found as BLOBs in ``var/blobstorage``."
msgstr ""

#: ../../persistency/database.rst:40
# 049ad1f3e7cf4a529e3271ed77960944
msgid "`Copying a Plone site <http://plone.org/documentation/kb/copying-a-plone-site>`_"
msgstr ""

#: ../../persistency/database.rst:43
# dce55c663fee4f4a8dc8b08e55e19997
msgid "Object database features"
msgstr ""

#: ../../persistency/database.rst:45
# de3d81c137694349811223835db872f8
msgid "The ZODB is an object database.  It makes very easy to store different kinds of contentish data in a graph, supporting subclassing (something which SQL often does poorly)."
msgstr ""

#: ../../persistency/database.rst:49
# 3c7714cdee0949d1bb3a218a02037e8f
msgid "Since the database stores objects, and the objects are defined in Python code, you always need the corresponding Python source code to instantiate the objects stored inside the ZODB.  This might feel awkward at first, but you need to have MySQL running to read what's inside MySQL files stored on your disk and so on ..."
msgstr ""

#: ../../persistency/database.rst:56
# 30a022c8763d4b59b97cd200b368122b
msgid "The ZODB database is not usable without the Python source code used to create the data. The data is not readable using any SQL-based tools, and there exist little tools to deal with the raw data. The way to access Plone data is running Plone itself and performing queries through it."
msgstr ""

#: ../../persistency/database.rst:63
# 35e580cc65374c5cb1ec81068713d8d3
msgid "Since correct source code is needed to read ZODB data, this poses a problem for versioning. Even if you use the correct add-on product with proper source code, if the source code version is wrong, it might not work.  Data model attributes might be added, modified or deleted between source code revisions, making data operations on the existing database fail by raising Python exceptions (``AttributeError``, ``KeyError``)."
msgstr ""

#: ../../persistency/database.rst:70
# 26d84e6b82b648d9ae7bca500adfb793
msgid "To work around the ZODB interoperability problems, products like *ore.contentmirror* exist to duplicate Plone content data to read-only SQL database."
msgstr ""

#: ../../persistency/database.rst:75
# 16eb510bcd1d46659d0f6e2a54aa966f
msgid "Query and searching"
msgstr ""

#: ../../persistency/database.rst:77
# b8f2b441b8c34c3ab6012766d446da83
msgid "ZODB does not provide query services as is i.e. there is no SELECT statement."
msgstr ""

#: ../../persistency/database.rst:80
# ff85a02afdbc464ebf195c62676c9a1e
msgid "Plone provides :doc:`cataloging </searching_and_indexing/catalog>` service for this purpose."
msgstr ""

#: ../../persistency/database.rst:83
# d5eb7b7bd7704cc38b2aeb6fc4241dbb
msgid "This gives some benefits"
msgstr ""

#: ../../persistency/database.rst:85
# 3ab9317b12b0439fa2f3cdda2fa6d0bd
msgid "You define yourself how data is indexed"
msgstr ""

#: ../../persistency/database.rst:87
# 0331333202044dcf97e97d735970d44a
msgid "The backend to perform queries is flexible - you can plug-in custom indexes"
msgstr ""

#: ../../persistency/database.rst:90
# fc490ad0c1c84872996acf2bb52b2cc2
msgid "portal_catalog default catalog is used to all content items to provide basic CMS functionality easily"
msgstr ""

#: ../../persistency/database.rst:93
# 56a55b9217804f66aec635681b65da2b
msgid "You can have optimized catalogs for specialized data (e.g. reference look-ups using reference_catalog)"
msgstr ""

#: ../../persistency/database.rst:97
# 66806d88cd14432bbeccbac28cb0cc2f
msgid "Data model"
msgstr ""

#: ../../persistency/database.rst:99
# e4a6c33071644ef8870a1701879fc314
msgid "There is no hardwired way for describe data in ZODB database."
msgstr ""

#: ../../persistency/database.rst:102
# f2cee1f1fec84e06bbc347fbd4082e2d
msgid "Subclasses of ZODB ``persistent.Persistent`` class will have all their attributes and referred objects written to the database using Python pickle mechanism. Lists and dictionaries will be automatically converted to persistent versions."
msgstr ""

#: ../../persistency/database.rst:108
# 1794c760698a4defb8e0d2e4238419ce
msgid "There are currently three primary ways to define data models in Plone"
msgstr ""

#: ../../persistency/database.rst:110
# ecc685fed3184dd5bad37928c1cb11a8
msgid "Using zope.schema package (modern way) to describe Python object properties"
msgstr ""

#: ../../persistency/database.rst:112
# d38b430d32b24fc8b4348fc942bfd621
msgid "Using Archetypes content type subsystem (all Plone 3 content)"
msgstr ""

#: ../../persistency/database.rst:114
# ea70adc1e97b4ecab90b6c1d28273d67
msgid "Not defining the model, but relying on ad hoc object attributes"
msgstr ""

#: ../../persistency/database.rst:116
# d75881a6dc0c45dd9c71f52b09fc019c
msgid "Read about :doc:`zope.schema </forms/schemas>` how to define a model for the data to be stored in ZODB database."
msgstr ""

#: ../../persistency/database.rst:121
# 074ca95951d944f3a4c51cf9fb8375a0
msgid "Transactions and committing"
msgstr ""

#: ../../persistency/database.rst:123
# 491fbfc84e504abcb60b6a46f4f3158f
msgid "`This in-depth SO answer <http://stackoverflow.com/questions/11254384/when-to-commit-data-in-zodb/>`_ explains how committing works in ZODB."
msgstr ""

#: ../../persistency/database.rst:126
# 128eebf63ce845068084024fd3473737
msgid "Savepoints and optimism regarding them"
msgstr ""

#: ../../persistency/database.rst:128
# 955ccc72853d48d294b09edd52b8fcca
msgid "PersistentList and list differences when saving data"
msgstr ""

#: ../../persistency/database.rst:132
# 73da16374f394d208f371b299d30ab58
msgid "Browsing"
msgstr ""

#: ../../persistency/database.rst:134
# 177556ca51d94132bddee45ecb76c8c2
msgid "You can explore ZODB with-in Plone using `ZODBBrowser <http://plone.org/products/zodbbrowser>`_."
msgstr ""

#: ../../persistency/database.rst:137
# 18d34773b0394c529b98cff309ca43df
msgid "Packing database"
msgstr ""

#: ../../persistency/database.rst:139
# 1a7f5aec252d4c1293f0051b488b72d5
msgid "As ZODB is append-only database it remembers all its history unless packed. Packing will erase undo history."
msgstr ""

#: ../../persistency/database.rst:141
# f808f7b0a39f43618b8ff3506d3df0b5
msgid "`Why you need to regularly pack ZODB database to keep the performance up <http://www.sixfeetup.com/blog/optimize-your-plone-development-by-packing-the-zodb>`_"
msgstr ""

#: ../../persistency/database.rst:143
# 7475a6ce8841407d80679d219ea9dacb
msgid "`Packing is similar to VACUUM in PostgreSQL <http://stackoverflow.com/questions/11254384/when-to-commit-data-in-zodb/>`_"
msgstr ""

#: ../../persistency/database.rst:146
# da70d4df7ad94b92a18a0b3a4bbf99d3
msgid "Packing through-the-web"
msgstr ""

#: ../../persistency/database.rst:148
# be8a65fdb70d4bf9acb64747153bd39e
msgid "Manual packing can be executed through Zope Control Panel (not Plone control panel) in Zope application server root (not Plone site root) in ZMI."
msgstr ""

#: ../../persistency/database.rst:152
# 7adf2ccd456c4b14b6c1a3bd63ece953
msgid "Packing from command line"
msgstr ""

#: ../../persistency/database.rst:154
# 5c77fd202e884f799beb69d8e94ff9a2
msgid "`plone.recipe.zeoserver <https://github.com/plone/plone.recipe.zeoserver/>`_ buildout recipe provides command called ``bin/zeopack`` inside buildout. It allows you to trigger packing from the command line when Zope is clustered ZEO configuration. ``zeopack`` command runs against an on-line site."
msgstr ""

#: ../../persistency/database.rst:159
# e6b3e2f3e5aa446eaa942f3e89c104ff
msgid "This command is useful to run in cron to keep your Data.fs file growing forever. You can control the number of days of history to be kept, etc., using buildout recipe variables."
msgstr ""

#: ../../persistency/database.rst:162
#: ../../persistency/persistent.rst:81
#: ../../persistency/persistent.rst:117
# 4b78c698a33d459e9d49fa3e451c465e
# 865c72b7d17540ebb22552820b09370f
# f7d8d1489df747f7870b1f633d66ab75
msgid "More info"
msgstr ""

#: ../../persistency/database.rst:164
# 97d2877cf58245c187717abd11fe3714
msgid "https://github.com/plone/plone.recipe.zeoserver"
msgstr ""

#: ../../persistency/database.rst:167
# 9502abbc85fe4b94bff8c8a936e6f1fb
msgid "Packing the database offline"
msgstr ""

#: ../../persistency/database.rst:169
# 95f1ba443a6a45df8cab416a7d297783
msgid "`See this blog post <http://blog.twinapex.fi/2009/09/01/packing-and-copying-data-fs-from-production-server-for-local-development/>`_."
msgstr ""

#: ../../persistency/database.rst:171
# f51a78a4bc7e40c2bd2e65bd3075cc7d
msgid "Example how to pack a copy of Data.fs in offline using Python snippet::"
msgstr ""

#: ../../persistency/database.rst:180
# 05a47b021c774744836e706afe391196
msgid "As this depends on ZODB egg, the easiest way to run the snippet is to ``zopepy`` script from your ``buildout/bin`` folder::"
msgstr ""

#: ../../persistency/database.rst:185
# 6628ba98d8b84afca5e2ffed83d279c4
msgid "For more information, see :doc:`command-line scripts </misc/commandline>`."
msgstr ""

#: ../../persistency/database.rst:188
# e8dfd509ca724694baf09dbf96c0c812
msgid "Visualizing object graphs"
msgstr ""

#: ../../persistency/database.rst:190
#: ../../persistency/persistent.rst:238
# 0a40dc909b394a91a925c4e83e1cc363
# afa7cc8b4c4f44b5b8767df8c577d716
msgid "http://blog.hannosch.eu/2009/05/visualizing-persistent-structure-of.html"
msgstr ""

#: ../../persistency/database.rst:192
# 2b7087019964468e8ce38f0ec78f81f6
msgid "http://david.wglick.org/2009/visualizing-the-zodb-with-graphviz/"
msgstr ""

#: ../../persistency/database.rst:195
# bcbe0b461aac44d28a38f7651ae35d88
msgid "Cache size"
msgstr ""

#: ../../persistency/database.rst:197
# cd12d7a9e791423785cb353b7a001605
msgid "`Understanding ZODB cache size option <https://mail.zope.org/pipermail/zodb-dev/2010-March/013199.html>`_"
msgstr ""

#: ../../persistency/database.rst:200
# 67f7758d95a54bfb946674796c662a23
msgid "Integrity checks"
msgstr ""

#: ../../persistency/database.rst:202
# 1ffb3e2fc25b4be48716be503d1c8990
msgid "Especially when you back-up a Data.fs file, it is useful to run integrity checks for the transferred files."
msgstr ""

#: ../../persistency/database.rst:204
# 889fd77c88474b3c917d4003cdebf1f9
msgid "ZODB provides scripts ``fstest`` and ``fsrefs`` to check if Data.fs data is intact and there are no problems due to low level disk corruption or bit flip."
msgstr ""

#: ../../persistency/database.rst:207
# 77a69ba7872842a2a443dfbd4e0c4517
msgid "http://wiki.zope.org/ZODB/FileStorageBackup"
msgstr ""

#: ../../persistency/database.rst:211
# 1e10307a5eb445d297ccc2609b9e3e06
msgid "It is recommended best practice to run integrity against your Data.fs regularly. This is the only way to detect corruption which would otherwise go unnoticed for a long time."
msgstr ""

#: ../../persistency/database.rst:216
# 9389960eaa9344a0a3a3a19176334a65
msgid "Restart and cache warm-up"
msgstr ""

#: ../../persistency/database.rst:218
# 6b05f7cd337a4120a3d7ac606f3befa6
msgid "Discussion why Plone is slow after restart"
msgstr ""

#: ../../persistency/database.rst:220
# 3ea6bc8bd96a433b97b0bfc1034b04fa
msgid "https://mail.zope.org/pipermail/zodb-dev/2013-March/014935.html"
msgstr ""

#: ../../persistency/database.rst:223
# 4121542e8eb64004978bbb8b84e1819b
msgid "Recovering old data"
msgstr ""

#: ../../persistency/database.rst:225
# 3c14eaebc26341a39bc38a7cbdd25cf9
msgid "Instructions for undoing deleted data and fixing broken databases."
msgstr ""

#: ../../persistency/database.rst:227
# e66977faace347e4a662131e26a5576d
msgid "http://www.zopatista.com/plone/2008/12/18/saving-the-day-recovering-lost-objects"
msgstr ""

#: ../../persistency/database.rst:230
# 4f7dc14713bf4f479e45de05089b17f2
msgid "ZODB tips and tricks"
msgstr ""

#: ../../persistency/database.rst:232
# 928a5997ed4d4eca8ed54195274e978c
msgid "Please see"
msgstr ""

#: ../../persistency/database.rst:234
# 1ded39db40ed4b288d5a9a6d79079170
msgid "http://plone.org/events/regional/nola05/collateral/Chris%20McDonough-ZODB%20Tips%20and%20Tricks.pdf"
msgstr ""

#: ../../persistency/index.rst:3
# 529d9f056f244ebab376c4ac08fd2da6
msgid "ZODB, persistency and transactions"
msgstr ""

#: ../../persistency/lifecycle.rst:3
# f3d9c9ecd5b34f4580fe9bb3307cac58
msgid "Object lifecycles"
msgstr ""

#: ../../persistency/lifecycle.rst:5
# 548b45476e8c42db9911f1b2dacf1162
msgid "Plone has different lifecycles for different objects"
msgstr ""

#: ../../persistency/lifecycle.rst:7
# 8e615d2077724afaaf931cb1d510f0f9
msgid "Persistent objects: These objects are transparently persistent. They look like normal Python objects, but they are serialized to the disk if the transaction completes successfully. Persistent object inherit from Zope's various persistent classes: persistent.Persistent, PersistentDict, PersistentList and they have special attributes like _p_mtime when the object was last written to disk. To make object persistent, it must be referred from Zope's App traversing graph. Examples: content objects, user account objects."
msgstr ""

#: ../../persistency/lifecycle.rst:15
# 14757b9833df4d3e86bd234e227262ff
msgid "Request attached objects and thread-local objects: Each HTTP request is processed by its own Python thread. These objects disappear when the request has been processed. Examples: request object itself, getSite() thread-local way to access the site object, request specific permission caches."
msgstr ""

#: ../../persistency/lifecycle.rst:20
# 77731657c4cc4c78978c4501635b8889
msgid "In-process objects, or \"static\" objects are created when the server application is launched and they are gone when the application quits. Usually these objects are set-up during Plone initialization and they are read-only for served HTTP requests. Examples: content type vocabulary lists."
msgstr ""

#: ../../persistency/migrations.rst:3
# 66c24ecc313b495dbf3b594c3b3c0911
msgid "Migrations"
msgstr ""

#: ../../persistency/migrations.rst:5
# cf9d3e5ee06c4fc6928b52a6de9be43b
msgid "Database migrations are needed if your internal data storage format changes between versions."
msgstr ""

#: ../../persistency/migrations.rst:8
# d7d8ecab0c6146d3a5508fee24a7b2b7
msgid "ZODB does not require you to set object format explicitly, like in SQL you need to create table schema. However, your code will naturally fail if the data format of the object is unexpected."
msgstr ""

#: ../../persistency/migrations.rst:13
# ec3b45f213584b19a3915adcf1945d1d
msgid "`Changing instance attributes <http://www.zodb.org/documentation/guide/prog-zodb.html#changing-instance-attributes>`_"
msgstr ""

#: ../../persistency/persistent.rst:3
# b54eb08833ff4814a129189c2753e5b0
msgid "Persistent objects"
msgstr ""

#: ../../persistency/persistent.rst:7
# 77b0a5f3b2dd42a095d321f2cd5cf83e
msgid "This document tells how to save objects to Plone/Zope database. Persistent objects are automatically read and written from ZODB database in Plone and they appear as normal Python objects in your code. This document clarifies some of special properties, like with containers, when you deal with persistent objects programmatically."
msgstr ""

#: ../../persistency/persistent.rst:18
# b8411b9c87844d7581a0021c37bc7c9c
msgid "**Q: How do I save() object in Plone**"
msgstr ""

#: ../../persistency/persistent.rst:20
# dd8faa13d7bf44ddb51e7fe7848e9b0d
msgid "**A: You don't**"
msgstr ""

#: ../../persistency/persistent.rst:22
# e2728faa9a874ab5ba78d17a840cbfb8
msgid "Plone does this automatically for you. You just assign the file data as an attribute of some persistent object. When the HTTP request completes, Zope transaction manager will automatically update all changed persistent objects to the database. There is no \"save\" as such in Zope world - it all is transparent to the developer. If the transaction fails in any point, no data is being written and you do not need to worry about the partial data being written to the database."
msgstr ""

#: ../../persistency/persistent.rst:31
# f219d6aca9be46fd80af273f83cbf21c
msgid "Changed objects will be automatically saved (if they are attached to the traversing graph)"
msgstr ""

#: ../../persistency/persistent.rst:34
# 139885157bfd46b3858692fdf11c2bf1
msgid "Save will not occur if an exception is raised"
msgstr ""

#: ../../persistency/persistent.rst:36
# cbfe9785be2b412289a64453d72c35ec
msgid "If your data class inherits from higher level Plone base classes (all go up to persistent.Persitent class). persistency is handled transparently for you. Plone also handles transaction automatically for each HTTP request. Unless you wish to do manual transactions there is no need to call transaction.commit()."
msgstr ""

#: ../../persistency/persistent.rst:42
# da2e72b57fb24f578c7a27e2a8784425
msgid "If you want to do your own persistent classes please read the following"
msgstr ""

#: ../../persistency/persistent.rst:44
# 2a6dd30a3fb74c2db92cc6e8ad4b6a1e
msgid "`Writing a persistent class <http://www.zodb.org/documentation/guide/prog-zodb.html#writing-a-persistent-class>`_"
msgstr ""

#: ../../persistency/persistent.rst:46
# e27ec57183264725b0a97ccf394ae99f
msgid "`About persistent objects <http://www.zope.org/Documentation/Books/ZDG/current/Persistence.stx>`_"
msgstr ""

#: ../../persistency/persistent.rst:48
# 2882d8aa602749658c0ce8d0253b7428
msgid "`Persistent interface description <http://apidoc.zope.org/++apidoc++/Interface/persistent.interfaces.IPersistent/index.html>`_."
msgstr ""

#: ../../persistency/persistent.rst:50
# 84f3880f965d469db3946ce884a1faa5
msgid "`ZODB tips and tricks <http://plone.org/events/regional/nola05/collateral/Chris%20McDonough-ZODB%20Tips%20and%20Tricks.pdf>`_"
msgstr ""

#: ../../persistency/persistent.rst:53
# 9f0552ca8e8348e68d8c013df9842292
msgid "Lists and dictionaries"
msgstr ""

#: ../../persistency/persistent.rst:55
# 184651be61df433ea574794bd5443db9
msgid "If you modify objects inside persistent lists and dictionaries, the change is not automatically reflected to the parent container."
msgstr ""

#: ../../persistency/persistent.rst:58
# ac17467c26de498c864c6f32a29dcdb0
msgid "`Modifying mutable objects <http://zodb.readthedocs.org/en/latest/working.html#handling-changes-to-mutable-objects>`_"
msgstr ""

#: ../../persistency/persistent.rst:61
# d5e9940f9ece46b8807ebad91c8d4377
msgid "PersistentList vs. normal Python list"
msgstr ""

#: ../../persistency/persistent.rst:63
# 36659fd7ef62423b83ee0c5150aeb2f7
msgid "All items in normal Python list are stored as one write and loaded on one write. PersistentList is slower, but allows individual objects picked from the list without loading the whole list."
msgstr ""

#: ../../persistency/persistent.rst:66
#: ../../persistency/persistent.rst:222
# 41b21d5da07b4d91bde330789f763920
# eddd9e1e8e824850a1bd24264741cb01
msgid "For more information, see"
msgstr ""

#: ../../persistency/persistent.rst:68
# 293ce3ec925b48f9a34ac27de3e50cb2
msgid "https://mail.zope.org/pipermail/zodb-dev/2009-December/013011.html"
msgstr ""

#: ../../persistency/persistent.rst:72
# 57f9d3144ad14c2d9b688172caf63a41
msgid "Persistent, modifications, __setattr__ and transactions"
msgstr ""

#: ../../persistency/persistent.rst:74
# 15226eaaf45545b0894fafd007bc77b7
msgid "When Persitent object is modified, via attribute set or __setattr__() call, the current transaction is converted to a write transaction. Write transactions are usually undoable (visible on Zope's Undo tab)."
msgstr ""

#: ../../persistency/persistent.rst:78
# aa7aba9d47394c99b4e7c1b14d965002
msgid "If you are using Python property mutator and even if it does not write to the object it still will trigger the object rewrite."
msgstr ""

#: ../../persistency/persistent.rst:83
# 4d4b586e1aba412497487813ddcb2704
msgid "https://mail.zope.org/pipermail/zodb-dev/2009-December/013047.html"
msgstr ""

#: ../../persistency/persistent.rst:86
# 3520891fc16e46f2a947b3290ef98c72
msgid "Up-to-date reads"
msgstr ""

#: ../../persistency/persistent.rst:88
# 6b00c2877eae4b75bdf620918c1130a4
msgid "Normally, ZODB only assures that objects read are consistent, but not necessarily up to date. Checking whether an object is up to date is important when information read from one object is used to update another."
msgstr ""

#: ../../persistency/persistent.rst:92
# 75a1dde59bc54a6792d81fedfcae5d21
msgid "The following will force the object to use the most up-to-date version in the transaction::"
msgstr ""

#: ../../persistency/persistent.rst:96
# d998c457ef684b218a06732f0b135aa2
msgid "A conflict error will be raised if the version of ob read by the transaction isn't current when the transaction is committed."
msgstr ""

#: ../../persistency/persistent.rst:101
# 53290d580e604052a2df6364e82b9ebf
msgid "ZODB versions older than 3.10.0b5 do not support this feature."
msgstr ""

#: ../../persistency/persistent.rst:103
# 09056e8a3ef546e193cd69cc36bf90b8
msgid "More information"
msgstr ""

#: ../../persistency/persistent.rst:105
# ee2d571f4bfc4b79a0ea967603657d29
msgid "http://pypi.python.org/pypi/ZODB3/3.10.0b5#b5-2010-09-02"
msgstr ""

#: ../../persistency/persistent.rst:108
# aad15c8d74f74627933a4d32dfc8d69d
msgid "Accessing broken objects"
msgstr ""

#: ../../persistency/persistent.rst:110
# 43920fc7809f4899b325e92741bd5b07
msgid "ZODB is object database. By default, it cannot load object from the database if the code (Python class) is not present."
msgstr ""

#: ../../persistency/persistent.rst:114
# d7ac43f4fb144f009209f453cd6e409d
msgid "You can still access data in the objects by creating Python code \"stubs\" which fake the non-existing classes in the run-time environment."
msgstr ""

#: ../../persistency/persistent.rst:119
# 13b9966421324521a84bbcc513ccac5d
msgid "http://mockit.blogspot.com/2010/11/getting-broken-objects-out-of-zodb.html"
msgstr ""

#: ../../persistency/persistent.rst:122
# 1e6a41f252b048688342df444b0cfea2
msgid "Fixing damaged objects"
msgstr ""

#: ../../persistency/persistent.rst:124
# 4060a8bf96424b2a9e4409a014cd4a83
msgid "If your BTrees have been damaged, you can use ``dm.historical`` tool to inspect the object history and rewind it to a working state."
msgstr ""

#: ../../persistency/persistent.rst:127
# 18d61f1d0e51442db04901bd2eb94f7b
msgid "http://plone.293351.n2.nabble.com/Cleaning-up-damaged-BTree-can-t-delete-folder-tp5761780p5773269.html"
msgstr ""

#: ../../persistency/persistent.rst:129
# 6f6b66c0fb6b46c49e85d0b139a89cec
msgid "http://pypi.python.org/pypi/dm.historical/"
msgstr ""

#: ../../persistency/persistent.rst:131
#: ../../persistency/persistent.rst:236
# 1932c4c910e844c0995f25d915604e17
# 24461ac042924e248fc52d94be6c71b0
msgid "See also"
msgstr ""

#: ../../persistency/persistent.rst:133
# 4bc2dbcbb7634e64b326519f345d35dc
msgid ":doc:`Deleting broken objects </content/deleting>`"
msgstr ""

#: ../../persistency/persistent.rst:136
# f862c445772e4ba18e21717a1bcdad36
msgid "Volatile references"
msgstr ""

#: ../../persistency/persistent.rst:138
# 51238c50b32847e3a2ce31ae344120f1
msgid "Volatile attributes are attributes on persistent objects which never get stored. ZODB assumes variable is volatile if it has _v_ prefix."
msgstr ""

#: ../../persistency/persistent.rst:141
# 4bf31b2d10b343a7a67165c88cd751a8
msgid "Volatiles are useful when framework expects the object to conform certain interface, like form frameworks. However, your persistent object edited by form cannot have persistent attributes for all variables the form expects to see."
msgstr ""

#: ../../persistency/persistent.rst:145
#: ../../persistency/transactions.rst:71
# 6fda063aaa754102adf2d2b600532eab
# 50f26890cf4843e1af21160be0b16a14
msgid "Example::"
msgstr ""

#: ../../persistency/persistent.rst:191
# 3c3a84198b344c8e88e670fce8d88a54
msgid "Correct use of volatile variables in functions"
msgstr ""

#: ../../persistency/persistent.rst:193
#: ../../persistency/persistent.rst:211
# 9a54c8089fd94b53823f2cc66139c1a9
# bc829aa286fa4281a9c7e72906f5b477
msgid "**WRONG**::"
msgstr ""

#: ../../persistency/persistent.rst:198
#: ../../persistency/persistent.rst:205
#: ../../persistency/persistent.rst:216
# 0d0fd4457f70486e8c77e703ba7c7b15
# 05b4c9f45bd04624abb8fae3dd55b0ac
# 620a0627ddd642279d072bd1142ac4ae
msgid "**RIGHT**::"
msgstr ""

#: ../../persistency/persistent.rst:224
# 7f9f287b56df4fc291034bc42cca00b6
msgid "https://mail.zope.org/pipermail/zodb-dev/2010-May/013437.html"
msgstr ""

#: ../../persistency/persistent.rst:228
# ce2d1910117645a190a91130c1818b48
msgid "Measuring persistent object sizes"
msgstr ""

#: ../../persistency/persistent.rst:230
# 865de38943e045a78e34a83d85197073
msgid "Get the size of the pickled object in the database."
msgstr ""

#: ../../persistency/persistent.rst:232
# 3a54a76e430144b588fb9037c5adac1b
msgid "Something like::"
msgstr ""

#: ../../persistency/persistent.rst:240
#: ../../persistency/storage.rst:130
# 12e1474db4094c7a93ed9e8a835f1e9c
# 6faf088910454ba6b21b43f5c4449870
msgid "http://plone.org/documentation/kb/debug-zodb-bloat"
msgstr ""

#: ../../persistency/persistent.rst:242
# c41d458e0dfc4c0987d654c652986157
msgid "treeanalyze.py will give you the total size of a traverse graph http://svn.erp5.org/erp5/trunk/utils/treenalyser.py?view=markup&pathrev=24405"
msgstr ""

#: ../../persistency/storage.rst:3
# aa8a7d91e2fa448aaf680e7b708e0a81
msgid "Storage"
msgstr ""

#: ../../persistency/storage.rst:7
# a032d6cfe19e41d08eadd894043e05de
msgid "What kind of different storages (storing backends) ZODB has and how to use them."
msgstr ""

#: ../../persistency/storage.rst:15
# 3ea3ca6a0dde4477bf6beb06e24974e6
msgid "This page explains details how ZODB stores data. The information here is important to know to understand Plone database behavior and how to optimize your application."
msgstr ""

#: ../../persistency/storage.rst:19
# d90c571b4d7d41fd851ae59ad7d19f58
msgid "Pickling"
msgstr ""

#: ../../persistency/storage.rst:21
# 1bb190e5b26c4606862601ed525ef363
msgid "ZODB is object oriented database. All data in ZODB is `pickled Python objects <http://docs.python.org/library/pickle.html>`_. Pickle is object serialization module for Python."
msgstr ""

#: ../../persistency/storage.rst:24
# 2e17e1979d564f6aae4807a8b0db0571
msgid "Each time object is read and it is not cached, object is read from ZODB data storage and unpickled"
msgstr ""

#: ../../persistency/storage.rst:26
# 011144b8e2c34f79a2eec886e49a5666
msgid "Each time object is written, it is pickled and transaction machinery appends it to ZODB data storage"
msgstr ""

#: ../../persistency/storage.rst:28
# 54facce888364624a8970c7246ddc020
msgid "Pickle format is series of bytes. Here is example what it does look like::"
msgstr ""

#: ../../persistency/storage.rst:41
# 15472f0dc80145eb86aa09c4b262fcd1
msgid "It is not very human readable format."
msgstr ""

#: ../../persistency/storage.rst:43
# 3bd6b8d477af4a61a39bbe7f070b7c99
msgid "Even if you use SQL based `RelStorage <http://pypi.python.org/pypi/RelStorage/>`_ ZODB backends, the objects are still pickled to the database; SQL does not support varying table schema per row and Python objects do not have fixed schema format."
msgstr ""

#: ../../persistency/storage.rst:48
# 483bc24700014a1bb72df686254dce26
msgid "Binary trees"
msgstr ""

#: ../../persistency/storage.rst:50
# c46ae8b3d6a2447bb697c05326c1e85f
msgid "Data is usually organized to binary trees or `BTrees <http://wiki.zope.org/ZODB/guide/node6.html>`_ . More specifically, data is usually stored as Object Oriented Binary Tree `OOBtree <http://docs.zope.org/zope3/Code/BTrees/OOBTree/OOBTree/index.html>`_ which provides Python object as key and Python object value mappings. Key is the object id in the parent container as a string and value is any pickleable Python object or primitive you store in your database."
msgstr ""

#: ../../persistency/storage.rst:56
# 1bb69db256704d3fa49d4435f05203e2
msgid "`ZODB data structure interfaces <http://svn.zope.org/ZODB/trunk/src/BTrees/Interfaces.py?rev=88776&view=markup>`_."
msgstr ""

#: ../../persistency/storage.rst:58
# 356fe770d4b24500a984c41b76b56aaf
msgid "`Using BTrees example from Zope Docs <http://zodb.org/documentation/articles/ZODB2.html#using-btrees>`_."
msgstr ""

#: ../../persistency/storage.rst:61
# c63b22b8d7f848f8b47ace85d69ebec4
msgid "Buckets"
msgstr ""

#: ../../persistency/storage.rst:63
# d470bd0b7ccf4b00b612129b0e2de4df
msgid "BTree stores data in buckets (`OOBucket <http://docs.zope.org/zope3/Code/BTrees/OOBTree/OOBucket/index.html>`_)."
msgstr ""

#: ../../persistency/storage.rst:65
# 5d5c46e363dc4f398c4d3eb365a629ba
msgid "Bucket is the smallest unit of data which is written to the database once. Buckets are loaded lazily: BTree only loads buckets storing values of keys being accessed."
msgstr ""

#: ../../persistency/storage.rst:69
# a6ae3521903d468692d99b7920b9f906
msgid "BTree tries to stick as much data into one bucket once as possible. When one value in bucket is changed the whole bucket must be rewritten to the disk."
msgstr ""

#: ../../persistency/storage.rst:72
# 133f60bd44024353ae9ff6230142e867
msgid "`Default bucket size is 30 objects <http://svn.zope.org/ZODB/trunk/src/BTrees/_OOBTree.c?rev=25186&view=markup>`_."
msgstr ""

#: ../../persistency/storage.rst:75
# c2fc437ad3b54770ac0892a597593d90
msgid "Storing as attribute vs. storing in BTree"
msgstr ""

#: ../../persistency/storage.rst:77
# 5f797e8d99fa43c18536e06989bff9db
msgid "Plone has two kinds of fundamental way to store data:"
msgstr ""

#: ../../persistency/storage.rst:79
# ffd47a2ff88c461bb765d1f1ccb23f00
msgid "Attribute storage (stores values directly in the pickled objects)."
msgstr ""

#: ../../persistency/storage.rst:81
# 4c39ecd65166416487baebdffeb1ca1c
msgid "Annotation storage (OOBTree based). Plone objects have attribute __annotations__ which is OOBtree for storing objects in name-conflict free way."
msgstr ""

#: ../../persistency/storage.rst:84
# 75fef31c66cd495891ff2e2c69d045a7
msgid "When storing objects in annotation storage, reading object values need at least one extra database look up to load the first bucket of OOBTree."
msgstr ""

#: ../../persistency/storage.rst:88
# 1231f39150284cc2a1d0b58448f654a1
msgid "If the value is going to be used frequently, and especially if it is read when viewing the content object, storing it in an attribute is more efficient than storing it in an annotation. This is because the __annotations__ BTree is a separate persistent object which has to be loaded into memory, and may push something else out of the ZODB cache."
msgstr ""

#: ../../persistency/storage.rst:93
# 5a3ab4360b4d48d6ab64cbfe497a9c23
msgid "If the attribute stores a large value, it will increase memory usage, as it will be loaded into memory each time the object is fetched from the ZODB."
msgstr ""

#: ../../persistency/storage.rst:97
# 11fac1113ada453dad0b92180d419995
msgid "BLOBs"
msgstr ""

#: ../../persistency/storage.rst:99
# 0eddaf29410841808d76bbc83e94937d
msgid "BLOBs are large binary objects like files or images."
msgstr ""

#: ../../persistency/storage.rst:101
# bbe42709632f455984b5f45619d1da7c
msgid "BLOBs are supported since ZODB 3.8.x. Plone 3.x still uses ZODB 3.7.x by default. ZODB 3.8.x works but it is not officially supported."
msgstr ""

#: ../../persistency/storage.rst:105
# 9c0e89e9851c4685bc54340f8ba63f30
msgid "When you use BLOB interface to store and retrieve data, they are stored physically as files on your file systems. File system, as the name says, was designed to handle files and has far better performance on large binary data as sticking the data into ZODB."
msgstr ""

#: ../../persistency/storage.rst:110
# deef20f2c996451b8e28e3e0143cee14
msgid "BLOBs are streamable which means that you can start serving the file from the beginning of the file to HTTP wire without needing to buffer the whole data to the memory first (slow)."
msgstr ""

#: ../../persistency/storage.rst:115
# ea09a1fbb6a24b5e897b6e459e13e6ab
msgid "SQL values"
msgstr ""

#: ../../persistency/storage.rst:117
# 15916564b6da49308dc9752232f67161
msgid "Plone's Archetypes subsystem supports storing individual Archetypes fields in SQL database. This is mainly `an integration feature <http://plone.293351.n2.nabble.com/Work-with-Contents-in-SQL-database-td5868800.html>`_. Read more about this in `Archetypes manual <http://plone.org/products/archetypes/documentation/old/ArchetypesDeveloperGuide/index_html#advanced-storage-manual>`_."
msgstr ""

#: ../../persistency/storage.rst:121
# bc1bfbeb3f154e55b1b0427846f8007d
msgid "Transaction sizes"
msgstr ""

#: ../../persistency/storage.rst:123
# 9396f6ebaeb84090817aeada15e4fba8
msgid "Discussion pointers"
msgstr ""

#: ../../persistency/storage.rst:125
# eb6bc609829b451c9ec7052ed55f9740
msgid "http://www.mail-archive.com/zodb-dev@zope.org/msg03398.html"
msgstr ""

#: ../../persistency/storage.rst:128
# 6b4959b188654f1d94f3768362dc30e8
msgid "Analysing Data.fs content offline"
msgstr ""

#: ../../persistency/transactions.rst:3
# 2ab2f239bb544be19656c58bb16c7858
msgid "Transactions"
msgstr ""

#: ../../persistency/transactions.rst:10
# 1bee1eceb12d4edd906a03745c749fca
msgid "Plone uses the `ZODB database <http://en.wikipedia.org/wiki/Zope_Object_database>`_ which implements `Multiversion concurrency control <http://en.wikipedia.org/wiki/Multiversion_concurrency_control>`_."
msgstr ""

#: ../../persistency/transactions.rst:15
# 08895f6827904a00bf70af1ef7a01733
msgid "Plone will complete either *all* database modifications that occur during a request, or *none* of them. It will never write incomplete data to the database."
msgstr ""

#: ../../persistency/transactions.rst:19
# 15699254758446fd9fe393d3ee9ccbc9
msgid "Plone and the underlying Zope handles transactions transparently."
msgstr ""

#: ../../persistency/transactions.rst:23
# c683ea28da104478938a1e97a02dd95d
msgid "Every transaction is a *read* transaction until any of the objects participating in the transaction are mutated (object attribute set), turning the transaction to a *write* transaction."
msgstr ""

#: ../../persistency/transactions.rst:29
# 51c6c98d43264bfcbdb5231a3ce43439
msgid "Old examples might refer to the ``get_transaction()`` function. This has been replaced by ``transaction.get()`` in the later Zope versions."
msgstr ""

#: ../../persistency/transactions.rst:32
# 17c1af06c3044b2ba5265c106a578944
msgid "Please read this `Zope transaction tutorial <http://www.zope.org/Members/mcdonc/HowTos/transaction>`_ to get started how to use transactions with your code."
msgstr ""

#: ../../persistency/transactions.rst:36
# 8a315167209e4a5d9325b6c9560503a1
msgid "https://bugs.launchpad.net/zope2/+bug/143584"
msgstr ""

#: ../../persistency/transactions.rst:39
# 06e66c0d9f6e426385ce1eb02f012bc3
msgid "Using transactions"
msgstr ""

#: ../../persistency/transactions.rst:41
# ea64b59fe40f4a67b4d5803709cc64e7
msgid "Normally transactions are managed by Plone and the developer should not be interested in them."
msgstr ""

#: ../../persistency/transactions.rst:44
# 433e3996e31b475ab2bd915a4c362b1b
msgid "Special cases where one would want to manage transaction life-cycle may include:"
msgstr ""

#: ../../persistency/transactions.rst:47
# 89e129590a4044c7b76e81da4a79a983
msgid "Batch creation or editing of many items once."
msgstr ""

#: ../../persistency/transactions.rst:49
# fd50ece8fa4c421ab1ccf8d4319548a1
msgid "Example code:"
msgstr ""

#: ../../persistency/transactions.rst:51
# 6a74f6e20215405abbf0284ce04876bd
msgid "`transaction source code <http://svn.zope.org/transaction/trunk/transaction/?rev=104430>`_."
msgstr ""

#: ../../persistency/transactions.rst:53
# ac4c80139e8c4c0da2c7fd18682b70e3
msgid "http://www.zope.org/Members/mcdonc/HowTos/transaction"
msgstr ""

#: ../../persistency/transactions.rst:55
# 8b83dcc965154fc7b46cd6b23b8629cf
msgid "https://bugs.launchpad.net/zope3/+bug/98382"
msgstr ""

#: ../../persistency/transactions.rst:59
# 16399776756e47bc82301f55c25031a4
msgid "Subtransactions"
msgstr ""

#: ../../persistency/transactions.rst:61
# d6a0e4644ac04cf5a95902263ab78f7b
msgid "Normally, a Zope transaction keeps a list of objects modified within the transaction in a structure in RAM."
msgstr ""

#: ../../persistency/transactions.rst:64
# 62eebd43544c4776bb74f9d2158bc8f7
msgid "This list of objects can grow quite large when there is a lot of work done across a lot of objects in the context of a transaction. *Subtransactions* write portions of this object list out to disk, freeing the RAM required by the transaction list. Using subtransactions can allow you to build transactions involving objects whose combined size is larger than available RAM."
msgstr ""

#: ../../persistency/transactions.rst:90
# 8131ed541b5c448a964a7b478fd42408
msgid "Failsafe crawling and committing in batches"
msgstr ""

#: ../../persistency/transactions.rst:92
# 8e99693c68cc408baa496b0d0df940aa
msgid "In the case you need to access many objects in coherent and efficient manner."
msgstr ""

#: ../../persistency/transactions.rst:94
# bf996bf53df44650a281170613cdc68e
msgid "https://bitbucket.org/gocept/gocept.linkchecker/src/80a127405ac06d2054e61dd62fcd643d864357a0/src/gocept/linkchecker/scripts/crawl-site.py?at=default"
msgstr ""

#: ../../persistency/transactions.rst:97
# 8d7d1ace5b3f4a2583fc8c0c5eccca1f
msgid "Transaction boundary events"
msgstr ""

#: ../../persistency/transactions.rst:99
# 3ef4840f1b9446ddb0f93d91a8b91b5e
msgid "It is possible to perform actions before and after transaction is written to the database."
msgstr ""

#: ../../persistency/transactions.rst:102
# bcaeae46ad204baa9bf30a7932c9fd71
msgid "http://svn.zope.org/transaction/trunk/transaction/_transaction.py?rev=81646&view=auto"
msgstr ""

#: ../../persistency/transactions.rst:105
# 9658babdf771477fb3c3b3c241b502f0
msgid "Viewing transaction content and debugging transactions"
msgstr ""

#: ../../persistency/transactions.rst:107
# 8eaec6a5683549d5b171e3d522e719b0
msgid "Please see :doc:`Transaction troubleshooting </troubleshooting/transactions>`"
msgstr ""

#: ../../persistency/transactions.rst:110
# 2f0a62fdf415474f9082de9fd881693b
msgid "Undoing transactions"
msgstr ""

#: ../../persistency/transactions.rst:112
# a9041b5ac1a44e848d898791359e3ea7
msgid "Everything that has happened on Plone site can be undoed through the *Undo* tab in ZMI, in site root. By default you can undo latest 20 transactions."
msgstr ""

#: ../../persistency/transactions.rst:115
# 1deb04a140b14457b28b642c0662d0bc
msgid "If you need to raise this limit just replace all numbers of ``20`` with higher value in file ``App/Undo.py``, restart site and now you can undo more transactions."
msgstr ""

